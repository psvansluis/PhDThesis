%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: logo9c.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Geraint Davies%%CreationDate: 2/6/09%%BoundingBox: 0 0 508 507%%HiResBoundingBox: 0 0 507.9742 506.9747%%CropBox: 0 0 507.9742 506.9747%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x5205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">logo9c</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2009-06-02T15:27:51+01:00</xap:CreateDate>
         <xap:ModifyDate>2009-06-02T15:27:51+01:00</xap:ModifyDate>
         <xap:MetadataDate>2009-06-02T15:27:51+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FWP+bPzA8leUYPW8yaza6aCvNIpXBmda0rHCvKV9/5VOKaeLeaf+c1PJFizReXdIvNakVmX&#xA;152WygIHRkJE0pr4NGuKvJ9f/wCcxPzZ1EcNNFhoqAkq9tb+tKQegZrlpkNPZBitsC1X86/zb1SW&#xA;SW7826mDLXmlvcvbRnl1Hp25iQD2ApitsSu9T1K8cyXd3NcSHq8sjOT26sTjS8RQ2KHYqi7TVtVs&#xA;39SzvZ7Zx0eGV4zuKdVIwUniLLtK/PL839LnE9t5u1ORx0F3O14n0pc+sh+7Cts/8vf85kfmnp4W&#xA;PVYdP1qPlWSSaEwTEeCtbtHGP+RZxW3rPlX/AJzP8gai6Q+YdNvNBkdqGZaXtuo8WaMRzfdEcVp7&#xA;R5X87eUfNVp9a8u6va6nEFDOLeRWkjDdPUj2kjPs6g4rSd4odirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirz38yPz2/LvyCHg1W/+tauo20eypNc1IBHqCoSLZgf3jCo6VxTT5b/ADB/5yy/&#xA;MjzKZbXRHXyzpb7BLNi12y7H47ogMpqP91Knga4rbxa6urq7uZLq7me4uZmLzTysXd2bcszMSST4&#xA;nFClirsVdirsVdirsVdirsVdirsVRFhqF/p15Fe6fcy2d5AweC5gdopUYbhkdCGUjxBxV7f+X3/O&#xA;Xf5geXzFaeY0TzLpiUUvMfSvVUCg4zqCH8T6isx/mGKX1L+XX50fl95/iC6DqIXUQvKXSboCG8QC&#xA;tT6ZJEgAFS0bMB3OK0zjFDsVdirsVdirsVdirsVdirsVdirsVdirsVSrzP5q8u+VtIl1jzBfxadp&#xA;0OzTyk7sQSERVBZ3NDRVBJ8MVfIX5tf85a+ZvMDy6X5L9XQdG+y1/XjqE1K7h1JEC9NkPLb7W/HF&#xA;L5/d2di7ks7GrMTUknqScULcVdirsVdirsVdirsVdirsVdirsVdirsVdiqpb3FxbTx3FvK8M8TB4&#xA;po2KujKahlYUIIPcYq+jPyj/AOcu9Z0loNI8+h9V0wURNZjFbyEAUBmXYTqKbt9vqaudsUvrXQdf&#xA;0XzBpVvq2i3kV/p10vOC5hbkpHcHurDoyncHYiuKEfirsVdirsVdirsVdirsVdirsVdirz783fzp&#xA;8q/lrpYk1BvretXCFtP0eJgJZeoDud/Ti5Chcjx4gkUxTT4W/MP8zPN3n/WTqfmG7MgUt9Uso6rb&#xA;WyN1WGMk06CrGrNTcnFbYrih2KtgEmg3J7YqmNp5b8xXi8rTSry4XbeKCVxv0+ypwWnhKK1DyL52&#xA;052j1Dy/qVo6AM6z2k8ZAPQnkgxtaKTSRSxOUlRkcdVYEEfQcKkLMUOxV2KuxV2KuxVUgt7i4lEV&#xA;vE80rbLHGpZj8gKnFIDKLf8AKT80riFJ4fKOsPDIA0bixuKMrCoIPDcEHBa0o6j+WP5j6bbtc6h5&#xA;X1W1tl+1NLZXCoPmxSgxtaY2yMjFXBVhsVIoRhQtxV2Ks0/LH82vN/5d6uL3RLjnZykfXtLmLG2u&#xA;F6fEgPwuP2XXcfKoKm33X+Vv5teVfzG0QX+jy+lewgDUNKlI+sW7kdwPtRn9mQbH2NQFSGa4odir&#xA;sVdirsVdirsVdirsVeW/nn+eej/lro/oQcL3zVeoTp2nE1VFNR9YuKGqxqeg6udh+0yqXwd5g8w6&#xA;15i1i51nW7yS+1O8bncXMpqxNKAADZVUCiqNgNhtiglLsVdir6T/ACW/5xNbX9MtfMfnaeW0067R&#xA;ZrLSbchZ5I23V5pCD6asKEKo5EHquBlyfTflj8s/y/8AK6RroOgWVi8W6XCxK9x9M8nOU/S2GkWW&#xA;TYodiqX6x5d8v61EsWs6ZaanEn2Y7yCOdRXwEisMU28l84f84lflTrkTvpcE3l6+IPCazdpIeRNa&#xA;vBMXFB4IUwLb53/MX/nFz8yPKKS3llCPMOkJVjc2CsZkQV3ltjVxsKkpyA7nFaePEEEgihGxBwoa&#xA;xVkPkzyB5v8AOepDT/LemS38wI9WRRxhiB/allaiIP8AWO/bFID6g/L3/nDLQLERXnne/bVbofE2&#xA;mWZaG1Br0eX4ZpP9jw+nAth755d8oeVvLdsLbQNJtdMi4hWFtEkbMB05sByc+7EnCpKb4odirFvO&#xA;P5X+QfOMTp5i0S2vJXp/pfH07kcRRaXEfCWg8OVPbGk2+S/zt/5xf1XyTazeYPLk8mreW4viuY3X&#xA;/S7VST8T8RxkjG1XAFO603wLzeEYUOxVOPKfm3zB5T1y31vQLx7LULc/C6fZdSQWjkXo6NTdTtik&#xA;F97fkv8AnRoX5laF6sXG01+0UDVNLJ3Q9PViru0THof2eh7EqkPRsUOxV2KuxV2KuxV2KvPvzp/N&#xA;7Svy18rtfyBLjWrwNHo2nsTSSUAVd6EH0o+QL+OwG5xSA/P3zD5g1jzFrV5res3LXmp30hlubh6V&#xA;LHYAAUCqo2VRsBsNsUEpdirsVTvyPp9jqPnTQNP1BxHYXmo2kF3IeixSTork1/yScBSOb9OQAAAB&#xA;QDYAdKYUIfUdRstN0+51C/mW3srOJ57md9lSONSzsfkBiry2Hzf+cfniH635L0uy8teXJ1DWWta6&#xA;HkvLiNjVZoLSPZFZfs+r9oGowM6ATNPIn5wHeX8z3rXpHomnqv3N6h/HGiix3LH0T8/NJPqWHmbR&#xA;/MqlTyg1WwewYEb/AASWTuKnp8S0x3TYUk/OyTQ51tvzF8t3vlMsQq6qP9P0tmI2H1q3HwM1Pssu&#xA;3c42jh7npFhqFhqFnFe2FzFeWc45Q3MDrLE69Kq6Eqw+RwsXin/ORH5SflNf6Dd+ZtZuI/Lesj+6&#xA;1SBKtdTsarFJbLT6w777r8fcniMBZDd5Z+Tv/OJWqa16OteejLpukk8odHWsd5OvYy1/uEPh9s/5&#xA;OxxXk+sNF0Ly35V0UWOk2lvpOk2il2SMCONQq/FJIx6nivxOxr4nCjmwO/8Azi1HXb2XSvyv0U+Z&#xA;rmFjHc67Oxt9Gt2DAEfWDQ3DLWvGLqNwTgtPD3t2/wCWH5hawwufOPn/AFBJCCV07y5x0u3iJNeP&#xA;rBXmmWnQtQ40vEFy/wDOPnlBJfXi1fzBFdA81uU1a6Eiv15gkn4q40vEh5rvzZ+WWq6Wuq63P5l8&#xA;kardxab6+ocDqOnXFyxEMklwoQTws3wuXAZdqeBeSdi9WwsFk8EFxBJBPGs0EymOWKQBkdGFGVlO&#xA;xBGxBxV+aX5kaBaeXvP/AJh0Szr9T0/ULiC1DGpESyH0wTQVIWlcQksbxQ7FU58oebtd8o+YbTX9&#xA;DuPq+oWbckYjkjqRR45F/aR12I/jiofoR+VP5o6F+Y3laLWtN/c3SERanpzNyktp6bqTQckbqj0+&#xA;IeBBAUkMzxQ7FXYq7FXYqlXmrzPpHlby7f8AmDWJfR07TojLOwoWO4VUQEiruxCqK7kjFX51fmZ+&#xA;Yetef/Nt35h1QlPVPp2VoG5JbWykmOFDQdK1Y0HJiT3xSWK4odirsVVLeeW3uIriFuMsLrJG3gym&#xA;oP3jFIL9MfIHm6z84eTdJ8yWhXhqNuskka1pHMPhmj33+CRWX6MVISb879GvtZ/KbzPYWArdNZNK&#xA;iDq4t2WZkFAal1jKj54CmPNkPlDXNK17ytpWsaSETTr61iltoo+PGNSo/dfDsDGfgI7EUwoKb4oS&#xA;XX/O3k/y7LDDr2t2OlzXNPQiu7iOF2BPHkFcg8ajdugxSAmUUunanYCSJ4b7T7uPZ1KywyxOKdRy&#xA;V1YH5HFDxHz1o9r5B8x2n/KrLmS084azKrnyRbqJ9Nu4uf7yeeAsi2SKK/vlZRsQB9ogMxuN2aeU&#xA;vywuBrC+bvPV2mv+cK8rWgIsNNX/AH1YQt0p3lb4zSuxrVpBl3Mk84+d/L/lHTkvNWlYyXD+jYWF&#xA;uvq3d3OdlhtoR8UjsSB4DuQMNoAthUPkXzR+YDx6j+Y5NhoYPOz8j2kp9Olao+pToQZ5Oh9NaItB&#xA;35DAysDkz++1Dy15U0Frm7ltdG0TT46VPCCCJB0VFFB7KqjfoMLHmx3yD+cv5f8AnzUL7T/LWoNc&#xA;3VgvqSRyRPCXi5cPVjEgUsnIj3FRUb4rTNsUPLvzc9HzP5g8r/l5bp9Ynub6HWtaAFVg0ywfkzSG&#xA;h4meXjGnia4Czj3vUcLBA67rml6Do15rOqzrbadYRNPczN0CIK7eJPRQNydhiofmh5u8wT+Y/NOr&#xA;a/Oojl1S7mu2jFaJ60hcKKk7KDTFJSjFDsVdirOPyf8AzS1b8ufN8GsWpaXTpiIdXsB0ntifioCQ&#xA;PUT7Ubdjt9ksCpD9D9E1rTNc0iz1fS51utOv4lntZ06Mjio2O4PYg7g7HFCNxV2KuxV2Kvi3/nLX&#xA;82n8weZv8F6XL/uG0GU/X2Xb1tQWquDv9mAEoNh8XLr8OKXz7ihsAkgAVJ2AGKvRdC/5x4/OXXLF&#xA;b6x8szrbOAUa6kgtGYMKhlS5kicgjvTG00x3zX+XHnryk3/OxaHd6dHyKLcSxkwMw7JMvKNvobG1&#xA;pjeKHvH/ADi3+dEfk7XW8sa5P6flzWJAYp3NEtbsgKHJ7JIAFfw2PQHAkbvtzCh5HZSf8qk81SWF&#xA;0xT8t/Ml0ZNNum4iPSNSnJL28h24W05+JG6I2x6lsHJnz971zCwfFn/OYHkHXdP8+N5xKPPomspD&#xA;Es6glYJ4IliMLnfjzWPmvj8XgcCeiQf846eY/wA4k8wyeX/IcyyW12jteRXqtJY23JeP1p6fYZTS&#xA;lPtmgIbpikeb7K8jeQNM8qW88olfUte1FvV1nXboA3N1MepJH2I1/YiX4VHvUlAQTaj58/MK38tt&#xA;aaVYWrax5s1aqaNoUBAkkIBrNMxNIoEp8cjbDfwOJKQLQnkv8up7LVW82+bLlNZ87XKcDdhSLawi&#xA;YGtrp8bV9ONeRBf7T7k9TjSkp150876H5Q0pb7U2eSWd1gsNPt19S6u7hzRIbeIbu5J+jviSgC3y&#xA;h/zktoH516lZWXm3zTCkPl5totFs5GlTSy+yC5oAGkk/alFRy+HYcRik+TLf+cQvyh1nTZ5fP+sx&#xA;taxXdqbfRbV+SySRysrPcsKiiEJxjBHxVLbDiSo5Pc/zG/MG38pafbxW1s2p+ZNWc22g6LDvJcT0&#xA;6tT7MUdeUj9hiSoFqX5b+Q7ny7b3mra5dDU/OWuOs+u6mB8HJRSO3twQOMEK/Cg79fABASSy+5ub&#xA;e1t5bm5lSC2gRpJppGCIiIOTMzNQKqgVJOFi+IP+cjPz+m89X7+XvL8rR+ULOQH1KFHvZk/3a4O4&#xA;iU/3aH/WbegUJ5PF9N0zUdTvobDTraW8vrlgkFtAjSSOx7Kqgk4UAPd/Ln/OGX5jahZrcavf2OjO&#xA;4qLR2a4mX/X9IemPoc4E0Ek/MP8A5xY/MXyfpc2rwtBrmmWytJdPZc/WhjUAmR4XUEqOpKFqAEmg&#xA;xWnjWFDsVfTH/OIH5ttYak35favcf6DfM02hPI20Vz9qS3FeizD4lFft16l8UvrzFDsVdirz389v&#xA;zIHkH8u7/VYHC6vdf6Fo42J+szA0koQw/dIGk3FDSnfFIfne7s7F3JZ2JLMdySepJxQtxV9Kf84f&#xA;/lTZaxqF1551iBZ7XS5Rb6RDIoZDdgB3mNT1hVl47faavVcCeT7AwoUru0tLy2ltbyGO5tZlKTQT&#xA;KHjdT1VlYEEHwOKvnD84/wDnEjS9Rin1r8v0Ww1EVkl0NmpbTdz6DN/cv4Kfg/1cCeb5Hv7C90+9&#xA;nsb6CS1vbZ2iuLaZSkkciGjKytQgg4UPqr/nGH/nIQXC2fkLzZcf6QoEOhapKwo4AolrKzftDpEe&#xA;/wBnrSoTzfS+r6RpmsaZc6XqltHeafeRmK5tpRyR0bsf4HthQ8x0vV9V/Km+h8v+ZJ5b7yBO6xaB&#xA;5kl+N9OLEKljqD/76FaRTHYfZO32RyZ83pes6LpGvaRc6Vq1tHfaZfRmO4t5ByR0O/boQd1Ybg7j&#xA;fCweQeU9NtvyO1O40m8t0PkLXLsPY+ZQAJbKeQcUttSYDeLtHN0X9qldgz5s38+fmHLpFza+XvLd&#xA;sms+ddVWunabyPpQxftXd467x26fe5+Fe5CSgBV/L78vU8trdarqt0dY84auRJreuSCjOdqQQD/d&#xA;dvHQBEFOnyAQFJRXnzz7pnlHT4nkifUNZvm9HRtDtviuryfska78UXrJIRRR70BSUAW8z8tNrvl3&#xA;8zo9b/NiCFtV16FLfy3rULl9O053H7zTFVhSCV67Skn1OgbdqhkeWz228s7S+tJrO8hS4tLhGiuL&#xA;eVQ6OjijKymoIIO4yTB45qusa3+SNpcg2lxr/wCXjq36HCuDcaXcN/d2c0kh/wB5HY0jlNTH9k12&#xA;qOTPmyj8tPI2o21zN5182XUep+ctZiXlLEQ9tY2p+JLOyI5ARjl8TA/Gd9+pQgnoz6aaGCGSeeRY&#xA;oYlLyyuQqqqirMzHYADqcLF8Wf8AOR3/ADkM/nGaXyr5YlaPyvBJ/pd2pKtfSIdttv3CndQftH4j&#xA;2wJ5PFfLXlrW/M2t2uiaJave6levwggT7yzE7KqjdmOwG5wqA+8/yV/I3y/+W2kK5VL7zPcoP0jq&#xA;xHSu5ht+W6RL979W7KqpL03FDsVfDH/OU/5U2/kzzlHrGkwCHQfMHOaOGNQscF0hHrRKoOynkHXY&#xA;DcgbLgSXiWFCtZ3l1ZXkF5aStBd20iTW88ZKukkbBkdSOhVhUYq/R38o/wAwLfz75B0zzChUXcie&#xA;jqcK0/d3cVFmWlTxDH41B/ZYYpLMcUOxV8M/85ZfmCfMv5kPolrLz0vyyrWaAfZa7Yg3T7gGqsFi&#xA;/wBhUdcUl4jih2Kv0a/Izy5F5f8Ayl8sWCAc5LKO8nYLxJkvP9IeviVMvH6MATLmy3W9b0nQ9Jut&#xA;X1e6jstNskMtzcymioo2+ZJOwA3J2G+FADz8/wDOQHlaJFu77RPMNhoT7p5gudLnWwKH7MnNeUgV&#xA;uxKYLZcD0HR9Z0nWtNg1PSbuK+0+5XlBdQOHjYdNiO4OxHY4WNPK/wA9/wDnH7SPzEs21TTfT0/z&#xA;bbp+6u+NEulVaLDcU+QCydV6bjAkF8Na1our6Dq1xpWrWsljqVm5Se3lHF1YfrB6gjYjcYV5Prf/&#xA;AJxr/wCcik16K18lebrimuxgR6Tqkrf72KPswysf93gfZb/dn+v9sLzfQ2o6dYanYXGn6hbpdWV0&#xA;jRXFvKoZHRhQqwOFDzC3udU/KbUEstQkmv8A8sbl1jsdRkLSzaI7EKlvcuas1mTRY5D9j7LdiRyZ&#xA;8/e9Ou7TTtU0+S1u4Yr3T7uPjLDIqyxSxuOhBqrKRhYPHLHRLf8AJHXr3UxaG98ha1IgutXCvNfa&#xA;QUUJDFO3xvLYgCiMN06Gu3Icmd2zL8z/AM4PKnkLyomuXU6Xst6nLRbKCRWa8ZlDKyMOQ9KjAtJ0&#xA;A6VJAJY08+/5xu84+WvO9/qvmTVLv61+Y0vJbqGdQi2tgH/dQ6enJv3AqOZ+1z+31BYJJ2e3a3om&#xA;k65pN1pGr2qXum3qGK5tpRVWU79twQd1Ybg7jfCxBedaX5i1j8utZtPLHm65e98qXri38tea5jV4&#xA;3NeFjqT9BJTaObYOBvvXiOTOremXlnaX1pNZ3kKXFpcI0VxbyqHR0cUZWU1BBB3GFg8rtrm+/KG+&#xA;jsL+SS7/ACwu5BHp+oSEyS6JLIaLb3DGrNZsxpHIfsfZbsSOTPn73gv/ADkX/wA5FzebZp/KvlWd&#xA;ovK8Tcby8WqtfMp+8QA9B+11PYYo5PFvKvlTXvNWu22h6FateajdtSONdgAPtO7HZUUbsx6YUAPv&#xA;P8k/yT0T8tNEoOF75kvUH6U1SnXv6EFd1hU/S5+JuwVUl6VihhOt/nZ+VOiag2n6l5ms47xCVlij&#xA;Zp/TYEgrIYVkVCKbhiMFsuEsu07UtP1Oxhv9OuYryyuF5wXMDrJG69Kq6kg4WLzL/nJ3yuuv/k7r&#xA;JWN5LnSTHqlsE3obc0lYih2EDyYCkPgDCh2KvoT/AJw6/MFtH863PlK7lpp/mBC9qrH4UvYFLClT&#xA;QerEGU9yQgxS+0MUMf8AzA82QeUfJWs+ZJuJGm2ryxI9eLzEcYYzTf45WVfpxSH5oXV1c3d1Nd3U&#xA;jTXNw7SzzOeTO7kszMT1JJqcUKWKrkALqD0JAxSH6mWVpDZWVvZwAiC2jSGIHchI1Cr+AxQ828+Q&#xA;L5n/ADW8peTp4xNpGmwT+ZdXt3pwlMLC2slYH7QWdyxXoe+AsxsLenkAggioOxB6UwsHmWs/lpqn&#xA;lnUZvM/5XiKxvpPj1Tyq59PTdRA3PFdltrj+SRaL2YULVFMrvmyryN570bzhpkl3YrJbXlpIbbVN&#xA;Kul9O7s7hDRop4+x22PQ4QUEUxX87PyN0H8ytJ9Sq2Pma0jI03VANj3ENwACWiJ+lDuO6sqC+QvI&#xA;P5GeffMnn268txQtp02iXATWtSJrHZlGpVXQ0eQ8f3aqfi67KCQE1T7B8m+btf0DXYfIPnyb1tSk&#xA;Df4b8yceEOqwRj7D9RHdxr9tK/F1FagsqR1D0W5tre6t5ba5iSe2nRo5oZFDo6OOLKytUMrA0IOF&#xA;i8oj/SX5Q6h6bma+/Ku7k/dyktLPoMjn7Lk8neyYnZusffxYcmfP3vVFax1CxDKYryxvIqgjjLDL&#xA;DKv0q6Op+RGFg+YPzi/5xK1S8ul1LyDcCS0RSqeXruYqIAX58bOSQlBGWdmKMVoa0JrQBldtflT/&#xA;AM4n+bNJV/MGra42g+ZoV5aIlgyzfV5gftXRpwkRh8LRqSCp3btioID2/wAief7zUdQufKvmq2j0&#xA;rzrpy87i0Qn6vd29aLeWTNu8Tdx9pDs2IKkMr1vRNJ13SbrSNXtY73Tb2MxXNtKKqyn8QQd1Ybg7&#xA;jfCxBebaJrerflnq1r5U813Ul75QvZBB5X80TmrQMfsafqD9AwG0Up2YfSFDMi3qF5Z2l9aTWd5C&#xA;lxaXCNFcW8qh0dHFGVlNQQQdxhYPiT84/wDnHa40X8x9O0LyWwvo/MXOax0rnWezRGAczE9LcV+C&#xA;RvAg1K1IZVb6d/Jn8mdB/LXQfQg43eu3ag6pqhFC5G/pRV3WJT0HfqfYoJZ5qGo2Gm2M9/qFxHa2&#xA;VshluLmZgkaIoqWZjsBih5YP8S/m5KXSa58v/lkpKoYy0N/rYqQWrs9vaN2H2nHz+Ec2fL3vQ9C8&#xA;neVdA0xtL0bSbWxsJEEc1vDEoWVQvH97tWQkHcvUnDTEksA8s2lp5H/OS88qacBa+XPNVg+s2Gnq&#xA;CIrfULeQR3SQL0VZYyJCBsKUAAwMjuGb/mJEk35f+ZoX+xJpN8jU8GtnBxLGPN+ZeFDsVRuiavfa&#xA;NrFjq9g/p3unXEV1bORUCSFw6EjuKriofpr5a16z8weXtN12yqLTVLWG7hUkFlWZA/FqVHJa0Pvi&#xA;peEf85qeaWsfJGkeXYmZZNavGnn4tQGCyUEow71lmjYf6uKXxpih2KtqaMD4GuKh+pOk6hHqWlWW&#xA;oxjjHewRXCLXlRZUDgV79cUkPOtLlnf/AJyP1xLhXHpeWbRbEleKmE3btIa0+L96x3+YwdU9Hp+F&#xA;i7FXn3nzyTq8WsxeevJKxx+bbOP076xc+nBq9oo/3mnI2EqgfuZT0NAfhpxBZA9CkT/mpq35gC28&#xA;vfl0stjfyxq/mXWbuFgNFQkq9uY3AEl4WVlVOn7VabhtNVzei+UPKGh+UtDh0bRoTHbRkySyyHnN&#xA;PM+8k88nV5JDuzH5CgAGFiTbBPzl1O219Y/y50WyTVvNt/wuonLMkejpGapqU00ZDxNGT+7Cnkx2&#xA;3BowLKPemHlXznrGh61b+R/PkytrEwI0HzAF9O21aJO3UiK7Uf3kRO/VagjFBHUPQZoYZ4ZIJ41l&#xA;hlUpLE4DKysKMrKdiCOowsXkdxba/wDk/cy3WmQTax+V8rmW40uKst3orOS0ktuDUyWndkrVOo78&#xA;hyZ8/e9N8veZNB8x6XFquh30Oo6fN9i4gYMK0BKsOqsK7qwBHfCxISPzv+Z3l7yq0di3PVPMd38O&#xA;neXrEerezuR8PwCvpp3LvQAePTASkRth0f5M635khl81ebtVmsvzDl4zaNc2EjehogSrRW0CA8Jx&#xA;8VJy1Q+4H8xaTxMq8geeNR1K4ufLPmm3TTvOmlKGu7ZD+5u4CeKX1mTu8LnqOqN8LYgoIZRreiaT&#xA;ruk3Wkavax3um3sZiubaUVVlP4gg7qw3B3G+FiC8dk82+dPy41SP8ubCI+cr6/hMnk6SSVRcW0Ib&#xA;h6eqUPL0YF3WYU5hSu37IZ0Duz78vvy+Xy2t1quq3R1fzhq5Emt63IKM7D7MEC/7rgj6Igp0+QCA&#xA;glk2r6vpmj6Zc6pqlzHZ6fZxmW5uZTxREXuf4DvhYvM9M0vVPzWuYdc8yW0lh5AglWfQfLsoKy6k&#xA;VoY7zUVP+6f2oof2vtNUU5Dmz5PVwAAABQDYAdKYWDsVeZeark3P59eRLCGMs+nabq99cuOixXKx&#xA;QIT4fHHT6cHVkOTIfza1ODTPyw81Xk7+mqaVdojf8WSwtHGPpd1GJRHm/NfCh2KuxV9wf84eeal1&#xA;X8rX0aSRTc+X7yWARgHkLe4P1iJmPTeR5VH+rikvEv8AnMTXxqP5sjTUqE0Wwt7Z1JqDLNyuWYDt&#xA;VJkH0YqXhmKHYq7FX6MfkRr4138ofK17VecdklnIFNfisybY19z6VfpwBMuaWeY5G0X8/fK2qSMg&#xA;tPMmkXmhFmNOE1rIL6Lc0FZKlVHfHqkcnpN9JcxWVxLax+tcpG7QQk05uFJVa+52wsQ/P7y//wA5&#xA;E/m3ovmY6zNrtzqKvIWu9MvZGktXVn5PGsRPGHwBjC8e222Blb6j0785p/zLsLLSPy6WW01O+iEm&#xA;u6rcRFo9GiJKt1ASa4cgiFQaH7RoAcVAHN6V5P8AJ+heUtCh0XRYTFbRkvLK55zTzPvJPPJ1eRzu&#xA;zfQKAAYUE2x7z3541aLUE8oeS4Y7/wA53kYdmk3tdNt2NPrd4RWn/Fcf2nPanUEpA6lNPIXkLTPJ&#xA;+mSwwyyX+rX8n1jWtauN7m9uT1kkO9FFSEQGij3qSQEE2wf/AJyY86+RtD8hz6Zr8QvtV1Ac9FsI&#xA;24Tx3Ef93drIPiiETftjr9nucBTHbdiv/OO3/OScPmUWvlHzhMIvMIAi07U3ICXtNljkP7M/h2f/&#xA;AFtmUc30ThQ89138hPyx1e+k1AaY+l387cp7nSp5rIyfCVIZIWWL4upPGpPfrgplxFPfJ/5beSPJ&#xA;wlPl3SYrKecUnuyWluJAaEq88peUrVQePKntjSCSWRTTQwQyTzyLFDEpeWVyFVVUVZmY7AAdThQ+&#xA;Lvz6/wCcim1zzfpp8lMtvD5anaWy15V/0iaUjjJ6ZPS3YbFCPj/aFNsDK6eteTv+cn081+V7ez0j&#xA;SWvPzJuGFrHoiq4tfU41N683RLVB8TgtzB+Hp8eNqA9J/L78vl8trdarqt0dX84auRJretyCjOw+&#xA;zBAv+64I+iIKdPkAgKSyTW9b0nQtJutX1e6jstNsozLc3MpoqqPxJJ2VRuTsN8LEB5romiat+Zuq&#xA;23mrzXavZ+T7NxN5Y8rTijTsPsahqKdCxG8UR2UfSWHNndMh/Nj81dB/Lry3JqV+wn1GZXXStMU/&#xA;vLiVVr0G6xp1kfsPcgEsQHw5rH5pfmn5083216NWvW1aa5UaVZWMksccMsjBY47aJG23oO7HuScC&#xA;QX6HaQmoppVkmpyLLqSwRLeyxgBGnCASMoAXYvWm2FBec/l3Ivmj8zfN/nhWL6dYhPLGhyBlKvHa&#xA;N6164415K1ww4NXcDAEnYUxP/nMbzmmk/l3b+XIZKXnmG5USIAD/AKLakSyEk7j976QFOu+KA+KM&#xA;KHYq7FX0V/zhT5ha089azoTuFh1SwE6qerT2cg4Af8855D9GKejyv869Vl1T82/Nt3LJ6pGp3Nuj&#xA;15VjtnNvHQ+ASIAe2KlhOKHYq7FX1z/zhR5ySfRtb8nzMBNZyjUrMb8mimCxTDwojoh/2eBPR7B+&#xA;dHlnUda8lPdaOCfMHl+4h1vReIqWubIl+FKHl6kZdAvckYlMTuyPyf5o07zV5Y03zDpxraalAsyK&#xA;TUox2eNv8qNwUb3GFBFPlP8A5yD/AOcfv0f56tdf02eLT/KvmO+ji1K6kB9LTbm4ejySAdIXJLKd&#xA;gDVTxHGo5JAt9Q+QPIXl/wAjeWbbQNEh4W8I5TzsB6s8xA5zSsOrNT6BQDYYUEpL598+6nb6nF5M&#xA;8mRR3/na/j5/HvbabbHY3l4RWgFfgTq5pt0BBKQOpTjyH5G0/wAo6S9tFNJf6neSG51jWbje4vLp&#xA;vtSyHegHRErRV28SUBBNoP8AMH8wk8tLa6VpdqdX84awTHomiRmjSMPtTTN/uuCPq7mnT5kJKgPO&#xA;vNv/ADjJB5q8p3dzrepte/mRdE3T68S4txKFotmkPRLRR8K0XkPtf5GNJJfGWvaDrPl3WrrR9Xtn&#xA;stUsZPTuIH2ZWG4II2IIoVYbEbjCjk+m/wAif+cqoFgtvLP5hXBQxgRWXmF6sGA2VLw7mvQCX/g+&#xA;7YF5vqKzvbO9tY7uynjubWZeUNxC6yRup7q6kqR8sKFHV9Z0nRtPl1HVryGwsIBWW5uHWONfmzEC&#xA;p7DFQHxt/wA5B/8AOSdx5vabyz5Slkt/K4JS8u6FJb4g+B+JIdtlNC37XhgTyeL+VPKmvea9etdC&#xA;0K1a71G7bjHGuwUD7Tu3RUUbsxwqA++fyZ/JnQfy10H0ION3rt2oOqaoRQuRv6UVd1iU9B36n2VJ&#xA;Zvret6ToWk3Wr6vdR2Wm2UZlubmU0VVH4kk7Ko3J2G+KAHm2iaJq35mata+a/NdrJZeULKQT+V/K&#xA;84o07D7GoagnQsRvFEdlH0lgzJplH5mfmZ5e/L/QP0nqriS6nYxaZpquqS3U+1FUtsiLUF5Dso9y&#xA;AUliBaT+RPy0nFzd+bPPTQ6z5v1mFobhGAls7KzkBH1G1RuS+nxYh2/b361JZpJPc86h/LHyv+TP&#xA;5pxeczZGfyZqQa1iu2q7aHdXDBQ8hPW3cEoJCaqDQ+LKRu9N/NjzdqFjo1loHlmQP5r82SfUdDZC&#xA;SIUZa3F8xSpEdvEefId6dsSiIZL5Q8saZ5T8rad5f0/az0yARB22Ltu0krbn4pHLO3ucKCbfBn5/&#xA;/mMvnv8AMi/1C1lMmj2VLHSfAwQk1kFQp/eyFn3FaEDtgUvN8KHYq7FXpP8AzjlrCaT+dPle4fdJ&#xA;7h7MrWlTdwvbp2PR5FOKQ8/1O7e81K7u5DWS4mklc+Jdix6fPELLmhsUOxV2Ksv/ACn8+T+RfPul&#xA;eYkq1vbyenfxLuXtZfgmUDbfieS/5QGApD9ILO7tb20gvLSVZ7W5jWa3mQ1V45FDIynuGBqMKHl3&#xA;l9v+Vd/mTceV5QIvKPnGaS/8uSfCkVrqRHK6sdgoVZf7yFelfhFTXAzO4elaxo+mazpd1pWqWyXe&#xA;nXsbQ3NtIKq6N1HiPYjcHcYWDxO+8xfmN+W/ofl3ZRDVTq86WXkPzHfyIsMELgg296SBzltVA9MA&#xA;fvBSg245Fnsd3qH5f+QtO8n6VJCkr3+sX7i41zWp97i9uiPikcmtFFSI06KPepJAYk2pfmB56/w3&#xA;bW9jplt+lfNmrMYdC0VWo00g+1LIf91wRD4pHNAAOuJKgW84uPJvnb8udRH5nTag/mnUZoeHnq0E&#xA;a1+qlg/PTNgyJa0H7smjqtTx6AMrB2e1aXqdhqum2up6dOtzYXsST2s6V4vHIAysK0O4PfJMHkf/&#xA;ADkd+SFr578vya1pMITzZpUTPblF3u4l+I2z0FS3X0v8rboagJHc+EiCCQRQjqMKE10Pzb5q0Fnb&#xA;Q9ZvtKMg4yGyuJbfkK1ofTZa7jFNqWs+YvMGuXH1nWtTutTuNh615PJO+woPikZj0GK2oaXpt9qm&#xA;pWum2ELXF9eypb2sCfaeSRgqKPmTigB+gn5K/k1on5beXlijVbjzBeIp1fUqVLPSvpREiqxIenj1&#xA;PspJZ5quq6fpOm3Wp6lOtrYWUTT3Vw/2UjQVZjTfp4YoeX+XtK1L80tStPN/me2e08mWji48qeWZ&#xA;xQ3BH2NSv06MWG8Mf2Qu+9asGd0zPz7590zyfpkU00Ul/q1/J9X0XRbfe5vbk9I4xvRRUF3Ioo96&#xA;AkliBaQeU/ywku5L3zH+Yawaz5p1mBre4tmXnZ2Fm9f9BtEaoCgH436sa79SRSTLuS7SdRvPyq1i&#xA;28t63PLc+QNQkWHy5rc55nTZnJC6feSHf0T/ALolb7P2TturyTzeoX9jZ6hZT2N7CtxZ3UbQ3EEg&#xA;qjxuOLKw8CDhYPE/Kvley/LD80o4NZaa80TWbddL8la1cSGRdPAkeVtKflXj6hesTn7QXj40jyZk&#xA;2Gv+crPzXXyr5PPlnTZuOveYY2RipHKGxNVlkO9QZd412/mPUYWI73w/hQ7FXYq7FWRflzfjT/zB&#xA;8sX5Xktpq1jMyVpUR3KMRXtWmKQx3FDsVdirsVdir6+/5xC/NxNQ0s/l9q03+n2CtLokjkVltvtS&#xA;QDoS0Rqy9fgr0CYE83u3nvyZp3nDy3c6Leu0DOVmsr6P+9tbqI8obiIgqQ0bb7EVFR3wlQaSX8sf&#xA;Omp6nHeeWPNASDzt5e4xarEuyXMR/ur6CoHKOYbmg+FtiBsMATIMi83eUtD82aDc6HrUHr2VyOo2&#xA;kikH2JYn34SId1b+GFANPIda/ObXPyl0a60Hz1BLrGrWsRPlfWowRHqsIPFfrDb+lPDUetWtRuK1&#xA;BYJIHN5X/wA4/fnXq2o/nRNP5mjjvrzzXSzjv+H7y0Kcnhhg68IGPwsnjRidjVW7fZRAIIIqDsQe&#xA;lMLF5t+RaC00fzNokB/3G6F5l1PT9Lj6iO2VkmWIE70R5mGAMpvScLF+cH51aVa6V+bHmqxtFCWy&#xA;ahM8cajiqiU+rxUDsvOgwBJYVhQ7FXsf/OJunW15+c+nPOgf6nbXVzEGAI9QRFFO/cepUe+BIfeO&#xA;FDzD837Y+YPMfkjyJcMV0bXr24vdZQcv31vpMS3Atmoy/BLK6cvkCMBZR73pyIiIqIoVFACqBQAD&#xA;oAMLF+eP5sfmJ5u1L83NT12W5nstR0e+kt9LjBZGtI7WVljjUGlDtV9t2Jr1wMiafYX5J/m+fPWi&#xA;wQaxaNpfmiO2S5ltJFMa3Vs5KreWofdomZaGn2TtXpiCpD0DWtF0rXNJutI1a2S8029jMVzbSCqu&#xA;jfKhBHUEbg7jfCxBee+S9Z1HyV5jg/LjzLcyXVpcKz+TNdnNTcwRirWM7dPrFuPsn9tKdDsQGR33&#xA;Zx5t8qaL5r8v3eg6zEZbG8XixU8ZEcGqSxtvxdGAZT44UA0/P787dJ876V+YV/ZecbqXUNSiWNLb&#xA;UZRQXNpGvCCVKbfEq/F/l8q/FXAEyYHhYuxV2KuxVFaX/wAdO0/4zR/8TGApjzQuFDsVdirsVdir&#xA;3f8A5x1/IzWfNlnf+b476XR5NPPHy1epQctRiKv6jghiYY/sttvy2+yRgLIbPq78uPPMvmbT7i01&#xA;W2/RvmzRZBaeYNJJ3inA+GWPryhmHxxsKgjuaVxBQQofmL5FvNYaz8xeXJksPO2iVbSr1to5o2NZ&#xA;LK6oKvBKK/6rfEO9UhIKO8gefLDzdpcsgiaw1rT5PquuaLMf39ndLUFH6ckahMbjZh7ggIKCKUPz&#xA;Y0DyPrXkXU4fOhSHQ4IzPJesQsls6iiSwsQaSVNFAryrxoa0JKh4v/zjT/zj7Noupr558wxukqhj&#xA;5dsZ1EcyRyAr9ZuYqsEkaNvhTkeNSTvTAk7PbPzG87nyvo8a2EIv/MuqyfU/L2kqfjuLphsSO0UQ&#xA;POVzQKvcEjEoAtV/Ljye3lLylZ6TPP8AW9SJe61a+6m4vblzLcSliAzVdqKW34gYhSbTzVNTsNK0&#xA;261PUZ1trCyiee6nevFI4wWZjSp2A7YUPzU8++Zz5p86a15i4GJdTvJbiKJjUpGzH00JoKlUoMUl&#xA;IMUOxVnH5Ked4fJX5l6Lr11tYRymC/O5429wpikeg3Pp8udPbAUh+jUM0U0STQuskUih45EIZWVh&#xA;UMpGxBGFDzz839P1OzbQPPelW7Xt55OuZbi6sk3ebTrqL0b4Rr3kWOjr8jgLKPczHT/NHl7UPLsX&#xA;mS1v4X0OWA3Q1AuFiESglmdjTjwoQwP2SCDuMKKeF6R+UPlX80fzKuPzIn0k2XlFips7aQFG1ieM&#xA;mt9JCQPTgfai9ZKcm6moZHb3vVvzD8g2uv6db3un3C6L5k0Os+g60g4/VmUbxyUpyt5FHGRDtx7Y&#xA;kIBQH5P/AJu6V+YOkSAmK38waefT1SxiYtGeJ4i4ti3xPBIR8J7dD4lBWUaT7z/5JsPOXlqfR7qR&#xA;racMtxpt/HtLa3kO8FxGRQhkbwO4qO+JQDSV/lX511LX9MvNK8wRi384eXJhY+YLdRxVpKViuYwK&#xA;D07hBzWm3Wm2ITIMN/5yj/KtPOHkeTWrCEHX/LyPcQsoHOa1A5Twk7V4qPUT3BA+1igdz4Uwodir&#xA;sVdiqK0oE6pZgbkzx0H+zGApjzb1a0ez1W9s5Nntp5YXGx3jcqenyxCy5oTCh2KuxVPfI3lHUvOH&#xA;mzTPLenD/SdRmEfqUJEcY+KSVqfsxoCx+WKQH6ReXtC0byt5cs9H09VttK0qARRlyq0SMVaSRgFH&#xA;JjVnbuanFebxe1sfO/nTXtS/N3yfMlm9iRYeWNNkXhHrOnWrP9Z+tkhW/wBIkP7hj9jiKgbOIs9h&#xA;s9b8i+eNJ84aIuo2IaC4iYwanps1VuLO6TaW3mQhWVkb2364QWBFMV/Nry8mkRTfmXod/DonmTQr&#xA;ctdXE5K2uoWi0JsrxV3fmaLEw+INSm9KJTE9Ev8ALGj+YPzQu9P83edrA6X5ateFz5e8oSN6nObj&#xA;X69fEqnqHf8AcoVAA3pueSkmuTNfPvn3TPJ+mRTTRSX+rX8n1fRdFt97m9uT0jjG9FFQXciij3oC&#xA;SWIFpb5G8h6haapP5w82XC6h5z1GIROU/wB5dPtieQsrNDWiKftOd3O56moAST0DNbm5t7W3lubm&#xA;VILaBGkmmkYIiIg5MzM1AqqBUk4WL4l/5yL/AOchZfPFy/lry3I0PlK2krLPuj38iHZ2BoVhU7oh&#xA;6/abegUJ5PHfLflnXvM2sQaPoVlJf6jcGkcEQqaDqzE0VVHdmNBhUB9C+XP+cI9fubQTeYfMdvpt&#xA;wwVha2kDXfGoqyvIz24DKdvhDD3wLskfnb/nDrz9olrNeaBeQeYreEcjbxqba7KhSzFYXLo1KfZW&#xA;QsewOK7PB7m2uLW4kt7mJ4LiFiksMilHRlNCrKaEEYUPqD/nF7/nIFYFtPIPmu4pDtFoOpysAE/l&#xA;tJWP7PaJj0+z040DLm+qby8tLG0mvLyZLe0t0aW4uJWCIiIKszMaAAAbnCxeEeS/y7svOetalqdo&#xA;l1pn5R3d2l9ZeWpCUh1O7jryuhCVVobN2oywk0cgNQCiiLYTXve9qsUUQVQscUa0VRRVVVHQdgAM&#xA;k1vJ7+8ufzb1V9H0uSSH8tbCUprWqxMYzq80ZobO1dd/qyt/fSA/H9ldt8HNnyTrz7+XU01vp2ue&#xA;SUh0vzb5biEejcR6VvPaJu2nTqpVTBJ+z/I24I3xIQD3pr+Wv5iaN598sxazpx9KZD6Go2LEGS2u&#xA;UHxxMR1HdW/aG/tiCgimI/mxE/kzzRpH5qWCUtrdk0rzhGi/3um3DhY7hgKVe3lIp3NQOgxLKO+z&#xA;1eOSOSNZI2DxuAyOpBBBFQQR1BwsH54/n35BXyR+Zuq6Zbxelpd0317SxQhRb3BLBFqTUROGjrX9&#xA;nAEl53hQ7FXYqyT8trFb/wDMTyvYuSqXOr2MTstKhXuUUkV7gHFITX88tKn0v83/ADdbTijyanPd&#xA;gf5F431lD9KTDFSwbFDsVdir60/5wu/L5ItP1Pz1eRD1rljp2lFgaiJKNcSLUU+N+KAg/ssMCej1&#xA;T85r++1RtF/LjSZzBf8Am+Z49RnjIDwaTbjnev1FDIv7ta7NVhiUx72cTTaD5U8tNI5TT9D0W19+&#xA;EVvbpQAdSaKtB3OFHN8Pr/zkZr9j+cGoee9JtIoLDUHWG60cAIlxaR0VPWZQf39By9Tchtvs/Dgp&#xA;NvpzQdF1j8ztTs/Nnm2zksPKVm63HljypPTlM4Hw3+oKNmbf91F0UfSWU3TNPO/nnT/KtjCWhfUN&#xA;av39DRdEtyPrN5cEbKgP2UXrJI3wou53oCksQLSbyH5B1K21Sbzl5ymj1DzrfJ6YMdTa6dbHdbOy&#xA;DdFFfjfqxr7koCSegZ1PPBbwSTzyLDBCpkllkIVERRVmZjsABuScLF8Y/wDOS354675nMOg6NDcW&#xA;Hkq4BlhvJEeI6qI3K+qpYCturp8C9z8Tb8QoZEU8c8i+RfMXnfzFb6DoNv613N8UkjVEUMQI5TTN&#xA;Q8UWv09BUkDCgB99/lP+UXln8t9CFjpievqU6qdT1VxSW4kH0nhGpPwoOnepqSqSznFDsVeQ/nr/&#xA;AM4/aL+YdlJqmnhLDzdBH+4vAAsdyFACxXNBU7Dir9V9xtgSC+F9a0XVtD1W50rVrWSy1Gzcx3Fv&#xA;KOLKw/WPAjY9sK8n1x+Svl38xfzG8naR/wArCuXbyXp7CSxsHBW41XgQYWvWJq9vFT4R/uw7tUAH&#xA;BTK6976MVYoogqhY4o1oqiiqqqOg7AAYWDyjUNQ1D82dQn0XRZ5LT8ubSQw63rcJKSarIho9nZuN&#xA;xbg7Syj7X2V2qSObPk9R07TrDTLC30/T7dLWytUWK3t4lCoiKKBVAwsHzn/zkp+cOvy+XtR0fyTF&#xA;NJotrL9Q8z+ZIFJhjkkFPqcUo2r2lYdKha74LZVTw/8A5x2/Ma/8mfmRpyiZho+szR2Gq29TwKyt&#xA;wjlIo3xQu3IECtKjucUB97a5o1jrei32j36F7LUbeS1uVFAfTmQo1CQaGh2OFALCfyH1W/n8iDRN&#xA;Ubnq3lS7uNAvm2ozWLcYmFOo9Bo9++AMpc3lf/ObPlSObQNB81RKoms7htOuWAPNo7hTLFXtxRom&#xA;/wCDxR0fIeFDsVdir0z/AJxt0hNV/OryzDID6dvNLeMR2NrBJMn/ACURRikMs/5zI8vDT/zTh1WN&#xA;W9PWtPhmkkPQzQFrdlHyjjj+/FS8HxQ7FWwKmg64q/Sz8sPLSeWfy98vaGIjDJZ2MIuYz1Fw6+pP&#xA;WvjK7HEJPNi/kl01v86vPeuO5kXQ4LHy/p56BEKG6u1pStfXK74EnkzLzz5RsPOHlLU/LV/I8Ntq&#xA;UXpNNF9tGVg6OK7Hi6g079MKAXjf5ff84feVvLfmCHWNb1VvMQtGElpYvbC2gEqmqtKPVmMoU7hd&#xA;h41G2BbesefvP1j5TsYFWB9S17UnNvoeh25Hr3c9Og/kjTrJIdlHvQFJUC0v8g+Qb7T76fzX5rnT&#xA;UvO+pIEublAfQsoK1WyslP2Ik/abq53OICSWa3Nzb2tvLc3MqQW0CNJNNIwRERByZmZqBVUCpJws&#xA;XjljqSfnfq1ykFyI/wAsNFuRFcWyPxuNYu46OvrqKPFZrUMqtQv1P+QObPkzj8xPyu8reevKx8v6&#xA;nbrDHCv+425hVVe0dV4o0QFAFAABToRt4ULEFgH/ADj/AKNon5fXN9+X2qWY0/zk7vdC/ZuUer2q&#xA;k+nNauQNoV2aHqu7b/FQBJG2z1/X9f0by/pFzrGs3cdjptovO4uZSeKjoAAKlmJ2VVFSdhvhYgPO&#xA;IfN/5zecEa78n6JY+XdAkT/RNR8x+sbu4BHwyxWkB/dr4epWo39sDOgFSXzf+bnk6IXfnPSLLX9A&#xA;jX/S9V8uiYXVsqj4pp7Ob+8Tu3pH4RU0xWgeT0TRNc0jXdKttW0i7jvtOu0ElvcwtyVlP6iOhB3B&#xA;2O+FgQwb83fyY0Pz9Da6gscEPmXS2WTT7yeP1IJQjc/qt4goZIHPXutSR3DAhkCmnkD8wrPXorvS&#xA;dRtBoPmfQwI9Y0GVlrCoHwzQsKLJbutCjrtT6KoKkMe1K51L81rqXStHuHsvy5t5TDq+sREpLq7I&#xA;SJLWycdLUEcZZh9vdU2qS808ve9M07TrDTLC30/T7dLWytUWK3t4lCoiKKBVAwsHi/5qfmpJqMz6&#xA;Hok11Z+ULa8j0/zp51s05pZiWoa3gcVo3RZZgCIuQ7kZElnGL1TSvKnlK38pQ+XdPsbd/LL2/ox2&#xA;igSQSwSCpJO/PnXkWJJYmtckxs28i07/AJxB8kad57tPMVpqNyNJs7hbuPQpEWRfUjbmieuTyMQY&#xA;D4WUsRsW74Ft7zhQ8y8jejYfnV+Y2nKPTF7FpOpwxKPhJaB4Z327s6LWvXAGR5Bd/wA5IaUNS/JX&#xA;zNF6YkkggjuoyVDFTbzpKzL4HgrCvhiUB+e2FDsVdir6O/5wm8vtc+c9d15kVodNsEtVJ6iW8lDK&#xA;V/2Fu4PzxT0eh/8AOZ/lV9R8gab5hhRnk0G84zEdFt70CNmP/PaOIfTiofF2KHYqi9JjWXVLON/s&#xA;vPGrfIuAcBTHm/UnCh5n+T8wh8yfmRpMsZjvYPMkt64YUrBfW8TQN40KxkjAGUnpmFiwzz9+ZFt5&#xA;aktdH0y1Ot+cdVqukaBAwDvT7U079IYEFSzt4GnQ0BKQFnkP8v59KuZfMnma5XWPO+oJS81Gh9K2&#xA;iJ5CzsUb+6gSvzc/E3gEBJLMrm5t7W3lubmVILaBGkmmkYIiIg5MzM1AqqBUk4WLx+zvf+V26hM0&#xA;M5i/KzSbr0ZIUbjNrN3DxekwFGitI6qwQ0Z9ie3EM+Sf+cfIOpafqcfnPyBHFaeY7SJIb3SBSGz1&#xA;W0iFFtpQtFSVF2hl/Z+yfh6NIB72R+SPPWi+b9Me70/1ILu1f0NU0u5UxXVncr9uGeNqFWB79D2w&#xA;goIpb578iaT5x0lLS7eS0v7SQXGk6tbnhc2dym6TQuKEUI3HQjEhQaeaeWI9U178xU0H82LiOXXN&#xA;BRJ/LGlxxmHTtQ9MfHqq1Yie4FN4iAIhUqvXiGR5bPZNS1fSdLhE+p3sFjAzcFluZUhQsd6BnKiu&#xA;FiAiIJ4Z4Y54JFlglUPFKhDKysKqysNiCOhxQ8z1fypq3kHVLvzX5HtWu9Gum9bzH5OhFBIf2rzT&#xA;x9lLhR9qIfDIPBuOBld82d+WfM2ieZ9Etta0W5W70+7XlHIuxBGzI6ndXU7Mp3BwoIpif5uflLZe&#xA;e9KaS0nOmeZraGSGx1SNnTnDICJLS5MZDPby1IYdVrUdwwITGVIj8rvOFnqmmP5en04aB5i8uJHa&#xA;ap5epRYAqhY5Lc7h7eRRWNgTt95QsgwLz7+cmi+YvPNt+Vuia+mkQXbtDr3mJGAK8Qa2NnIfgWaT&#xA;7BkJovQVbbEpAp7BpPlTy7pPl2Py3YWEMWiRwtbfUeIaNonBDhw1efPkeZapaprhY286trm//KG/&#xA;jsL+SS7/ACwu5BHp+oSFpJdElkai29wxqzWbMaRyH7H2W7Ejky5+96xDNFNEk0LrJFIoeORCGVlY&#xA;VDKRsQRhYLsVeaeTIo7z87PzC1IfEtlb6TpkTqQUJ9B7iZT/AJSl1HtgHNkeQZL+aChvyz82qTQH&#xA;RdRBPztZMJRHm/NHFDsVdir7m/5xD8q/of8AKhNUkRRc6/dS3fKhDiCI/V4kao6Vid19mxSXqfnb&#xA;yvaeavKOr+XbriItTtZLcOw5CORl/dyU8Y5Arj3GKh+Z2oWF5p1/c6fexNBeWcrwXMDijJLExR0Y&#xA;HoVYEHFCHxVVtJ2t7qGddmidXHzUg4lI5v1Jsb22vrK3vbV/UtrqJJoJB0ZJFDKfpBxQ8+81+WfN&#xA;+iec388+SbSPVJ9Qgis/MXl2WcWwu1gr6FzDM59NJolPD4hQr74GQI5FBP5x/OrzJF9S0LycvlUy&#xA;HhLrmuXMUogHEljFaQgvI38hPw16jwVoMm8hfltpXlP6zfPcTav5l1IKdX8wXh5XNwwp8I6iKJaf&#xA;DGuwAHWmICCbZReXlpY2k15eTJb2lujS3FxKwRERBVmZjQAADc4UPij/AJyH/wCcibjztPL5a8sy&#xA;vB5Rhb9/PQpJfupqGcGjLCpFUQ9ftNvQKE8mNf8AOPnm/wDMby/5yI8nWE+tQyxNLrGiR14TW0IL&#xA;M9eiSLWkb9eR4/Fy4lKh91eU/Nei+atCt9a0iUyWs4o8bjjLDKu0kMyVPCSM7Mv8MKkUxfz35E1Y&#xA;6snnfyQ8dp5ztIwlzbOeFtq1sn/HrddAHAH7qXqp2O1CoISD0KeeRPPek+cdJe7tEktL+0kNvq2k&#xA;3A4XNncps8MyGhFCNj0IwgoIp3nvyJpPnHSUtLt5LS/tJBcaTq1ueFzZ3KbpNC4oRQjcdCMSFBp8&#xA;O/8AOQOl/mdp/nmRPPl5JqUzL/uM1AKEtpbdTsYI1ASPr8aAVDda1qQEl61+Qelfnf5I8nf4oSyb&#xA;VPKl0RK3lV2b68bciv12yQjijHqIyf3i9vsNinyL6W8q+a9A81aJBrWhXa3mn3FQrrsyuPtRyKfi&#xA;R17qcLEimGeZ/K2u+UtUuvOfkK1+s/WG9XzN5VXZL8A1e6tANo7xV8NpfDl9oJBvYsx8p+bNC816&#xA;Fb63olwLiyuBTf4ZI5F+3FKnVJEOzKcKCKY1+a/5Xr5x01rvSb2TRfN9pBLDpmtWztE5jkUh7Wdk&#xA;ozQyV+aH4l7hgQkGn58+YNA1ny9rN1o+s2r2Wp2TmO4t5B8QbqCCNmVhurDYjcYUF9Of847f85M8&#xA;/qfk3zxcfHtDpeuyt16BILknv2WQn2bxwJ5vqK6tLW7tpbW7hS4tZ0Mc8Eqh43RhRldWBDAjqDhY&#xA;vLj5W88/lu0k3keM+YfJ4LSSeUbmUrdWgNWb9G3D8uSd/Rk/2O5wM7B5tz/85A6ZIz6dpvlbzFce&#xA;ZSp9DQ5tPeCXlT4fVdiY44/5nqaDG14WS/lX5S1Ly35YZdZkWbzDq91Pq2uyJT0/rt2QzqlNuMaq&#xA;qCm21cQiRtB/nvrH6J/J7zZdgA89PktKMCR/phFr2I/39thKA/OfFDsVTHy7od9r+vadolgAbzU7&#xA;mK0t+X2Q8zhAWPZRWpPhikP010LRrLRNE0/RrEEWWm20VpbBiC3pwII15EAVNF32xQjsVfEX/OXf&#xA;5fHy/wDmAnmO0i4aZ5lQzOVACrexUWdaD+cFZKnqzN4YpeEYodir78/5xk8+Q+avys06CSUNqegq&#xA;umXqHiGCwilu9B2aHiKnqwbAEl6xhQ7FUPqOo2GmWFxqGoXCWtlao0txcSsFREUVLMTir4h/5yC/&#xA;5yHvPPtw2g6A0lp5RgYFuXwS3simoeUdo1P2E/2Tb0ChLy3yb5N8wecfMFtoOg2xub65PySNB9qW&#xA;Vv2UXuf44VAffv5QflHoX5beXP0dYn6zqV1xfVdSYUaeVRsFH7MaVPBfv3OKkpP+Yum33kS8vPzL&#xA;8sNDHCqh/N2hTSLBb38QIUXETt8Ed4laKf8Adn2d22YFkDezOPJnnPy/5x8v2+u6FcevZz1V0YcZ&#xA;YZV+3DMm/CRK7j6RUEHCxIpjXnvyJqx1ZPO/kh47TznaRhLm2c8LbVrZP+PW66AOAP3UvVTsdqFQ&#xA;QkHoUd5f/NfynqnlO98xXk/6HTR+UfmCyvfgnsJ02eGZKcuXLZKD4+2+2NqYsY0ny7e/mjq1n5s8&#xA;36ebXynYMZfK3lm5UF5i2wv79DUVZf7uHoB1r+0pJp6rc3Nva28tzcypBbQI0k00jBEREHJmZmoF&#xA;VQKknCweBWEnm+784an+Y/5WaQE8qsqrf6ZO7WyeYZFY+tdWkDLSGRV+zM1ObdjVwYtnkXsnkzzn&#xA;onm/RI9W0mRuHIw3VrMOFxbXCbSW9xGd0kQ9R9IqCDkmBFMW8z+TNc0DW5vOnkGNPr07ep5i8tEi&#xA;O31VBWsiGlIbsfsydGP2u9QkHoWU+TPOmh+btGTU9JkbYmO7s5hwubWddnguIj8SOp7Hr1FRvhBQ&#xA;RTAvz9/IzT/zG0Y3tiq2/mzT4iNPuSeKzIKt9WmP8pJPFv2T7VwKHwfqml6jpWo3Gm6lbyWl/aSN&#xA;Fc20qlXR1NCCDhUh9Gf849f85Nto6WvlHzxcF9JWkWl61ISz242Cw3B7wj9l+qdD8P2QvN9dwTwX&#xA;EEc8EizQTKJIpYyGR0YVVlYbEEbgjChfirsVfOH/ADmj50gs/Kel+UoZP9M1W4F5corbrbW1Qodf&#xA;CSVgV/1DgSOT46wodir6O/5w0/L59R803vnW7iP1LREa109yCA15cJRyp6H0oGPIf5anFL7GxQ7F&#xA;WD/nR+XUXn/8vtR0FQo1FQLrSZW2CXkIJjqagASAtGxPQMTikPznuLee2uJbe4jaKeF2jmicFWR1&#xA;NGVgdwQRQ4oU8Vegfkv+bWp/lr5rXUola50i7Ah1fT1NPViBqrrXb1IyaqfmOhOKQ+9PJ3n7yh5y&#xA;05b/AMuanDfxFQ0kSNSaKu1JYjR0P+sPlipDvOHn/wAneTrFrzzHqsGnoF5RxO1ZpN6fuoVrI+/8&#xA;q4qA+K/z0/5yE1j8xbltL05X07ynBJyhtCaTXBX7MlzxJG3VUGy+53wLbzbyp5U17zXr1roWhWrX&#xA;eo3bcY412Cgfad26KijdmOFQH39+Tf5QaJ+W3ltLK3CXGs3Kq2ranxo0sg34JXdYkrRR9J3OKks1&#xA;1TVNP0rTrnUtRnS1sLONprm4kNFSNBVmOKHmPl/S9U/M/Wbbzf5kt5LTyXYyifyj5elHE3TL9jU7&#xA;1O9esEZ2A371cMzskP5x6zon5SeYLbz1od1HbalrVwsev+WKkR6pCPt3KooIiuIq19WgBJ3qSQyg&#xA;Hbd6JB+b/wCX03kYed11aMaCfgMhr6on/wCWYwir+t/kU9/s742jhYZ5e/LRvPPnE/mP510dNMjZ&#xA;YRo/lwgc3jhq0N1qgG0k9G+GM/YAANaY0yJrYPXdR1Gw0ywuNQ1C4S1srVGluLiVgqIiipZicLB5&#xA;bHb6n+b9wtxerLp/5X28oe1smDRXGuNGaiWetGjswwqiUq/2j2oObPl73qyJbWlsqIqW9rboAqgB&#xA;I440GwA2CqoGFg+QPzO/P/Q9B/N5dc/LyBZDAPq/mS6VyLTVeJA4+mPhJiAos43J8VHxBlfQvp38&#xA;uvzB0Hz55XtvMGjSfu5fgurZjWS3nABeGTputevcUI64UEJF558laxZ6s3nvyOFi80QRhdT0xjxt&#xA;9Xtox/cTAfZnUf3MvUfZPw9AQkHoWTeSvOWkeb9Ah1jTCyqzGG7tJQVntbmOglt50O6yRsaEfSNi&#xA;MIQRTzL/AJyK/Ia18+aS+u6LGsPm7T4yY+IAF7Eor6Eh/nAH7pv9idjVQofDE0MsEzwzI0c0TFJI&#xA;3BVlZTQqQehBwoenflN/zkL52/Lxo7KNxqvl0NV9IuWNEBarG3k3aJjv2K71Kk4pt9Q+Vf8AnK38&#xA;odbtkN7fy6FeHiHtr+J6ciPi4yxCSMqD3YqfbBa0jPM//OTv5QaJp8lxBrK6xdBaw2NgrSO7dgXI&#xA;WNB48m+g42tPif8AMbz7rHnvzbe+Y9VPGW4IW3tlNUggTaOFOmyjqe5qe+FSWM4oROmabfanqNrp&#xA;thC1xe3sqW9rAm7PLKwRFHzY4qH6Rflh5Es/IvkbS/LdvxaS0iDXs6j++upPjnkrRSQXJC13CgDt&#xA;ikspxQ7FXYq+O/8AnLv8o30rWh590iCmmaq4j1lEApDeH7M1BSizgbn+fqauMUvm/FDsVXJJJGeS&#xA;MUbxUkH8MUgueSR25OxZvFjU/jiglX03Tb7U9RttOsIWuL68lSC2gQVZ5JGCoo+ZOKgP0E/JP8mt&#xA;H/Lby6sICXPmG8RW1fUgN2br6MRO4iQ9P5j8R8ApJej4oeRwt/ytvzXc+qFk/LXyzdeikFapq+pw&#xA;7s0lPtWtuTsv2Xbc1GwHNny971wAAAAUA2AHSmFg+GPz58jfmnr/AOdGrRnR77UDdSqmjyQwu0Bt&#xA;FUekEkA9NQq/b32apbvgZEPbvyI/5xos/Jy2+v8Amopf+ZFImtrMHna2T02YDpJOv8/Rf2f5sVvo&#xA;9g82+cPLvlLRpdY168W0s4/hSvxSSyH7MUMY+KR27Kv6sKALYDp3ljzJ+ZOoQa555tX0zyjbsJtG&#xA;8mSH452BrHdapQ/Ee6wfZH7XfkGV1yen39/p+mWE19fTx2ljaRmSe4lYJHHGoqSzGgAGFg8okOv/&#xA;AJxSvHGbjRPysXZpaGG+1zofgrRoLP3+04+Z4jmz5PJfzV/5w91iC+fUPy7K3ljM1W0a4lWOaEmp&#xA;/dTSlUeMf5bBh/ldcWOzMf8AnFP8p/zC8lT6zqHmSL9G2WpQxJDpjSI8jyIxYTOsZYJxVmWhNd+m&#xA;K9H0RhQ8o86wD8u/Ott+YGnp6fl3XJodO87WyhuCNK3C11MKoIDRu3CU/tBhtyJOBmNxT1fCwfIP&#xA;/OYX5Vw6Zqdv590uJY7XVJBbaxGgCgXfEmOYAf79VDz2+0KndsCej5pwodirsVdirsVfU3/OHv5S&#xA;GSV/zF1eH93Hzt/L0b13fdJ7qmwou8Sdd+e2ynFL6uxQ7FXYq7FUBr+g6V5g0W80XVrdbrTr+Job&#xA;mB+hVu4PZlO6sNwaEb4q/O782vyx1f8ALvzfcaJegy2b1m0u+p8NxbFiEbbo6/Zdex9qEqSwvFDs&#xA;Vdir2b/nErR7XUfzksprj0z+jbS5vIo5KHlIFES8QQasvq8x4Ur2wJD7uwoSjzk+pp5Q1x9K5/pN&#xA;dPujYenXn64hYxcab8udKYlI5sb/ACKj0mP8oPKi6U/qWp0+NpG3P+ksS10DUDcXBkBwBZc2d4UL&#xA;ZZY4o3lldY4o1LO7EBVUCpJJ2AAxV5trH5yJqF/NoX5c6efNuup8M13E3HSbRiCeVzefYNKV4Rkl&#xA;ulQcFsuHvRflf8rHTWY/Nfna+HmTzcgBtpGThY2HfhY252Sn+/G+M9djXGlMu5PvOnn7y35Psop9&#xA;XmZrm6b0tP0y2X1r27lJAEdvAvxOxJA8BXcjDaALYXH+X+v/AJjMmpfmZG1noW76b5Ht5mVEDCiz&#xA;ahPEUaWfuqKQqfMsMDK65OTR/wA1Py7iCeX3PnnylAoEej3kiw6vaxIrfDb3JHC4VeyuOXRVxWwU&#xA;88tfnZ+Xmu3Tae2oHR9ajbhPo2sL9Qu0flx4cJSFdq9kZsbQYlnWFi7FXlf/ADkFrmmXHku88k2r&#xA;pe+avMno2mlaPGwacu8qt6zqDWOOMIWLtRdsBZRD0zTbee3061t7iUz3EMMcc0xJJd1UBmJO/wAR&#xA;Fd8LEsU/OfQLbXvyr80adcA0/R81xERSoltV+sRdf+LIhX2wFMeb83sKHYq7FXYq9E/JD8pL/wDM&#xA;jzfHYUkh0KyKza1fIPsQk7RIxBX1ZaFU8N2oQpxSH6Eadp1jpun22nWEK21lZxJBbW8YoqRxqFRV&#xA;HgAMUIjFXYq7FXYq7FWFfm3+VuifmN5Ul0e/pDexVl0rUAAXt7ilAfeNuki9x7gEKQX58ebfKeue&#xA;U/MF5oGt25t9Qsn4Ou5V1/ZkjYgckcbqfDFSEnxQ7FWX/lP59l8iefdL8yBDLb2zmO9gXq9tMpSU&#xA;LuPiCtyWv7QGKQ/RbQde0fX9ItdY0e6jvdOvEElvcREMpB6g+DKdmU7g7HfFCPxV5xe/lHqGnapd&#xA;6n5B8y3HlSTUJGmv9N9CK+02SVqFpEtZSvouxHxMjfRgplxd6BHlv/nI2Wb0pfOOiW1sSv8ApMGm&#xA;tJMBUciI5DwqO1W39sd1sKq/kf8ApiT1fP8A5p1Pzcgfn+jWYafppIUhSbS1K1Za9efzGNLxdzPo&#xA;Lby55Z0YpBHaaLo1mpZgojtbaJa7sacEXfqcKObwH81f+cwNE0tZtL8hxLquobo2rzBhaRnxiQ8X&#xA;mI33NFr/ADDAtU+VNa84+adb18+YNU1S4udZ5iRL0yESRsp5L6RWnphT9kJQDthpbfQH5T/85g6h&#xA;p6Q6T5/ifULVAEj1q3UfWVAFB68fwiX3YUbx5HAuxfUvlrzZ5a8z6cuo+X9Sg1KzalZIHDFSRULI&#xA;v2kb/JYA4VIU/M3kryl5otvq3mHSLXU4wpVDcRKzoDufTk+2nT9kjFQWFx/84/eVLF5P8O615g8t&#xA;W8nEtaaVqk0cNVBH2ZfW8a9cFJ41V/ySimBS888ebruBgUkt5NV4I6EUKv6MURII6740vEyPyh+W&#xA;vkbyh6j+X9Ihs7iaomvDymuXBpUNPMZJSKivHlTGkGRLJsKHnH/OQHnzS/KH5Zau9zKv1/VbebT9&#xA;Mtq/HJLcRmMsB/LErc2PTt1IwFI7355YUOxV2Ksh8h+RPMPnjzLbeXtCh9S7uKtJK9RFBCv25pmA&#xA;PFF+8mgFWIGKQH6F/lt+XmheQPKtt5f0dSyR/vLu6YASXFwwAeV6dzQADsAB2xUllGKHYq7FXYq7&#xA;FXYq7FXnP50fkvoX5laF6UvG01+0UnS9UA3Q9fSlpu0THqP2eo7gqQXwV5u8oeYfKOu3Gh6/aNZ6&#xA;hb0LI1Cro32ZI3HwujdiP14opJsVdirMPy8/Nnzx5AvWn8u35jt5WDXOnzD1LWah/bjPQ7U5LRqd&#xA;8U2+jvKn/ObHlyeFY/NOhXNlcBQGuNPZLiJn7n05DE6D25NgXZ6Daf8AOUP5H3ECyt5i9BmFTDLa&#xA;XYdfY8YmX7jja0pal/zlR+SVlbmWLW5L6TtBbWlzzPXvLHEn/DY2tPNvN3/ObdoqtF5Q0B5X24Xm&#xA;qsEUfzD6vAzE+x9UfLFdnzz55/NHz154uRN5k1WW7jQ1hs1pHbRnpVIU4oD/AJVKnucNLbFMUOxV&#xA;2KphofmHXdBv11DRNQuNNvUqFuLWRonodiKqRUHuMUgvbvKH/OZH5i6UI4NftLXzBbKfjlYfVbor&#xA;SlPUiBi++InAth6no3/Oaf5dXMC/pXStS0+5JPJIliuYgO37znEx/wCAxWgymy/5yp/JC4h9STXZ&#xA;LRqkelNZ3Zag7/u4pFp9OFaSi8/5zE/KCBaxDU7s/wAsNqoP/JWSLAtPO/N3/ObOpzxSQeU9Ajs2&#xA;PJVvtQk9ZwCKKywR8FVh1+J2Htiuz5581+cfM3mzVn1bzFqEuo3z1AklPwopJPCNFokaVP2VAGFS&#xA;UmxQ7FWQ+RPIfmXzx5hh0Ly9bfWLuT45ZGPGGCIEBppn/ZRa/MnYAsQMUgPvz8pvym8u/lv5dXTN&#xA;MX17+fi+qao6gS3MoH08Y1qeCV292JJVJZvih2KuxV2KuxV2KuxV2KuxVhn5o/lT5W/MbQv0brUR&#xA;S6h5Np2pxAevbSNSpU/tI1BzQ7N7EAhSC+FvzS/J/wA3/lzqxtdYgM2nStSw1eEE2043IHL9iSg+&#xA;KNtx2qtGKtMHxQ7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXof5S/kj5u/MjUQLCM2W&#xA;hxPwvtbmQmFKULJGNvVl4n7APhyKg1xTT7p/Lz8tvKvkDQl0fy/bemjENdXclGuLiQCnOVwBU+AA&#xA;AHYDFSWUYodirsVdirsVdirsVdirsVdirsVQWtaJpGuaZPper2cV/p10vCe1nUOjDqNj3B3BG4O4&#xA;xV8ofm3/AM4galYNcav+XzNfWPxSPoUzf6TEOtLeRtplG9Fb4/dycUvm28s7yyupbS8gktruBjHP&#xA;bzI0ciOpoVdGAZSPA4oUcVdirsVdirsVdirsVdirsVdirsVdirsVdiqJ03TNR1O+hsNNtZb29uG4&#xA;QWtujSyux7KiAscVp9O/lJ/zh7LIYdX/ADFf04/tx+Xrd/jO+31qdD8IoPsRGu4+Mbril9Tadp2n&#xA;6bYw2GnW0VnZWyiO3toEWONFHRVRQABihEYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWHfmB+Uf&#xA;kHz7blPMOmJJdheMOpw/uruPY04zKKsFrUK/JfbFNvmD8wf+cOvOujtLd+UrlPMGnirLauVgvUXc&#xA;0oxEUtB3VgSeiYq8I1fRdY0a+ew1exn0++ip6lrdRPDItdxVHCnfFFILFXYq7FXYq7FXYq7FXYq7&#xA;FXYqmOh+Xde1++FhomnXOp3hHL6vaRPM4XuxCA0UdydsU099/L7/AJw0806i8V351vU0SyqC+n2r&#xA;JcXjAHdS45QRVHRqv7rir6d8iflh5G8i2f1fy3pcVpIyhZ71h6l1N0r6k71cgla8QQoPQDFbZTih&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kpbr3lry95gs/qWu6ba6paAkrDdwpMqsRTk&#xA;vMHi1D1G+K28d81f84eflbqqySaM955fuSoEYglNxbhq7s0VxzkO3ZZVxTbynzD/AM4U+erRnfQt&#xA;ZsNUhUVVZxJZzsfAJSeP75Biuzz7WP8AnHL86dJTnceV7idDXibN4bsmlP2Ld5HHXuuK0xi//Ln8&#xA;wdPCm/8ALGrWitXg01jcxg060LIK0xWkn/Rep/8ALJN/yLf+mC14S4aVqhNBZzknoPTf+mNrwlOr&#xA;H8tvzEv1L2PlfV7lFPFnisbl1BpWhKoQDhWmUaR/zjb+dWqoJIfLM1vHWha8lgtSP9hNIkn3LitP&#xA;QvL/APzhN5zuWRte12w02FlqVtUlvJQf5SrC3T6Q5xXZ6x5V/wCcQ/yo0fhJqiXWv3IUcvrcpigD&#xA;gg8kit/SNP8AJd2GK29g0bQtE0SyFjo2n22m2QJYW1pEkEfIgAtxjCipoN8UI7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:3241B8C3511C11DEB2E48DCF26B9F297</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:3241B8C4511C11DEB2E48DCF26B9F297</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:FEDEC54C511111DEB2E48DCF26B9F297</stRef:instanceID>
            <stRef:documentID>uuid:FEDEC547511111DEB2E48DCF26B9F297</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <photoshop:ColorMode>4</photoshop:ColorMode>
         <photoshop:ICCProfile>Euroscale Coated v2</photoshop:ICCProfile>
         <photoshop:History/>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -506.975 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 506.975 li507.974 506.975 li507.974 0 licpclp[1 0 0 1 0 0 ] concat506.974 253.486 mo506.974 393.484 393.484 506.975 253.487 506.975 cv113.49 506.975 0 393.484 0 253.486 cv0 113.49 113.49 0 253.487 0 cv393.484 0 506.974 113.49 506.974 253.486 cvcpfalse sop/0 [/DeviceCMYK] /CSA add_res1 1 1 1 cmykf436.636 139.126 mo441.816 149.637 444.696 163.156 443.466 178.236 cv442.306 192.497 437.686 203.446 432.536 213.937 cv427.396 224.406 421.496 234.066 415.286 243.307 cv411.416 238.356 407.646 233.296 403.496 228.626 cv409.836 218.736 416.786 208.606 420.916 196.167 cv425.156 183.426 425.086 163.926 415.116 157.566 cv412.956 156.196 408.966 155.276 405.036 156.037 cv397.926 157.406 391.726 162.156 386.766 166.457 cv381.436 171.066 376.666 175.867 371.906 180.287 cv357.356 193.796 342.906 208.597 328.516 222.986 cv321.516 229.986 312.726 236.586 310.416 247.917 cv307.626 261.637 317.606 269.627 323.736 276.616 cv318.486 282.127 312.936 287.337 307.686 292.837 cv301.276 285.807 293.906 279.097 287.876 271.146 cv282.086 263.526 277.036 252.477 281.726 240.066 cv285.286 230.617 293.746 223.946 300.336 217.347 cv328.186 189.506 355.146 162.457 383.346 134.856 cv390.096 128.247 398.206 120.167 409.816 119.316 cv424.246 118.256 432.146 130.026 436.636 139.126 cvcp0 0 0 0 cmykf434.076 282.427 mo439.916 297.396 444.866 318.127 442.436 339.467 cv441.356 349.017 438.786 357.736 434.926 365.257 cv431.166 372.566 425.216 378.706 415.116 378.746 cv406.256 378.786 398.216 374.847 392.056 371.236 cv385.316 367.286 379.836 362.826 374.636 358.087 cv363.776 348.177 353.626 338.387 343.206 328.536 cv348.086 323.106 353.426 318.146 358.576 312.996 cv367.686 322.666 377.096 333.666 388.986 341.687 cv393.816 344.946 401.206 349.837 409.136 346.977 cv415.046 344.856 417.296 338.837 419.046 332.297 cv424.956 310.177 415.436 287.956 407.426 273.887 cv395.426 252.797 379.206 235.896 363.366 219.736 cv368.166 214.977 373.186 209.526 377.876 205.227 cv399.646 227.597 421.566 250.396 434.076 282.427 cvcpf418.356 317.946 mo418.446 327.517 415.676 340.937 408.626 344.246 cv402.626 347.066 395.016 342.406 390.856 339.637 cv378.996 331.727 370.116 321.116 360.626 311.116 cv364.816 306.366 369.536 302.146 373.786 297.446 cv377.566 300.646 381.956 307.156 387.616 308.557 cv393.186 309.927 395.736 305.437 395.126 299.496 cv394.456 292.956 388.726 286.616 384.886 281.906 cv372.476 266.736 357.496 251.696 345.086 238.187 cv350.446 232.736 355.816 227.276 361.316 221.957 cv361.456 221.997 361.486 222.137 361.656 222.126 cv380.046 240.296 399.256 261.146 410.846 287.377 cv414.726 296.166 418.246 306.257 418.356 317.946 cvcpf415.116 161.156 mo423.046 168.406 421.656 186.256 417.676 197.026 cv413.306 208.836 406.906 217.887 401.796 226.227 cv397.346 221.736 393.156 216.986 388.986 212.227 cv391.616 208.426 396.086 204.497 397.526 199.586 cv399.286 193.557 393.696 190.336 387.786 192.586 cv382.596 194.557 378.236 200.597 374.296 204.537 cv363.876 214.957 353.156 226.196 342.696 236.646 cv339.816 239.526 336.366 242.387 335.356 246.387 cv333.736 252.767 337.826 257.377 340.476 259.877 cv335.656 264.847 330.756 269.736 325.786 274.566 cv321.326 269.057 312.376 262.666 312.466 252.356 cv312.526 245.736 316.446 240.336 319.816 236.137 cv323.506 231.537 327.506 227.756 331.256 224.006 cv347.086 208.176 362.486 192.707 378.906 177.387 cv382.796 173.756 386.896 169.906 391.376 166.287 cv395.486 162.957 401.306 158.946 406.916 158.426 cv410.356 158.106 413.306 159.506 415.116 161.156 cvcpf364.216 67.7363 mo373.776 72.4663 385.056 80.3667 384.196 94.5464 cv383.716 102.597 379.546 109.137 375.146 114.017 cv361.726 128.917 346.656 143.406 333.306 157.227 cv328.046 152.566 323.476 147.396 318.276 142.196 cv317.696 141.617 316.066 140.367 316.056 140.146 cv316.036 139.716 318.136 138.077 318.446 137.756 cv323.846 132.137 329.506 126.236 334.496 120.676 cv337.416 117.437 340.496 113.776 342.866 110.086 cv346.176 104.937 350.116 96.4766 346.116 89.7666 cv339.266 78.2666 316.806 79.6963 303.756 84.8164 cv293.096 88.9966 282.916 95.4365 274.376 101.546 cv258.336 113.046 245.476 125.836 230.996 139.126 cv230.206 139.856 229.206 140.917 228.096 142.026 cv227.176 142.946 225.666 144.917 225.366 144.937 cv224.796 144.957 222.056 141.776 221.606 141.347 cv218.276 138.207 215.616 135.756 212.036 132.466 cv211.666 132.126 210.176 131.117 210.166 130.756 cv210.126 129.867 215.356 125.727 216.136 124.946 cv229.686 111.676 245.716 99.3765 261.396 88.5664 cv270.786 82.0967 280.296 76.5063 290.776 71.3164 cv301.466 66.0366 313.146 61.4966 327.496 60.7363 cv341.776 59.9766 354.356 62.8564 364.216 67.7363 cvcpf378.736 402.656 mo381.286 410.967 380.686 419.066 376.346 425.036 cv372.446 430.387 365.946 433.496 358.926 435.967 cv351.636 438.526 344.216 439.816 335.186 440.406 cv316.356 441.627 300.586 437.646 286.846 432.547 cv272.976 427.396 261.306 420.396 250.296 412.736 cv255.916 408.276 261.936 404.227 267.376 399.587 cv278.456 406.307 290.196 413.477 305.126 416.666 cv312.666 418.276 321.936 418.946 330.056 417.517 cv338.446 416.047 347.706 413.066 349.356 405.227 cv350.806 398.356 346.806 391.146 343.726 386.606 cv333.816 372.017 319.706 361.307 307.516 349.377 cv299.676 341.706 290.626 333.166 282.576 325.286 cv278.656 321.446 274.566 317.316 269.766 313.677 cv264.956 310.026 259.486 306.826 251.496 307.526 cv245.636 308.036 240.716 311.356 236.806 314.356 cv232.636 317.566 229.336 321.576 225.876 324.776 cv220.136 319.297 214.706 313.517 208.966 308.036 cv214.526 302.406 220.286 296.026 226.556 290.276 cv233.026 284.356 238.996 278.127 249.616 277.297 cv258.526 276.606 265.596 280.337 271.136 284.127 cv276.956 288.106 281.516 292.937 286.166 297.276 cv306.196 315.967 324.326 333.797 342.696 353.816 cv351.606 363.526 361.796 372.996 369.346 383.706 cv373.246 389.236 376.546 395.536 378.736 402.656 cvcpf369.346 268.416 mo373.976 273.347 378.316 278.576 382.666 283.786 cv367.296 300.977 350.436 317.036 333.816 333.656 cv333.216 334.267 330.716 336.896 330.566 336.906 cv330.036 336.906 327.116 333.616 326.816 333.316 cv323.416 329.916 321.316 327.477 317.766 323.927 cv317.246 323.416 315.896 322.547 315.886 322.217 cv315.886 321.967 318.396 319.526 319.126 318.797 cv331.256 306.677 343.706 294.396 355.846 282.246 cv360.466 277.637 365.176 272.246 369.346 268.416 cvcpf353.286 250.997 mo358.016 255.946 362.656 260.986 367.296 266.026 cv352.046 282.967 333.896 300.097 317.246 316.746 cv316.476 317.526 314.376 320.146 314.006 320.166 cv313.396 320.196 310.706 316.856 310.246 316.406 cv306.276 312.597 302.866 309.307 298.976 305.646 cv316.886 287.236 335.186 269.217 353.286 250.997 cvcpf345.086 95.0566 mo345.806 100.896 342.236 106.057 339.626 109.917 cv337.106 113.646 334.466 116.316 331.426 119.656 cv327.396 124.077 322.956 128.716 318.446 133.486 cv317.426 134.577 314.806 138.077 314.176 138.097 cv313.616 138.126 311.916 135.847 311.276 135.196 cv308.276 132.207 305.436 129.466 302.566 126.656 cv305.236 123.566 310.856 120.026 311.616 114.537 cv312.486 108.207 307.976 105.146 302.566 107.526 cv296.996 109.977 291.376 115.387 286.506 119.656 cv271.886 132.477 256.026 147.747 243.296 160.986 cv237.716 156.606 232.816 151.546 227.416 146.986 cv240.486 133.957 253.516 121.236 268.576 109.236 cv275.646 103.597 283.596 98.1465 292.316 93.5264 cv301.206 88.8066 310.666 84.1367 322.376 83.4463 cv332.816 82.8364 344.016 86.3564 345.086 95.0566 cvcpf339.966 386.267 mo343.956 391.687 350.456 401.967 344.406 408.637 cv340.806 412.606 332.816 414.696 326.306 415.467 cv318.406 416.406 310.656 415.087 304.096 413.416 cv290.576 409.977 280.266 404.246 269.766 397.877 cv275.156 393.246 280.536 388.606 285.996 384.047 cv290.696 387.406 299.366 396.166 307.686 391.727 cv309.396 390.816 310.896 389.446 310.416 385.927 cv310.066 383.356 307.536 379.906 305.466 377.557 cv303.266 375.057 300.896 372.837 298.806 370.896 cv287.236 360.146 276.136 349.307 264.136 339.127 cv260.446 335.996 257.036 331.807 249.956 332.637 cv245.436 333.166 242.396 336.837 239.876 338.616 cv235.946 334.576 231.596 330.956 227.926 326.656 cv234.486 320.127 241.556 312.026 251.836 310.257 cv259.696 308.906 266.356 314.187 270.796 318.116 cv283.166 329.066 293.876 340.106 305.976 351.597 cv317.526 362.557 330.086 372.847 339.966 386.267 cvcpf342.526 170.896 mo337.726 175.716 333.086 180.696 328.006 185.236 cv312.466 169.497 295.036 152.787 278.816 136.566 cv278.076 135.816 275.586 133.537 275.576 133.316 cv275.546 132.707 278.516 130.327 279.166 129.736 cv283.096 126.106 287.656 122.137 291.116 119.486 cv308.696 136.176 325.556 153.586 342.526 170.896 cvcpf326.126 187.117 mo321.676 191.946 316.906 196.687 311.956 201.637 cv311.626 201.966 309.976 203.687 309.906 203.687 cv309.566 203.687 307.276 201.227 306.486 200.437 cv290.336 184.287 273.336 166.617 256.956 151.426 cv262.106 145.646 267.866 140.466 273.526 135.196 cv291.056 152.506 308.496 169.906 326.126 187.117 cvcpf296.416 194.296 mo288.786 201.387 282.846 208.167 275.236 215.126 cv268.016 221.736 257.456 227.256 244.666 223.327 cv234.366 220.167 227.406 212.537 220.236 205.906 cv198.426 185.756 177.826 164.497 157.556 142.887 cv151.016 135.906 143.996 128.867 137.916 120.676 cv132.236 113.037 125.766 103.236 124.936 91.8164 cv123.926 77.9063 132.486 71.8965 142.016 67.7363 cv150.816 63.8867 161.116 62.1064 172.416 61.5864 cv190.206 60.7563 206.846 64.9263 219.556 69.7866 cv233.276 75.0264 244.736 81.6665 255.256 89.0864 cv249.496 93.5264 243.686 97.8965 237.826 102.236 cv227.176 95.3765 215.376 88.6367 200.086 85.3267 cv185.216 82.1064 163.436 83.1865 157.216 93.6963 cv156.136 95.5166 155.256 99.4966 156.016 103.256 cv157.436 110.256 162.186 116.747 166.436 121.876 cv170.956 127.316 175.816 132.367 180.616 136.736 cv195.666 150.446 210.096 164.767 225.196 179.267 cv230.136 184.017 235.296 189.227 241.246 192.247 cv257.816 200.646 271.566 185.396 279.336 177.216 cv285.236 182.696 290.936 188.387 296.416 194.296 cvcpf279.846 357.396 mo285.196 361.727 289.936 366.666 295.046 371.236 cv271.506 393.837 246.536 414.866 215.626 430.156 cv208.316 433.776 199.786 437.547 190.346 439.547 cv180.566 441.627 169.506 441.956 159.096 440.066 cv150.026 438.406 141.296 435.206 134.156 430.326 cv127.606 425.847 121.026 418.916 121.006 408.977 cv120.996 400.837 125.186 393.446 129.376 388.656 cv133.956 383.416 138.976 378.797 143.386 374.137 cv153.056 363.896 162.476 354.477 172.076 344.757 cv177.086 349.517 181.886 354.566 187.106 359.786 cv187.676 360.356 189.316 361.606 189.326 361.837 cv189.326 362.437 185.246 366.087 184.716 366.627 cv180.056 371.286 175.576 376.217 171.396 380.967 cv166.406 386.627 158.306 394.276 157.556 404.026 cv156.176 421.996 180.726 423.616 195.986 419.057 cv207.726 415.557 218.746 409.007 228.096 402.656 cv247.506 389.477 262.986 373.026 279.846 357.396 cvcpf277.456 175.167 mo273.616 178.896 270.826 182.426 266.356 185.756 cv262.266 188.796 256.026 192.836 249.276 191.896 cv243.386 191.086 238.676 187.396 234.586 183.876 cv222.736 173.656 210.756 161.486 199.576 150.736 cv191.116 142.606 184.186 136.387 176.346 128.537 cv172.726 124.917 169.106 120.966 165.756 116.406 cv162.666 112.216 158.836 106.526 158.416 101.037 cv157.806 93.1465 164.546 90.3867 170.196 88.5664 cv174.166 87.2964 178.896 86.3867 183.176 86.1763 cv194.556 85.6465 204.356 88.7266 212.556 91.9863 cv221.016 95.3564 228.546 99.5864 235.606 104.117 cv230.296 108.767 224.786 113.216 219.556 117.946 cv214.486 114.807 206.166 105.847 197.696 110.267 cv195.866 111.216 194.246 112.867 194.956 116.406 cv196.106 122.106 202.486 127.267 206.576 131.097 cv215.736 139.687 224.776 148.106 233.726 156.376 cv238.206 160.506 242.976 165.267 248.076 168.156 cv249.006 168.687 250.696 169.387 251.326 169.526 cv258.106 171.006 262.216 165.887 265.156 163.376 cv269.576 166.986 273.296 171.296 277.456 175.167 cvcpf262.256 341.347 mo267.736 345.767 272.706 350.706 277.966 355.347 cv262.666 369.696 248.176 384.656 229.976 397.877 cv221.646 403.927 211.746 409.946 201.106 414.276 cv190.226 418.696 171.816 421.536 163.366 413.076 cv157.636 407.347 161.416 398.307 165.246 392.587 cv167.796 388.776 170.666 385.896 173.616 382.677 cv178.466 377.377 183.586 371.727 188.986 366.106 cv189.496 365.576 191.186 363.887 191.206 363.887 cv191.756 363.866 193.456 366.146 194.106 366.797 cv197.106 369.786 200.086 372.387 202.646 375.507 cv199.416 378.887 194.866 381.816 193.766 387.116 cv192.516 393.156 196.846 396.887 202.476 394.637 cv207.786 392.507 214.316 386.437 218.706 382.677 cv223.906 378.217 228.506 373.967 233.386 369.356 cv244.096 359.236 253.716 349.286 262.256 341.347 cvcpf248.416 350.566 mo243.316 356.446 237.296 361.427 231.856 366.967 cv217.176 352.326 200.986 336.446 185.736 321.187 cv184.856 320.307 183.836 319.187 182.496 317.946 cv181.606 317.127 179.096 315.316 179.076 314.877 cv179.076 314.396 182.576 311.196 183.006 310.776 cv187.186 306.597 191.676 302.217 195.476 298.477 cv213.146 315.816 230.286 333.687 248.416 350.566 cvcpf225.706 246.216 mo227.496 255.656 224.146 264.387 218.876 270.467 cv213.806 276.307 208.126 281.477 202.986 286.866 cv192.646 297.696 181.576 308.437 170.706 319.316 cv154.106 335.916 138.356 351.137 121.516 367.307 cv115.886 372.717 110.616 378.007 102.566 380.627 cv92.686 383.847 84.0459 380.446 78.4761 374.986 cv67.8359 364.557 61.5259 347.526 62.2559 326.486 cv62.5859 316.837 64.856 307.496 67.8862 299.847 cv74.0659 284.267 82.0459 270.937 90.7759 257.996 cv94.606 262.996 98.4258 267.996 102.566 272.687 cv96.356 282.116 89.5762 292.076 85.3159 304.967 cv80.936 318.187 80.356 339.267 92.4858 344.587 cv94.3359 345.406 97.6958 345.727 100.346 345.446 cv107.116 344.727 114.296 339.257 118.956 335.196 cv134.266 321.837 148.506 306.736 163.026 293.007 cv167.846 288.456 172.436 283.427 177.366 278.496 cv182.416 273.446 187.366 268.946 191.036 263.467 cv194.806 257.816 197.986 249.917 194.616 241.256 cv192.506 235.836 188.226 230.966 184.206 226.577 cv183.846 226.187 182.336 225.077 182.326 224.867 cv182.296 224.126 185.316 221.867 186.246 220.937 cv190.396 216.796 194.596 212.296 198.376 208.637 cv204.096 214.196 208.946 219.716 214.086 225.376 cv219.306 231.117 223.976 237.106 225.706 246.216 cvcpf229.636 369.017 mo224.616 373.566 219.676 378.187 214.436 382.507 cv209.646 378.696 205.576 374.166 201.276 369.866 cv188.476 357.066 175.276 344.337 162.856 330.927 cv167.706 326.446 172.486 320.977 177.196 316.927 cv194.816 334.146 212.506 351.297 229.636 369.017 cvcpf206.406 196.517 mo206.426 196.997 203.856 199.057 202.986 199.926 cv186.466 216.457 168.996 234.396 152.946 250.656 cv148.086 245.606 143.406 240.376 138.596 235.287 cv155.706 217.086 173.826 198.997 191.546 181.997 cv195.836 186.207 199.896 190.176 204.526 194.807 cv204.846 195.126 206.396 196.316 206.406 196.517 cvcpf193.596 248.776 mo193.686 255.597 189.276 261.746 185.566 266.196 cv181.966 270.517 177.766 274.337 174.126 277.977 cv166.406 285.696 158.686 293.687 150.726 301.206 cv142.346 309.127 135.346 316.507 126.986 324.097 cv123.046 327.677 119.066 331.396 114.516 335.026 cv110.326 338.366 104.796 342.366 99.146 342.887 cv96.0962 343.156 93.7461 342.127 92.4858 341.347 cv82.8462 335.377 84.186 316.467 88.0459 305.307 cv92.0259 293.767 98.436 284.387 104.266 275.076 cv108.726 279.557 112.826 284.396 117.076 289.087 cv115.066 291.217 113.476 293.547 111.616 296.257 cv109.976 298.646 107.556 301.517 108.196 305.307 cv108.636 307.896 111.676 309.927 115.886 309.406 cv121.456 308.727 124.586 303.847 128.006 300.356 cv137.956 290.196 149.886 278.956 159.776 268.246 cv163.386 264.337 170.166 259.337 171.046 254.066 cv172.146 247.546 167.836 245.137 165.586 241.946 cv170.336 236.847 175.526 231.276 180.446 226.917 cv184.816 232.276 193.456 238.696 193.596 248.776 cvcpf187.616 178.066 mo187.936 178.387 189.486 179.586 189.496 179.776 cv189.496 180.117 187.066 182.376 186.246 183.187 cv169.926 199.517 152.116 216.716 136.546 233.066 cv132.206 227.836 127.606 222.876 123.396 217.517 cv135.316 204.006 148.526 191.196 161.486 178.236 cv165.916 173.807 170.796 168.827 174.976 165.256 cv179.226 169.406 183.036 173.486 187.616 178.066 cvcpf157.556 259.536 mo158.426 260.437 160.956 262.627 160.976 262.946 cv160.976 263.486 157.766 266.517 157.046 267.217 cv152.746 271.416 148.926 275.166 144.916 279.347 cv129.586 264.967 114.586 248.546 102.736 228.626 cv97.2261 219.367 91.7261 208.557 89.0659 195.827 cv87.7461 189.477 87.2759 181.216 88.3862 174.646 cv89.646 167.227 92.356 157.106 100.346 156.207 cv105.996 155.566 111.266 159.176 114.856 161.497 cv126.946 169.327 135.796 180.196 145.436 190.196 cv141.276 194.977 136.466 199.106 132.276 203.856 cv128.366 200.216 124.736 195.316 119.646 193.267 cv113.496 190.796 109.856 195.546 110.926 202.316 cv111.926 208.546 117.356 214.637 121.346 219.566 cv132.766 233.656 144.896 246.396 157.556 259.536 cvcpf162.856 172.776 mo157.996 178.227 152.466 182.997 147.476 188.316 cv138.336 178.776 129.056 167.637 117.246 159.617 cv113.496 157.077 108.706 154.156 103.756 153.646 cv91.7261 152.396 88.4858 162.106 86.5059 170.896 cv85.0259 177.466 84.7061 185.787 85.8262 193.097 cv87.9258 206.807 93.5459 218.437 99.146 228.106 cv111.116 248.796 126.596 265.767 142.696 281.227 cv138.226 286.536 132.936 291.047 128.356 296.257 cv106.766 274.236 84.9458 251.367 72.1558 219.396 cv66.2061 204.526 61.436 183.896 63.626 162.696 cv64.6362 152.906 66.9761 144.126 70.7959 136.566 cv74.6958 128.856 80.396 122.776 90.606 122.557 cv99.6362 122.367 107.636 126.497 113.836 130.077 cv120.666 134.006 126.076 138.417 131.256 143.227 cv142.056 153.256 152.446 162.836 162.856 172.776 cvcpf0.25 lw0 lc0 lj4 ml[] 0 dshtrue sadj172.076 344.757 mo177.086 349.517 181.886 354.566 187.106 359.786 cv187.676 360.356 189.316 361.606 189.326 361.837 cv189.326 362.437 185.246 366.087 184.716 366.627 cv180.056 371.286 175.576 376.217 171.396 380.967 cv166.406 386.627 158.306 394.276 157.556 404.026 cv156.176 421.996 180.726 423.616 195.986 419.057 cv207.726 415.557 218.746 409.007 228.096 402.656 cv247.506 389.477 262.986 373.026 279.846 357.396 cv285.196 361.727 289.936 366.666 295.046 371.236 cv271.506 393.837 246.536 414.866 215.626 430.156 cv208.316 433.776 199.786 437.547 190.346 439.547 cv180.566 441.627 169.506 441.956 159.096 440.066 cv150.026 438.406 141.296 435.206 134.156 430.326 cv127.606 425.847 121.026 418.916 121.006 408.977 cv120.996 400.837 125.186 393.446 129.376 388.656 cv133.956 383.416 138.976 378.797 143.386 374.137 cv153.056 363.896 162.476 354.477 172.076 344.757 cvcp1 1 1 1 cmyk@262.256 341.347 mo267.736 345.767 272.706 350.706 277.966 355.347 cv262.666 369.696 248.176 384.656 229.976 397.877 cv221.646 403.927 211.746 409.946 201.106 414.276 cv190.226 418.696 171.816 421.536 163.366 413.076 cv157.636 407.347 161.416 398.307 165.246 392.587 cv167.796 388.776 170.666 385.896 173.616 382.677 cv178.466 377.377 183.586 371.727 188.986 366.106 cv189.496 365.576 191.186 363.887 191.206 363.887 cv191.756 363.866 193.456 366.146 194.106 366.797 cv197.106 369.786 200.086 372.387 202.646 375.507 cv199.416 378.887 194.866 381.816 193.766 387.116 cv192.516 393.156 196.846 396.887 202.476 394.637 cv207.786 392.507 214.316 386.437 218.706 382.677 cv223.906 378.217 228.506 373.967 233.386 369.356 cv244.096 359.236 253.716 349.286 262.256 341.347 cvcp@229.636 369.017 mo224.616 373.566 219.676 378.187 214.436 382.507 cv209.646 378.696 205.576 374.166 201.276 369.866 cv188.476 357.066 175.276 344.337 162.856 330.927 cv167.706 326.446 172.486 320.977 177.196 316.927 cv194.816 334.146 212.506 351.297 229.636 369.017 cvcp@269.766 397.877 mo275.156 393.246 280.536 388.606 285.996 384.047 cv290.696 387.406 299.366 396.166 307.686 391.727 cv309.396 390.816 310.896 389.446 310.416 385.927 cv310.066 383.356 307.536 379.906 305.466 377.557 cv303.266 375.057 300.896 372.837 298.806 370.896 cv287.236 360.146 276.136 349.307 264.136 339.127 cv260.446 335.996 257.036 331.807 249.956 332.637 cv245.436 333.166 242.396 336.837 239.876 338.616 cv235.946 334.576 231.596 330.956 227.926 326.656 cv234.486 320.127 241.556 312.026 251.836 310.257 cv259.696 308.906 266.356 314.187 270.796 318.116 cv283.166 329.066 293.876 340.106 305.976 351.597 cv317.526 362.557 330.086 372.847 339.966 386.267 cv343.956 391.687 350.456 401.967 344.406 408.637 cv340.806 412.606 332.816 414.696 326.306 415.467 cv318.406 416.406 310.656 415.087 304.096 413.416 cv290.576 409.977 280.266 404.246 269.766 397.877 cvcp@248.416 350.566 mo243.316 356.446 237.296 361.427 231.856 366.967 cv217.176 352.326 200.986 336.446 185.736 321.187 cv184.856 320.307 183.836 319.187 182.496 317.946 cv181.606 317.127 179.096 315.316 179.076 314.877 cv179.076 314.396 182.576 311.196 183.006 310.776 cv187.186 306.597 191.676 302.217 195.476 298.477 cv213.146 315.816 230.286 333.687 248.416 350.566 cvcp@250.296 412.736 mo255.916 408.276 261.936 404.227 267.376 399.587 cv278.456 406.307 290.196 413.477 305.126 416.666 cv312.666 418.276 321.936 418.946 330.056 417.517 cv338.446 416.047 347.706 413.066 349.356 405.227 cv350.806 398.356 346.806 391.146 343.726 386.606 cv333.816 372.017 319.706 361.307 307.516 349.377 cv299.676 341.706 290.626 333.166 282.576 325.286 cv278.656 321.446 274.566 317.316 269.766 313.677 cv264.956 310.026 259.486 306.826 251.496 307.526 cv245.636 308.036 240.716 311.356 236.806 314.356 cv232.636 317.566 229.336 321.576 225.876 324.776 cv220.136 319.297 214.706 313.517 208.966 308.036 cv214.526 302.406 220.286 296.026 226.556 290.276 cv233.026 284.356 238.996 278.127 249.616 277.297 cv258.526 276.606 265.596 280.337 271.136 284.127 cv276.956 288.106 281.516 292.937 286.166 297.276 cv306.196 315.967 324.326 333.797 342.696 353.816 cv351.606 363.526 361.796 372.996 369.346 383.706 cv373.246 389.236 376.546 395.536 378.736 402.656 cv381.286 410.967 380.686 419.066 376.346 425.036 cv372.446 430.387 365.946 433.496 358.926 435.967 cv351.636 438.526 344.216 439.816 335.186 440.406 cv316.356 441.627 300.586 437.646 286.846 432.547 cv272.976 427.396 261.306 420.396 250.296 412.736 cvcp@382.666 283.786 mo367.296 300.977 350.436 317.036 333.816 333.656 cv333.216 334.267 330.716 336.896 330.566 336.906 cv330.036 336.906 327.116 333.616 326.816 333.316 cv323.416 329.916 321.316 327.477 317.766 323.927 cv317.246 323.416 315.896 322.547 315.886 322.217 cv315.886 321.967 318.396 319.526 319.126 318.797 cv331.256 306.677 343.706 294.396 355.846 282.246 cv360.466 277.637 365.176 272.246 369.346 268.416 cv373.976 273.347 378.316 278.576 382.666 283.786 cvcp@367.296 266.026 mo352.046 282.967 333.896 300.097 317.246 316.746 cv316.476 317.526 314.376 320.146 314.006 320.166 cv313.396 320.196 310.706 316.856 310.246 316.406 cv306.276 312.597 302.866 309.307 298.976 305.646 cv316.886 287.236 335.186 269.217 353.286 250.997 cv358.016 255.946 362.656 260.986 367.296 266.026 cvcp@104.266 275.076 mo108.726 279.557 112.826 284.396 117.076 289.087 cv115.066 291.217 113.476 293.547 111.616 296.257 cv109.976 298.646 107.556 301.517 108.196 305.307 cv108.636 307.896 111.676 309.927 115.886 309.406 cv121.456 308.727 124.586 303.847 128.006 300.356 cv137.956 290.196 149.886 278.956 159.776 268.246 cv163.386 264.337 170.166 259.337 171.046 254.066 cv172.146 247.546 167.836 245.137 165.586 241.946 cv170.336 236.847 175.526 231.276 180.446 226.917 cv184.816 232.276 193.456 238.696 193.596 248.776 cv193.686 255.597 189.276 261.746 185.566 266.196 cv181.966 270.517 177.766 274.337 174.126 277.977 cv166.406 285.696 158.686 293.687 150.726 301.206 cv142.346 309.127 135.346 316.507 126.986 324.097 cv123.046 327.677 119.066 331.396 114.516 335.026 cv110.326 338.366 104.796 342.366 99.146 342.887 cv96.0962 343.156 93.7461 342.127 92.4858 341.347 cv82.8462 335.377 84.186 316.467 88.0459 305.307 cv92.0259 293.767 98.436 284.387 104.266 275.076 cvcp@360.626 311.116 mo364.816 306.366 369.536 302.146 373.786 297.446 cv377.566 300.646 381.956 307.156 387.616 308.557 cv393.186 309.927 395.736 305.437 395.126 299.496 cv394.456 292.956 388.726 286.616 384.886 281.906 cv372.476 266.736 357.496 251.696 345.086 238.187 cv350.446 232.736 355.816 227.276 361.316 221.957 cv361.456 221.997 361.486 222.137 361.656 222.126 cv380.046 240.296 399.256 261.146 410.846 287.377 cv414.726 296.166 418.246 306.257 418.356 317.946 cv418.446 327.517 415.676 340.937 408.626 344.246 cv402.626 347.066 395.016 342.406 390.856 339.637 cv378.996 331.727 370.116 321.116 360.626 311.116 cvcp@198.376 208.637 mo204.096 214.196 208.946 219.716 214.086 225.376 cv219.306 231.117 223.976 237.106 225.706 246.216 cv227.496 255.656 224.146 264.387 218.876 270.467 cv213.806 276.307 208.126 281.477 202.986 286.866 cv192.646 297.696 181.576 308.437 170.706 319.316 cv154.106 335.916 138.356 351.137 121.516 367.307 cv115.886 372.717 110.616 378.007 102.566 380.627 cv92.686 383.847 84.0459 380.446 78.4761 374.986 cv67.8359 364.557 61.5259 347.526 62.2559 326.486 cv62.5859 316.837 64.856 307.496 67.8862 299.847 cv74.0659 284.267 82.0459 270.937 90.7759 257.996 cv94.606 262.996 98.4258 267.996 102.566 272.687 cv96.356 282.116 89.5762 292.076 85.3159 304.967 cv80.936 318.187 80.356 339.267 92.4858 344.587 cv94.3359 345.406 97.6958 345.727 100.346 345.446 cv107.116 344.727 114.296 339.257 118.956 335.196 cv134.266 321.837 148.506 306.736 163.026 293.007 cv167.846 288.456 172.436 283.427 177.366 278.496 cv182.416 273.446 187.366 268.946 191.036 263.467 cv194.806 257.816 197.986 249.917 194.616 241.256 cv192.506 235.836 188.226 230.966 184.206 226.577 cv183.846 226.187 182.336 225.077 182.326 224.867 cv182.296 224.126 185.316 221.867 186.246 220.937 cv190.396 216.796 194.596 212.296 198.376 208.637 cvcp@377.876 205.227 mo399.646 227.597 421.566 250.396 434.076 282.427 cv439.916 297.396 444.866 318.127 442.436 339.467 cv441.356 349.017 438.786 357.736 434.926 365.257 cv431.166 372.566 425.216 378.706 415.116 378.746 cv406.256 378.786 398.216 374.847 392.056 371.236 cv385.316 367.286 379.836 362.826 374.636 358.087 cv363.776 348.177 353.626 338.387 343.206 328.536 cv348.086 323.106 353.426 318.146 358.576 312.996 cv367.686 322.666 377.096 333.666 388.986 341.687 cv393.816 344.946 401.206 349.837 409.136 346.977 cv415.046 344.856 417.296 338.837 419.046 332.297 cv424.956 310.177 415.436 287.956 407.426 273.887 cv395.426 252.797 379.206 235.896 363.366 219.736 cv368.166 214.977 373.186 209.526 377.876 205.227 cvcp@152.946 250.656 mo148.086 245.606 143.406 240.376 138.596 235.287 cv155.706 217.086 173.826 198.997 191.546 181.997 cv195.836 186.207 199.896 190.176 204.526 194.807 cv204.846 195.126 206.396 196.316 206.406 196.517 cv206.426 196.997 203.856 199.057 202.986 199.926 cv186.466 216.457 168.996 234.396 152.946 250.656 cvcp@136.546 233.066 mo132.206 227.836 127.606 222.876 123.396 217.517 cv135.316 204.006 148.526 191.196 161.486 178.236 cv165.916 173.807 170.796 168.827 174.976 165.256 cv179.226 169.406 183.036 173.486 187.616 178.066 cv187.936 178.387 189.486 179.586 189.496 179.776 cv189.496 180.117 187.066 182.376 186.246 183.187 cv169.926 199.517 152.116 216.716 136.546 233.066 cvcp@401.796 226.227 mo397.346 221.736 393.156 216.986 388.986 212.227 cv391.616 208.426 396.086 204.497 397.526 199.586 cv399.286 193.557 393.696 190.336 387.786 192.586 cv382.596 194.557 378.236 200.597 374.296 204.537 cv363.876 214.957 353.156 226.196 342.696 236.646 cv339.816 239.526 336.366 242.387 335.356 246.387 cv333.736 252.767 337.826 257.377 340.476 259.877 cv335.656 264.847 330.756 269.736 325.786 274.566 cv321.326 269.057 312.376 262.666 312.466 252.356 cv312.526 245.736 316.446 240.336 319.816 236.137 cv323.506 231.537 327.506 227.756 331.256 224.006 cv347.086 208.176 362.486 192.707 378.906 177.387 cv382.796 173.756 386.896 169.906 391.376 166.287 cv395.486 162.957 401.306 158.946 406.916 158.426 cv410.356 158.106 413.306 159.506 415.116 161.156 cv423.046 168.406 421.656 186.256 417.676 197.026 cv413.306 208.836 406.906 217.887 401.796 226.227 cvcp@145.436 190.196 mo141.276 194.977 136.466 199.106 132.276 203.856 cv128.366 200.216 124.736 195.316 119.646 193.267 cv113.496 190.796 109.856 195.546 110.926 202.316 cv111.926 208.546 117.356 214.637 121.346 219.566 cv132.766 233.656 144.896 246.396 157.556 259.536 cv158.426 260.437 160.956 262.627 160.976 262.946 cv160.976 263.486 157.766 266.517 157.046 267.217 cv152.746 271.416 148.926 275.166 144.916 279.347 cv129.586 264.967 114.586 248.546 102.736 228.626 cv97.2261 219.367 91.7261 208.557 89.0659 195.827 cv87.7461 189.477 87.2759 181.216 88.3862 174.646 cv89.646 167.227 92.356 157.106 100.346 156.207 cv105.996 155.566 111.266 159.176 114.856 161.497 cv126.946 169.327 135.796 180.196 145.436 190.196 cvcp@326.126 187.117 mo321.676 191.946 316.906 196.687 311.956 201.637 cv311.626 201.966 309.976 203.687 309.906 203.687 cv309.566 203.687 307.276 201.227 306.486 200.437 cv290.336 184.287 273.336 166.617 256.956 151.426 cv262.106 145.646 267.866 140.466 273.526 135.196 cv291.056 152.506 308.496 169.906 326.126 187.117 cvcp@162.856 172.776 mo157.996 178.227 152.466 182.997 147.476 188.316 cv138.336 178.776 129.056 167.637 117.246 159.617 cv113.496 157.077 108.706 154.156 103.756 153.646 cv91.7261 152.396 88.4858 162.106 86.5059 170.896 cv85.0259 177.466 84.7061 185.787 85.8262 193.097 cv87.9258 206.807 93.5459 218.437 99.146 228.106 cv111.116 248.796 126.596 265.767 142.696 281.227 cv138.226 286.536 132.936 291.047 128.356 296.257 cv106.766 274.236 84.9458 251.367 72.1558 219.396 cv66.2061 204.526 61.436 183.896 63.626 162.696 cv64.6362 152.906 66.9761 144.126 70.7959 136.566 cv74.6958 128.856 80.396 122.776 90.606 122.557 cv99.6362 122.367 107.636 126.497 113.836 130.077 cv120.666 134.006 126.076 138.417 131.256 143.227 cv142.056 153.256 152.446 162.836 162.856 172.776 cvcp@415.286 243.307 mo411.416 238.356 407.646 233.296 403.496 228.626 cv409.836 218.736 416.786 208.606 420.916 196.167 cv425.156 183.426 425.086 163.926 415.116 157.566 cv412.956 156.196 408.966 155.276 405.036 156.037 cv397.926 157.406 391.726 162.156 386.766 166.457 cv381.436 171.066 376.666 175.867 371.906 180.287 cv357.356 193.796 342.906 208.597 328.516 222.986 cv321.516 229.986 312.726 236.586 310.416 247.917 cv307.626 261.637 317.606 269.627 323.736 276.616 cv318.486 282.127 312.936 287.337 307.686 292.837 cv301.276 285.807 293.906 279.097 287.876 271.146 cv282.086 263.526 277.036 252.477 281.726 240.066 cv285.286 230.617 293.746 223.946 300.336 217.347 cv328.186 189.506 355.146 162.457 383.346 134.856 cv390.096 128.247 398.206 120.167 409.816 119.316 cv424.246 118.256 432.146 130.026 436.636 139.126 cv441.816 149.637 444.696 163.156 443.466 178.236 cv442.306 192.497 437.686 203.446 432.536 213.937 cv427.396 224.406 421.496 234.066 415.286 243.307 cvcp@342.526 170.896 mo337.726 175.716 333.086 180.696 328.006 185.236 cv312.466 169.497 295.036 152.787 278.816 136.566 cv278.076 135.816 275.586 133.537 275.576 133.316 cv275.546 132.707 278.516 130.327 279.166 129.736 cv283.096 126.106 287.656 122.137 291.116 119.486 cv308.696 136.176 325.556 153.586 342.526 170.896 cvcp@235.606 104.117 mo230.296 108.767 224.786 113.216 219.556 117.946 cv214.486 114.807 206.166 105.847 197.696 110.267 cv195.866 111.216 194.246 112.867 194.956 116.406 cv196.106 122.106 202.486 127.267 206.576 131.097 cv215.736 139.687 224.776 148.106 233.726 156.376 cv238.206 160.506 242.976 165.267 248.076 168.156 cv249.006 168.687 250.696 169.387 251.326 169.526 cv258.106 171.006 262.216 165.887 265.156 163.376 cv269.576 166.986 273.296 171.296 277.456 175.167 cv273.616 178.896 270.826 182.426 266.356 185.756 cv262.266 188.796 256.026 192.836 249.276 191.896 cv243.386 191.086 238.676 187.396 234.586 183.876 cv222.736 173.656 210.756 161.486 199.576 150.736 cv191.116 142.606 184.186 136.387 176.346 128.537 cv172.726 124.917 169.106 120.966 165.756 116.406 cv162.666 112.216 158.836 106.526 158.416 101.037 cv157.806 93.1465 164.546 90.3867 170.196 88.5664 cv174.166 87.2964 178.896 86.3867 183.176 86.1763 cv194.556 85.6465 204.356 88.7266 212.556 91.9863 cv221.016 95.3564 228.546 99.5864 235.606 104.117 cvcp@302.566 126.656 mo305.236 123.566 310.856 120.026 311.616 114.537 cv312.486 108.207 307.976 105.146 302.566 107.526 cv296.996 109.977 291.376 115.387 286.506 119.656 cv271.886 132.477 256.026 147.747 243.296 160.986 cv237.716 156.606 232.816 151.546 227.416 146.986 cv240.486 133.957 253.516 121.236 268.576 109.236 cv275.646 103.597 283.596 98.1465 292.316 93.5264 cv301.206 88.8066 310.666 84.1367 322.376 83.4463 cv332.816 82.8364 344.016 86.3564 345.086 95.0566 cv345.806 100.896 342.236 106.057 339.626 109.917 cv337.106 113.646 334.466 116.316 331.426 119.656 cv327.396 124.077 322.956 128.716 318.446 133.486 cv317.426 134.577 314.806 138.077 314.176 138.097 cv313.616 138.126 311.916 135.847 311.276 135.196 cv308.276 132.207 305.436 129.466 302.566 126.656 cvcp@255.256 89.0864 mo249.496 93.5264 243.686 97.8965 237.826 102.236 cv227.176 95.3765 215.376 88.6367 200.086 85.3267 cv185.216 82.1064 163.436 83.1865 157.216 93.6963 cv156.136 95.5166 155.256 99.4966 156.016 103.256 cv157.436 110.256 162.186 116.747 166.436 121.876 cv170.956 127.316 175.816 132.367 180.616 136.736 cv195.666 150.446 210.096 164.767 225.196 179.267 cv230.136 184.017 235.296 189.227 241.246 192.247 cv257.816 200.646 271.566 185.396 279.336 177.216 cv285.236 182.696 290.936 188.387 296.416 194.296 cv288.786 201.387 282.846 208.167 275.236 215.126 cv268.016 221.736 257.456 227.256 244.666 223.327 cv234.366 220.167 227.406 212.537 220.236 205.906 cv198.426 185.756 177.826 164.497 157.556 142.887 cv151.016 135.906 143.996 128.867 137.916 120.676 cv132.236 113.037 125.766 103.236 124.936 91.8164 cv123.926 77.9063 132.486 71.8965 142.016 67.7363 cv150.816 63.8867 161.116 62.1064 172.416 61.5864 cv190.206 60.7563 206.846 64.9263 219.556 69.7866 cv233.276 75.0264 244.736 81.6665 255.256 89.0864 cvcp@333.306 157.227 mo328.046 152.566 323.476 147.396 318.276 142.196 cv317.696 141.617 316.066 140.367 316.056 140.146 cv316.036 139.716 318.136 138.077 318.446 137.756 cv323.846 132.137 329.506 126.236 334.496 120.676 cv337.416 117.437 340.496 113.776 342.866 110.086 cv346.176 104.937 350.116 96.4766 346.116 89.7666 cv339.266 78.2666 316.806 79.6963 303.756 84.8164 cv293.096 88.9966 282.916 95.4365 274.376 101.546 cv258.336 113.046 245.476 125.836 230.996 139.126 cv230.206 139.856 229.206 140.917 228.096 142.026 cv227.176 142.946 225.666 144.917 225.366 144.937 cv224.796 144.957 222.056 141.776 221.606 141.347 cv218.276 138.207 215.616 135.756 212.036 132.466 cv211.666 132.126 210.176 131.117 210.166 130.756 cv210.126 129.867 215.356 125.727 216.136 124.946 cv229.686 111.676 245.716 99.3765 261.396 88.5664 cv270.786 82.0967 280.296 76.5063 290.776 71.3164 cv301.466 66.0366 313.146 61.4966 327.496 60.7363 cv341.776 59.9766 354.356 62.8564 364.216 67.7363 cv373.776 72.4663 385.056 80.3667 384.196 94.5464 cv383.716 102.597 379.546 109.137 375.146 114.017 cv361.726 128.917 346.656 143.406 333.306 157.227 cvcp@%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (Geraint Davies) ()%%Title: (logo9c.eps)%%CreationDate: 2/6/09 15:27%AI9_DataStream%Gb!R&B4(NqZN,<d5e]Se"9N:TE=+9\PQ1_NYA$6ENKi8^IpSYkIV0q:`cdlXGFrr#J'0m]4HcSf87VJog&@f!D"g-"rVr\+P2t`d%Qo>co]lIBMq#*_MX4GAA,U.<*=[_=rCb%n_nH9@U#SA4'oC,ephjALi]l@W9DmW!/>ee`0N`+`hT3BQf<r7Ot2=Eo5e*6o"c$!i]%+-/X-*.'3E40;tAfWC.HM$Sn2Gi:59Bm6$/PA\&k9R1+L(W6.0)Zb4?!a#F<YNbH7?DB;j[OM9aeNE9:it4J2^QIjJep%VPJ<Ab4%F(Z#]\]JO?mh,V>PPlGF\nZZ%8)n#ph!XoC[OLETX#oOp`[ucF+dn/)]TU'#`'beeqT7I/Ce3;k7$OLWkS<1b*s9a+&i.#X9o'G=%8^d;Nc<>_*>CWON;2oa;g`Lsla]@+)MPeU:I,4cDR!1mV,DefDiJf-n&Kr3Zl1:rIV_u-O[E!B\RH#OrE7Ss93\YXj9!M;^>]Ab2%?MdA7<,9Cteek@Cmn=9'cl^:L!BJ<15:n.[5WcIm[!L:%/K&b7i4+RcE\VJpQAG#a@kJtB5C`aj.gU,JT:gU(#n_WmIX0@#:HLg\%#YaJO#+YN?5f&@eqm5*OKm?PbLA=rA'"9]62`9=/"`K"l+g["NFT3YPs6-Zf"64C%a7'5eQ93RR^b!d6U#/2?RHo'Z1r)c`/?hSS%pq"rSUsIP+ncW9k%-StXn$hmPZj&Pm9[>_EP'F$L-Ldrjlq[i+]oTlTOD4FS/T7IDrW7@YopVXm0=s`(HKcAf\(pt`7INZ[mD64U%]]p%gkgOlUs)'^6n1qVL?!U7[j48$3f*t-sd$l%N7UP"e^Y_o/B7-KbPMIR0Z2K/B*u4?5n"N<,4l$ce@.">3jhIr7BPlW/4T',P%SuZupmE]3XnC;DYF^X`Em>4#rUGJ#%@7ts>r)E[aJh@"ElhsS*eCD'+GGe=XNn]Oglh\q@h!31>Q>_2%IFFmLgb&0tC3B@Th&t60%[9h=/<uVX>5U2[\g:\h(#a&a/NW&8F/[tKNX#=XRiJt[1Uueul2X](@[@rrB=$`SW!WE7NAlM@oSdI=J#)Z9]qSHZRSN-?O8brR,%iV61RXF0ZIfDiHQIX"dFLL)(B(-SjD>MbGhHJJech,9hbhCFXrlq]d%mGkkRJ)J?R>^V0\&7XM2]or-6qt.aNS+,>W?\8;84].)f%?&poO'SZQkFH2[4@/q)bNck2.4TKrBGAQHNG>X_^HX[NEhg]JAUA41NrsA,E-Cs[blgCr=M@3sI%#_sk2M30S$,!>ok"P3Ge2lN/%[)a@>FcW(0MF/;-VL6ib6[e"8'<%Zb9l=\Z%/g'X>(O+]aA1GakhSj3*MbHVH"=)e_pP6-$4!BC,!sRroFY*6#j2.q[fMTTV@@K&%<lMVpf>]\/s"18K#&_4`m07%+2Z,plhk-1[_-+3o\EaV%Vq^IPj"Qkj@Cn]@\%l8W@FNG>=Sr+&`!YGg=uF#:`Yu:3[#O"'*Wp$(%Vtap&#7Ur&%;b`-Dh$;lUKrtbCOcm)VP36]2<6:A(@R<#g@[]hBeqZ1Ol=pl;=)fe,Z<c1+:!u6dD@n0_e]bG>DN463J)F`)mXpA%SUTUseT<T+V<*TU^Z=a,a4\)!CV*X9[+mA79M5:k'(j[\Y!jA#rl\Q*dqb';cbHO&r]*/9NG@\NTZmShiKbMaEOgV)r"fh(rsr!g%qY9s&fGae5@PI)S)unN4Z'oKi?F=Mgqml]G6et!,[d%ES#W(W6+'5!/DpK`L`?WL7`6XmshsKS$bKYuJ_gd#61<rL`263o]qt&!j%2HO,^]CQ(ZAc$n2$.\o_E!XUgO"jpSE&4odGQ%u/5LFf/rQ2:k,-,qf](H:IoktA7gD\\4i!_2!NoZA`=DtM3K,a7,29%^%a!j?C%3DOlR-KDpQm(KEY`iW\HIn3JYX0((&G;t<BnVohOcl.4#mI$cKe!_[oK.Y*\>&Q6r_/pWG]V!)b'3bE3b=D\N<u[1crS"L?D;a\'%;]LB7,])4["`I[8_p#!M_j5oER;I^OpaF0l@a)P4Y8b:$VXB$#L<@OF"?L=X^>+p-kIh55]kqF_)n04j/Ws!cBe[uF12MqR_nTC3%C?n)oDkYi*fBV`uHi-Bfbf1'.eW^kQU@aae^!B:;ZfS=]#FOE[=m0<l2#r84ZY:=p[l4(;NG165O%l`kSMnrCEJ;H%K6Dp1Q/)Ht%%TS80*.'K*EF2/'+uN//X_)q.eY2G#-U1X1A?3>XmK?<qYEh>V_>-m1htZGg5^h'\%u'd6)sC)[\5F7I'H#N%d&jcrp%P6;Bq;^3%9EXFi+6j+3BW'[%Gt6n's$ndH]I(i,aOcV:%(FmXNCR'k1FdM'#(!&n*WS!*[.bYMgJ:(p^'fW$oWJZ0HGb6?)Im16HEC-329]+L%0IU1#!]5ogq:9;\A)KqRFtpeEqeA((bilC&i':`Cra2ed!&M84Vm0:n73!r<:+m*hM!RT\fPEFCg"dT1muIp=Q]dqSE&J,Pdq^m-%k::p"eXV?WIg2%,Sn#lU9F^iNk/>!MYW3[l4smstMCcnedqor!7guL#kE1mNC;$2_m[>+j[A#)cU\2tmC31\+k_4/+'=j-JmojjP%Xq/+Il$X%Hhd'3Q\%R7tc6EBE"3O8+Q8>oL`bDi-@sa.H30`#5h*4-,)YV3YXl0[4J5HP?hGeTbDN2eQ;Z0@g7<hGR>ZNg(NB<7L%Kh,`A)9iR>ibPX/`b02G))RIdSY#.5%@XGN;gqU$YX7P]0V$6cfS9(EC^ofpZJp@MW=-;YVCK3$qC!\)f;O[5bp"0a#@',+pR2#:%-"Q2)6`oq_(O'aiK+_6fa-R3\Af>R)KI$FaH42fal@42?=u2XrR@6hX+grToWdUB*IN:CVeGegb$pL"h6R!"_(,4!LW7*\cm:rDB%Heb_4S=@qb6^)^RK6[0cZ]SpCL,ocZf:p[]JRojs#Nmd^CoLTG]%1]TG1_cGLMbi4l&9h&p]1lK=+C!07_d=*C="'1%BqDYL@k<[%EF`&"k-$3ebhQs_W-)8NXI8JTEh;<i1$CInfW-RWVU6>C0g)f\K1htm"8;<g.WoKYfm$ol*6(2;m/@jhQYic80))tV3nTrPED;8E%]E8R,DN@f&_egl(M@c8/r^TK.W4/i5%We+"\]1lB+Mjkq!*!mKpX,V\CoH+*0rn630^H.*aFTB*$p\1b%$-=dA)3A][2mQ>m)IV&%"(Z9#Y^*]9r#$ABm@pjHC):`0UNY$g5AD\drTK4cc&T+kV/6FSO+,DHQX[95"F?p^aY:.8i8q.Ca+6`M?oB^uE,<s<I0-VNjY1:[%e?FbtXP8<blT)lJn-p"Z:$&HMm7(HjAo$%>^_/P?NA3QCJeQ<]AjCtcX]=0!MEo*j#^&S]W`*Rg1tuH%f<K)dBl7Y6N`fI9.^n=i%XW:+M34B$c3?pM"32e%L@&.?P=[i_lZXoA%?ArT(Kt#VV+E;rt.>!KOkqEuk2Yq+u^np6T\.mS3#Qc_#[BO.rQj[,-oMcc6cL7Q9%a/uMUg%"nYBs4`%)8,>XafM0$iAq]"GVdB8kpLnJK=&m3![l#$3*1h;Nk+BX9<VUd1J+*BX/a<[E@lf7S'V:BoTj*>ZA&dL5)Dj8%Q\Mmp3ceh)1<jR&pth+$VD"3S#e4.[?QqL&o1Q`1:`$#,NgmC_TlTN9fsJ"GCt#gKd;<]3NGmOj28X)!Gqi(ORLA4nm*dsP2:ZQd%HOX^Q`>m,rG9(lg'B8,hA/ER9=@kH3]TOq^@7APJUV!A0/->,*>'6nqEq!J$eld*(Y%G1*L;mfTIBc[g`hmT#'rNmj%boeqoL`^S%-,j.meO9mG^H_e3=S+<HC3`qp`&hFN:#<Y">!;>Qp(q2Qf(81+KV#]_2T"4M"s@8PPN*8Dc%pn'^IDU\q@i;tR+^6_GsPR&$0dn1%qlG>QD&YMCH(d%eeK,jP474>L7a'O5)RnkreG`i"^,?gMg'tW417C&6E-TF:4Gi5Y0XS;1OD"]jl[NU([n#:Hmfte-8"=i8'bFgf%5W=Gb_6g^S281,aPgtL\jBrX[Qt^kZb`UNj(,V58"ftuEV<qF#f5H$GqqY9ok"7R]=Y)D_M\=8:@XhDVEk);(;0NUOc"oKC;Lp>(%'e=^*Vh;U]]E6;H``1JW]<]>!5[468/Q&%HHOfS9WYVP`W9RDGB@"5DAd065lIVh9n($-_OhD"'a-LEs_PmoS>u)h("Y*Wbg41gG%[9KEZE)b*M<f^7GaNBqCTPu_Gdni1PITK(`.N&0/<:U*U)UJLWE%](@nGnm2?;I\)>61U:kO=iS.\jSj&a:1_jb,%X>een?V5Ki=%8oX!/XQn$20[;a0"`59B/0h`;JugR1[K5j0hId^>X#rso\j]FqTK<)?K>*biF+T:Q*!qTo-7pu[Du.T/"K&=\<`mCqehijl),p(O%1ktsTD+q"'(Z<@`hKC\kPB<;7/I5Bs[Ip%]d=%nK=#(<X;<hmck/R*`bo(RDXD+QodFth"]63ke1rjSLkgfZG/"s't/2/lYMiB#=%ooGr_PT749rJ\9aB%c5+Uo#"sad$XO3SmnRe#l?ApT2$,R6AjNmP4_O!0a#VcY7KJmWQ.l_?"^a8lf8+8qVLe_lRf/1McEfQgB##%ci]h0:6#$R"dN+@(5,VWd5V4-j)HMeTZ[a8QL;9V!Z.j/5!)LIT3>GR;X98\SKVpT^@d$2,Am;X+0f(Pe\_U%+6g7O\J^7F3.QEf%Km[0;gH#eA+5)UL?9L=Y1KOCH+)[M"P;$KP;ElM'O6T8F4^su:MMARGGX7^L(PF5DE78!0eXDu.[:&&!Qa!<sprm#ZIVRYuA9:Oc%5tQmECTJno3.jB$4hFsP[ra@sO:<CKAZo4r7Xq/V9GNsH>q2Hi0qqEPS2Hk1+1jVGbf:l!lUZC-??d,iAk8>'OtoQ(QjN4N&0uJd%B*96;/XM^oBJD#Na+;PD\YlFeC=o%rfN..h?ju]ZilFfrKomSq<`a^H0KAs.f1ZtCh4#M3W+9NK&+3`Np,]caDLst6gba+c1hjp(%1F.RE7j<oEQY/)*a0>4udBZs$$;iLh:U>_q31ANrT*L(%$+bc+<AC6fqCL-8B%/dJ'/qRl_$khE$_mHNg$Y+;S]V#sEUUr++2uU/%D8tU-L%8cBmA++`?B>TiaK)/0!a<a=qW><<VGE\L=#]d`FIsi"[M?hGF.GBV:;l]T$r$/aFEk(d'\p=ThqG3gLJGe4Mf:R;/9S^*%T0;('d2*.+jk@,`BLBKo.`gqToM+T.9KGk4T=<+o_au(Z/-okp5;,Uo*&l#ik<D>h7XFedZBO,Q%7]U0W=\ate%92K:hb#,c@-g?%QIC1YlT3YS5A9+&Ofcs/Y0+uokV&M\qGZq)dQ%:*P*I*+ThMq&*bCA8a'ZXbH$rT79,i*.n'9LTa.NCi:?n.\2WDi>q!I1lF/GCa%gtHtPDjPcAn,3r-d]$*>)pF*8P@C37r:'IfZAS*h(R+d;b?[6b8U'T$+5*i;mOS:X)pn,hR;_TVht5daefBGH6QY>q5@=;,[J?:V%DBA\\iPbI[juU03ULUg;2('GpniID!'H47"5jh9kgYL'J`Q_fa4S0[gkI,8c\^k<Si:^^[CU_]irSU[;=SO:od@PV9>)NpG)t0d"%lU`nenK2Y&LV`.FVL6)QMrW\in"+o`*l#@7qi]7s)I)%Urn20GhL47!a5bRpLR8r;NqqU/MH:rZngC2:5[/W:'u(EmAu_D[eptL4%fmY%`C1TKs8sdi]U$PS<Nq_,n$DD!H"EZYQP1L6(\c-A`n$`%V''ed9"RJG#%hh!cGLhm%:\('(fg@kBA:M&L0OrA^Asq[df$Ep7%g>6Gh(OR330/>_9,u@,GO.WJV*D>HSGYm1*=*o.F;qa>M._J\f_Lle9XF&7s%h8pi+b09tcf!UGn*N$JcX-u)eH#cbMen@F!faK5%l2Y.t!Ut[=.r<^uaM!roRsuZ]L(OA]OrrfS7])XS%d$!MVn[phD/1@Hf5E;9Nq.)nRHdj`S>g<]c8&Bc"R9XZ0+[C<:@k`0s*cq)%;+.tG^o";")R)UW1-AG?p<_-8>Sih3T)c=.*B[H]]qZ9.a<#iiN=XlXV>HHcH8ti6O]#h9LP/!N=F2FunTI78Cd7`17\t+aHFtbQ%U4bs3*rg+sIhF0l4+*>UM5B-+M/-$L#BIMMhQ;gi1=_TYA/^^[9'YoK&H7.B_g>D1A&".L`f-h;<O,U5C_!mp?h2`WU!E&mjBKN1%Lhg#aGL_7@FK!8/QSNJ,4Q3`^n9Y`noe_grrf5U/lr/K_Y(+']R>]\`=Y]YjP2Q,aHF&uSFruP2[%K]6gQD7!1t_B/]`4?^Wikf[%`o-C)-s@G_dZ;-H?!ZllL(UtWe6RQM[,uN@\-e3gK=-"\);LM&9c2PH*q_a<m87(WD&If&#i"[c8(t%f>H,k"8Fk:hZI`5us5`]<%l1FQboU#n[rT0TupoW5o>ecolUMX_I5QQ7K*Qa`7=oU:+><T,($]3&RO$@b&'QbIZ"u4*(>SW08gV,?72YYK3)RW>0.*B6M_dOu-%J+\dVgqb8=[4Bb%:E,]okjXFh&/DOl:K4\"H+7q((Ktb7B<'M,OO!^l>^]N&l;aET\o`RYg\W57T^6LW5;H\@Vtnl@5^i@=n<H3U%m^u?1*I<k:,,au/7s-6C:U]_q9E*@r`"eon,!PCHmJ<=e1QA:C&Feg81q@i2p,UVcKt4!7=)6kd0p%X/$fTHfPg>q<##ll`9LX^?%?i92cR04j3Vr:FSJ:CD*MAbM*N_a^$GV<pD=3Q9)eA"@TW\<LTlAO`'6JbSs<neA>5Ii!;\\^RVV+Ed@H79U<?'.T;32Do=1^Isf%g)Kp7AMeL"3<Fp.P#\E*TFU6j\OV54e6XU?.*C1b\jp^,0np6\LPE:epj=1Pm;!h"C?)[Y`Cg:?-pGsW-lHkSH9sWSeib0MA>$VL%KIEh@b,P+F<'2&G6"d%mbc9,DR`7U>;/'a5M[P]0GNi,TfW"9dl,B)GB!XqZ0Ir,_VKeF!@Z)dpn#QO1\iF-P+k8!+\Y@*c;q"_&%TiW]LdqFUcSj"iO9&QNp>r6X;Vl<:.QW(q,i2fA$iZ2C\=+u6HAPo3d"m[)W0):3or.+K=;;Y4WYC#G9H#WjC,WqXF;*UuPIA'tQ%X4&2D5Gt[*iR_a0mG>@#I$#J1rE#EQM1<c`0`'_LNrnl^\'P;^&)<hAkZ?XpF!l\!*3/k+Hm>!DK%$:h!Q3ZPl,!fl$/rj;<o*mJ%D>R5oPZ1F*6+tCh\%;[EY?$Qa7nJ#NC&_%Cj4*:J=<A.W?mlinU]%]8Qk6`u^>0-HL<2A9jd0F?p*c;SM=3WoMj[[.HBUQ#o[Ygr%&(`t^e(V,j]KEc#mtKe;q30`_bRj;1E/>'jd=[.W:lgu[rA3?b.?k8teN"R7#Y:u1REG'nF1r,MW!*/>rXt:Fj/4->GUbW:?"L!R%3?CR@K86qD?cA@+e<]W9dC3ZC/-<Efn)GTN/j)&jT>LK^@@fLlkY^f^mhPF%3p5.RlCP$r8uBTJ>5m_G?gF!Fd&[*o(3kW<YN;Rq%nbl07rjCSaSB18]l5uE=$NeK2B>DZ1[^]C`Ni8OB`&YJN)dFPb\Ao]+H"ii35;#IXd<=V#bCg(4/IH8hcLIX0B^tL0O'82=ET@(-%8I/g^&01&N(BYbWOUS^#I2'+K?M>.h:QMFOB6a<81<?<egWuDHh/@i=":=r>?nOJY3!U20JUmK%biE!.FC-b;&:E@%LG]*'rj5FA%W+!u?_;b@H5r,&a5Q"Ul'Z60]VrDlrZV.)qMt0do69&?SX2P`U1dRn4.-ie/4VaEB`[c9(;`bWKGBYP3PY3mG*=fG&ImOj9P?_,J%l.sgD22Gt\Hn+ef&1)JsLDQBE;Y(iPCk!k/DgY,++JFeYdsb[KZlm$8r1FR"Ag];g*t%(l`j!c/"7L8c]C4BFml&47,]h!WGqaO5%B.aDAUT?;oEd[(_Urr$s"SCj*CF6T=)HIqZQ,*%M4W^fp[()<p[9^Rk,e.&SIDne(*kt_4X6pk-)"!ftUcHO@4T;GF^7KbPi'HVp%blBhGRf,5SD?LJ"+.<>0O92W=+(=')4n/6sb_M9uq(C""SQ;'&[=(hTTMi+_H#DXm;eZ+,DA$\0^PBp?nb&Z]<Qn\hK7Ya^dQ!!q%jNJt"cM&\hLk=p6kh4L-"sJp$>i.BYA9as4[qGfdV=Yg_TbkZPcB-poVqD#g,JEr)Yh0tB;58NQPWS9"+]aUa[sC>uB%sl"V]<dg%I.f`5G$NFj2gFi]ZGYnC#m\4N:]R-%o^?4`V3#\4P"F..T+V(d2M?HS`Amf>rt4e?-pIB$L*Q-]WO/QAW']dF<f^&dH6Ai$crDrJ%[/VZ`L.ndioXpHgjt<h.OfN(RSN?dbCDKS'4.8t$4M&,ET_PJtlCUd+a_5<W"3$FR(qU#*H<&1N4GMb0:=X7_G!jVm2f"iK"+sj:%n+kG]rbh0&-S'a0+^a;k)o51W=65i'^q('<5/2t`E6eT$M<j!6A"at*5/Fk07j$Kbo?Z69TjHRQ2**KJc'23e2m/'Wl^Ltp[n:7k%\a$d!i'70)5el@uAj;=V?6PX%`%Qb9P;W)hRNm)2O<0.?PK`,`rZ`@W[0EL';gcH+?JL".N59l#S*GWHE<#RCR;[84+g#CE?Q]>2%<m5C:JIq9AL.>HTdBD-e])n_'HOBBqq*6F!YNapq^C0<t>VCbY&_T9([2i'c=rsJ'18h%YNNgO0r#=H,VODV0rPc5fON#Aka`F.q%\/EJ^*rE+((&rJ44ZY$AZQ(OF0[j9kCThTr9FOi'(diHX1@k]SUkjJrDa/-F8E,3W4(P"7/u=p0Fu0joH9!n[W/U5&G.(Fr/IFG)%bM>7pc3\)N9Et&8UC($iaH;Y#o_b$>Q#:?U]b2F65Z*$tM(r;3R8/2oB0%0Rq6S:F2>sTM]\1B#i4PA"1@aP`>WR$%gQ(0J@OkC%%oVYedM#I6`A(rd6adM#5c>R^+fGNk?j^;F2)-C^X31/diZ[kaZO0'9f?=/=>Zp)rZJ)_TGo$ZE^_nAlHFf4rP9_J,K-bX^X37$AJ%:\P4hXdEsh>;-37,IE.B<?354O4K6"bf_C3$,:c``I-c@Qj,8PV>K6:&I?YLQWYkUB<!Qkkb1-#T:qUb6L5[gIIO)\*-Cac2>7h)%=7Xc5_+s]Nghl@chsF'E+g+:gi/[`/GL#/CGjq#I:#BiIa4e%RqYR2ZP@We9nO5BF<5PBEd?QRgX82BC;7N%[nP_OLZ$Fhj`.kmJ%A3"82oih0si"t<+1gn@sEcs@!\SQ9k?+"bClS?@EmJSK,-YO_faa^HX5="]MBG;BUp0NJ839clVJ%'PF2"E#,2trt<O2A]]:F3fD%6%DiY&PHE2`r5]<N4UnNht$b0J$L^7L"D7Z9E(^?MeHL<.HHQnQXC(s-Z&;\63U(NZM4TR]dGTPrPft**d]sLP4YomeLXZUn`85u%;&6pG)['5LWe6!*epfI7GUK,olCI#EooHS1X'VH]'M)P\/`A;iNOs;L/7[H`oI)q1mF8q6ft+Yu&Fs#pC_J7ZbFePn31F5`O-9ru%&-k-l+VQs8-l2u`V5,_aEfa8?p.?u5N3=Sc+'Z;LraCD[Gj&51_S.,"nIE&?UN$5-)#^(?[ZbXs]rlp@WE_WYK3+:#di5u2V@1\c%h$+65fOEoOk.3bOTM%VgId>#CL+ZVK-kpkmCMH`l#o6Z`*%>@V\".OS'BgBh[mBV<?q5,J#Z"ekYN(7q^/K=E1YZ2.I-]dco[2Su%O\-p%@(k?PHaWY:j[B>8KH"?'e]3F?j)03CbdF`^(h#oe^7Y4bp3-BY[<La&kK]OXp"Xi\QFHN%'$5U0;5j5M_DBnG2t('<R#fk)%h;G0,]I820%aXTpWpR=pn1)\1K<,A`fL6DMW5s/I/1<\nW`B(qR_)B):@>c6q8n5BK>JDoW!t*6H3`9FX\9p\S4i=bgiS>k`/-R,%D76EOI/dG&jC@_]*%Ykg9B]U*Tj0mk<l\T9T*?TkYr]sL])@<0p%bh4IFPf,2M:mpMli=4=H<-TT$(C7L'06CX^pIX/Kr:b2o4#:%j19i]b;FD/9;k`,AE=i=l5SC<kE>sQrk[\:N@pQ*Fj>kK0ZKYVE3Zi<g$nEIb)#[qk^F&X52;rR>JQF/D=ZcYl5ol]Rueh&#Aq.u%Yug5_>$:*fg"\112@FE[<d!s6`,UD@n:($Ge1p]31,>joVFCg8Atqt@Q8fX%pHfDZ\(ONDYEg6d#4G"rVJ%V_EN/)b.P$g?5q=;^%o#VLs132(:TABeGEgf5'^J5a=K9aK%ot:ph$Vd5Io"je?DP;'\]l1thOsW]H@XaKV7EKJ"pM`<#5.FUu4U12(V<)mOL^Hd[9lalc%FgqGn=-%VU7YjGJo;<rh^I0km.ZjaK^ZI5Nd)r4Xj54HslM7Z0Bu&P=(.De!s!d)j[()O^(abYh(4t_9Rh0@IRVIRX7TA2Rr)1ep%jZd8G>4O'>>u&Gl\p'%qDYdsQ?6tW;8`Oind!04emFL_%ht^sEgKuKWY)[Tb\UX^0,BIjN<$O+Cd?^^n'D^c9I@KJ65%J`pb.;u$%n6Ob?W,D6<%CXj?j+lcN-ALjD`OCKD'BY?J<_7*-(A\.;2qig;$s4EL:OPsq^_=DpH+Db3I=/EGp-f36T"+,oRr#P7:A?QWGF4p8%[ti!M.fbG$iVjE+T$7Q17ed"[dZ@7kED:h]d$UoB;m$#kXucTI5*i'H/=Y#,7OK:M9MpOt?*3;GO%p"U=,=;*&&;L).<]o5!IK$S%HNJ'TS(4@IKunQ[Ci3[VnG:%PJQaRAjbpg]qu"Y#$`=JPMa5t=,p0]07L'";>Roi,5X'L$NDa.PNrq\_o<"`(0[B:kp!9&7WN!C1%.M%-!Fl/OI58MRur5MZmC\]IW0jegR#B0NR<8?.:J`[3NF!"*EKpo]lGk6/%*Ouu#,k^Vaq=3K7k,Jqhj\OgrI7*qi"*Mq\EB@Es%HsiE2aIB2:dEVtQ*_:uHpZOnCpr*I!R>9;lkjMVkXU?2gniu&m]H;+;c0I4^H&t/BpspLBfn>^m7dWC&XX:uKf=cA"f#eGW#IRm;%F8K7h^7S\C18,chZ?s[M-M$KI#ma!aGP(gM6U99+XDM<:,B3gl@J)#b%A!mShIUG'4KORLq2](Nk@jg/^BWuiiBVf@"S]+\0Ak?R%qWeN;I389:NJQI.H>>_?6:14r(H<>L>k#a#6nB^6TI0qmf#uZI4;_o'%:I7)>rLct<L-q(T,a$)7&$I/03hcnVOG<u7YtTX.KknF%)]h6%M'pc^cpfp@*doB.kJSWj;"AHq,@P\kJ5)9H]A7Uc/RkOd]_ddl-=.`&LV'>%iQH-#Jr<7Q!A[^(.J,s=/b.08rDu!ig$-[m%p;j[@=nn$RloM6Z?_bG!kf)1+lh!<O]m_d$PcZteXhW"]]2"Cs0&sWL;lA7UkuQNP&+2>.cE'&I:>Sp#*WM`"h5XDVa;s^%F=OJ4%,^)D8KTe"M.Qon8`G5+pEi*Wk6-=])5.e,e['\[CRlY-O6Ftu6.8+;s#eh0?2hVk2FF+A.V6rD4*uf.7CJoY>VPt#t53oY_[:Q)4%</m5*Uf3APHGS7ubOFW%IV$uBl7I2.r/>B]HMk?l?c1E8gJ6eVO6\C`:A9.j_bhmCZL5(4It_2Gs%^g]ZutlRgN4A2g>9u\9%KP*%gFpCVh6(XmA;dZ]eQQef=.YpbFikFp0=*R-b3T%/,'IYKl,+HZEj8uR>0_8m['@AKDLL>CG$;INgtJIrBJ]"5I*k[scTai,m;rV?%gE(4.6Nk4e;k4uCF^r0J!tIAO&'UT1O3_08V[qa:Br2r$4;Nc9C>BfjqO$Beh93<NVoNS:7/<O=YjD"VdlPo<"hGP_4cT@L68kAu%"hEsin&2fd;t78#/0=Yh3X*)oO5%^`F1jc$X7(5&k.+^a2/1l\3P8[8^?t9M:,.DUcLpmRIq7<uD4pP[Yj:q?]*f]mXZH.MU"_p'%/tEjA/.qdsWkR21qRoo]B5K\XQFW@9H]W>AdKde&T&6o);Z?9LAZ)`8pM[L2p03<':TI5RIdHceHS:WTed*nbn8%dYb@@SJLVr`Q%3pX.*DOZ;+R+s-HUf3>HYH<dW7]hmn:;e--SVF"&^"<kn^)$.cd-:PVe7gVeIgE;SJ!)lsVkB6Y>Q;am)E$VCp45Fd.YoUXE;ihR%:;bO=ofTn7'6btRBl7`VDkZY@+e9f_!el_-'lGm]9Ikr=WSFIM't/_kM=W+]1cjHllsJLs3')Xd:OH?DR*nEI9#t=ddCC<q/gD\G%J+r[F5IAnWRr[2<?6JV/=.e,EE1naArDR.[oa.U(STu%#cR52GZ.U."5F&ZCBF\K'];J#(L9n>^e>OsqLC.,8]-u%h;ng'-5$(L;%!dQi/i#`K?o$sFEoosFd@tlKm:M%/IF532P/n+L]^g/dWYO%jpES%an0uMZ9o;<.DICnpRHQ(kCl*Gordhm;hqi,8b:%lQH%4AkL%HTnR2Nk!g_h`cI'(,P4>KY.0k+'LfR(jd`RG8nY_h:q,JSQs7h4fr[algYe'Vr-:QrSroiZ)Qp4EUMrc,@pO*ah?QtMKVeEgme5-%e=N+Rltsg6G"uO*Dq>&<nm+5]H!4S<Z^\-e>E%+9q:!Np':ZHMIK'.7B\PXdDY"CrVjl75A$<T2mb[`d%V*ASinN0N3@@UVXb4EO%nS,uZ3D(C?Ve41$N'"a:l/Z&q$5gs?GHUQM=J/e+B)A?EWqL+R-AAU!.qO;#>$7oQP6I;.]K[DWDrll,_tZUuZ1q/?58Nr:*k]Z2%F4j)/QchioKDPB1h;?'=LpTBPcg0R+#mH0O_`6gNdsTQL6uS!Amb^f:17g`kIdCdu5?j2WpZpQV7;ITSi\FLg.,<dMYdIgE;_s#F%N_[d`4,nYsSC9E>MKC#t8e:Zl>K]dnMTr):V^0QmknIB,Li[<WInW(.l/CHldo&0)la445\ZU'I]RR=fO`X3i,_f_!rcaW&9-"+d%f)keDV<\Sm;ht\SLi''.qq(XRU1pdorBFM1.QooIFpdI#$DpQ]IQ`;!qmYr,^&Os8V_.d@'B`JL@QRZN;qQ2\3's7sc*#Mg'2:Xh%BR;lW@KR`SN71^(e@0>)l_5EmqT>r`9%t*7NbSrq//to^#/Mld+O]+mb,H8Ag/XI6E)a@r\CDigc%g33OS\-3+05RQ&ZGlG1qa-@%#iJ;q_^0>DA[@H8bA$c,/ORII`;G)T#75^SGCis&([>]))#G%>'3">@j$-)#DCTU8e'J$CmWBR,bF'f2$]UeLI,SX9dS3d`19P<d%fq6VoTAi=s`>!HrblDuBB0`+2o@`>//+:MC^lX?,Z1F&J'5Clj"r/V@kT>OThC9OjM("uUUYOn]0[F?%ibH[4<ID.98,cb]k\#_H%#R/%?5-puVSpkUA*G+^sVQlRs?R;tUjC)Y!ct7a=5o9I`0d+X?=D/Ra=6;j&^%=!\%;0Z&r7ZdXGEi'F0sC:06ZP:AOMrf&XFW*I%ocE@ePRmC+)AkM3q//sXK0DLnUSJ!c9D7[Nch8^E95E<GKZ;<4@J5EQ@CRP=;[_@qSo9%#C>2oABjbEoQ#N'S/MB,ln@E=K.U<I]%k$"%k-='?M^bSTmd[`P%9faeA/k1#6/T@i>ceYn6)JBn<8u64Gl(uj'PHSjH;a0Ju!sr.-?L/9qAoFNVf(^T73(N(@)P:,QEiD6+%!gqBro7JKkWsc[!IT]kBMO6dm[\Y6PjdBq9YBLa[[8Oe0$eC3Pb9VG7:=k5jpkK<LVP,YC]5O(1;%":mKsC_;,lP6)[c?@2Efh`X%r\?X]Mb>QRb_[UnmhA?B&jnE)ZMJ18CYc!3R+;/Vc7DhRdGoHC))_8VbZ`P5QCOnSO2[c;Zc(HR[Z4DH4oHXS)YY.NG]h*]Y6S[F%>dG\d+-S)'6W-F,Il)GU+4Rm(Xjfo)9L%\2"%Ibu*$'r[fCZCgkSV<E:sakHY#Th\EQ\de[9%-OhlYW:3D6!PB#'?0AMIR,eAp//%rQ6g+o]qg]fLIF\\2'#::0SPPbA/PPR.8"r(:Xtmp@s@.rN!%=R`@Mh4L,D"4oVEW_V.6si<mbjbJ;-a.4A)^^&M5>M,YPT)T\m&%O%ff#gU>`H2g/!?Xo`1M%ElX_NQ6J"BB_neDVcSDFL'2iYa`feV-k-rFhEc&E?DU@%RehK>5YZ+:'A$.dEuNO.*c:?NXSk$ecol:%0LDbG[<GY+3E_Y)DDG,H#a6EGl"h3]pG$?4>/;p\@d:`UW?Jp5H8C^&*g?H)'9M\C=`0#DORuB_$u3Gh&d<5j;?1n1^)I7FII'u8%G\1KLKU6[tCEAIP3@&'@J.lPi$>-GP^:]kL%g2V^^Q\UKRc[-6>g:So?`jQqahAOURjiSYHN%1g=Th_YQT7Li!Eli4DIG&nO_#6s%aL$bI:Pah]#&0[n%W&FDi^R["D6@,qL-*X\G#'+;]Qo*d6_:.]AnOYHVds4Nr0H*:fkUNSM0O8L4e!/s4/FmSNT;a*MCT\[*-U2f%$1r8mG;18%hhkSuhD+iWoB1N3q3)-QLXBo0"VDE;Q0U6h5\r26-]\!@.oi7c1jJq1BDO;^)4R.1naOQe,+3-58o*uQ3&NbGMr=$m%LA+o3#'u]h&>#=R@;CnMRmC8()4VTSiF5a?h^29#f>Qk!9%lPS`m9[k4amW2:L3gUQ>a#7q'B+Q5">cq3b@]UdGf/"(mCZ"7#[<_%X4Vj=NmZA0@)nNc]*1@$DeVkLP`p0-2rGn94Ze>1^U@=:Y_r2qF5E`cGCF>*B&G7k/XC=_!p/r*/USs']ITQ>aK%k>mD(IsY>Kdr%B3E>":kD_EPkFu8i.U57NHm+4^^8>RqmWhW"B<=)GN!G9@XEIUhn6.-.h%;"Al]hQo5ObH[^kq<N4X%>%Z<O%COGF6Vs2Xb'O7b.%l.f&^N<Xr,Cn#J9\^h/D9t>6(>\LJ`9r$Ch`Jm@!mCUn^ZSV(VCfuap`g$O?"WD7M,Ha<*E?Tc39f0h!e%6\;d:`eSVa1aW@e7Hn%\/gS-g+.^f[12Gs?iAos_F<%iJ3Ib.,RZXb$L*idUR#3ngZZUE"XBV0WSBJiF[Lu<$a;X9E,;M,FPce/cg:Y^Gp1d?a]bh8"0f>L%HM_^@h?VfC=1;r,@Gi>qp<4.^Ume`oBgJT2W5#]T:SHDEF2i%BCcI=Ve:nA<_K!3\aB8p#-rgOYmN6MWL:+Eectj)*CLpdFA&qj"%CCTafmQPZKpb9]k9f@oK1&tODJ,fF^AIC)1Yg/3IYKb/!\?fYP[BgTM0n<_>Z!%je$?csm38@,<`LGlcKrlL2/F8a"T&1H`![3ab%`-_2qJ:8TA$Yp"MGoF<K3i-]2JD"/1,iZo3"&]4N21`,=I=k>sGM95G=,k"3A_X0Zh+7:pd$:MEi"pa!af>_#JWdM$3HhCT.->ls%e2?=nF]YKA6+Q'4.H+`]99WcsZM+l<P@9p63AH:l1@;W`IrI/:DK`0g(rl71Zd4ZcMjH<%j<Bnpd3?2>&XY)t@^1)dX;#9^<lN#1%LUBi8q..[VJLO4:gjH/0'=SSIqT*CBXe$bRLSX#`ae7u6_lia6CA*UE(>j;:,7?sCqD":oY>XPlp-ud1;G:u(?]3He9#7N^cFJPP%m.Dr66`7*iR]`=4^>?)!%@qPD*EfLN5n0B+"eAAqi7p236,s<n[9@Ok)EO?_=Tt@n/XNN3F0;1bWWe`iTsO2%/*LfM"m;t\F0;/l%;Le3T3p-i2[>o1I)ER$g3gq3p^4sqDJkie8*1.U7538n)]/[cGX:E<\%t%s[f6O]\lQN7L!P:lB]H()8J]8Cfh3M!1T59k9J'&`/%hq<7[ch(8HI&k)I0u[\2:WY2[9SS"BT:$k\;SLpq?&!"EY2btCX?`J-EFqtto5gk";gfM#$uH5,Z_kNa8CNibk/EjY8@KVfm*(^s%SrC8#<QX%G4sbC]qc]A&.u6oBD;k<-2W10B.nG4:NEp(@?)3He$dK?da%a8TVY7Yd3t/IAX-9*9=R>0f1WYMa2nOIBqb/XY]=D6e%0r:7ZFftrbRmCX=2um,5[Xr1TKr[I,&'S/#i#'p>TAKXm<6nAWqBdT,PUs9&F-equ/khdLi4?k6[e@/lZ.t2tU<(h4Hq!3"7U-b!%,IYWDUbI;Xb^_EXiXgOoO>0I-6GsRC\.^JqXI:F?b@[[TRooo\(pC0(mrdW+OliY'S)o"ak`]&%+W:!hDsb#MMdTf"dY?1,V`jMc%<u**Np9dc(p;#!Qa(M#.G=t0&Npem=1b]YD`!"6"m^i^9^LD'^V,e$b!1Qi(1EXX3eR?\7gOCZ2M9B>OR/!MMLbrpjqE15.WuKh`%OF8&Qqe10#Xs33gX6&]JT3Qo6V/V6,o.DL75ED*?p/Fh%HoP'9(#R]AMX#00)1Z?XLkCh0(P)[bm4a,-Gujn19F@1g7]bs7lI=IP%\BP`>RE.)Nk?e30ZV+eP4Do<`i.RnOZ2nPjdL]J$#4b-F+"=j]50%_tRC8Uo`cJ;i`<,.@qH=qG\8#@_jY"7,_B8Y=?B)lJQ8WCQ%A+&hsQ/45MWQ4H7:\1E,Cbo.9[;ko.#)=?rARolpT520:6^fAIj'6"O=%:2<8@.Vg*UmU`aR"u4)&XtsR^EOW>t1]<iZ]U'CR:L"%OU>nUSWTVVnWT5TjQiD=?j@9;9a]+:GVH7VG>FONa<8`%)&_8QaBW:i1D[f$)&^WorKC5lA?\*j0qs[i\n@@u,Bd<+k;ZRSUU(r2%G*WB2c?6(S7'hiHS[3^Tr--$g;j[Jd4&t&?)WK^MgqIm[j.@]uF1U:R_[N%DPM9D4q:O3J"g`Vs='%?LGJg<0`CO:j$>L^^\d^$F%mN+K5=[KE3Qa\ddf@_N;B1f@rDdte0e<*ttPuP7PK,NG^])1fYI'7I#4e-/V4`q.a_ca(S!jG\V__&MgFfp$MLE3BFXG:#o,1TCN%SEjq+V<[#]H;%BP\*A9!h4C\4Ju'A$@VDp"dmluNQYO%5L\"VK`0okqCd"<2a_D7b<lE6g%l\"K='mVhZrKE`AiXLP]pS+KOT92e%3NWU=jBL!^?aN(+p+&1F<.%u`>-W+N<P!1`'65uN=.cm>?K!2LN8aB&Za+c6kH![T=n#XkQB=V]q&@+%apCa.8@$eO4(^2u4Qi4H%k\ftqOF[\2DHH"QPuTV40j(%)e^if`?WWD#pK8ATNR`FHU*WMc2E&eJNFU)g._Z*\i%-71$5=h?bC$pS^i:)^4+HRN^iAhsgH,%-%_q\"8@V43CVOVfg_#-kd/64Fd2PbL)W3HQkb-HD'5!=(ub)4]\eQ&F%Xem<8q0+,"WVfqE,o*BZB*B$L#\=_cW<d,O'rb<Mk3b%P%f%"P*Jnab_eZ.j"*D:!!HlGgtm_aCO&DDQ_gmo:n/VPua1#$H6,tm3UfhnhXq^5"p*5;TjZ;NY`.u?oc_Wg+'l&?sh.YZ@E1=p1(%k:;8X\G9UU@\n$)a,i]m[]X%ej:Is.nO7\;OWVdh'OIrFm`55O`2V9GQb07/fWXo;O"Pj^jMl$La9ZVK,$]3N_`X;N1;)Q)!\IiM%?GNi@R[2FSGu9u"*DE&aENoD1((A@XXmc)NlBlS<f=Yb<[ll;=e"7Hu\Cuc!M;d&Mn<_;3E$G5BgH"*OIA-ShSM,*^HB!]7=+*0\%N/UgQCmXaI:Z#Uu-/JU>R5s!is6,6>XL/n'h#\)*DNuWJa0ANb`m3Q`D/Jq<#G;unh#d8/WumhBZgDD'j5OC_7_<RgG0A#E2P&"V%L9`4KZ.l<hKjDe:Z^NC+$b8*A:cgPd@QBt6[c_ulel\>4^b4);\kYu=DS)I/F.5p7?T[MaSUk(#Sb2F0<:'>#flkLQ?]OJ'm/0)q%gU_fe?-T(l&sookF?'+Z=Z:K'YH[U]YKJkJ#S&l>oQ\hQ;\[h;l(2-/e5)T1Ra*Kf]8Q?JRs&Q`q`a%88=Pp_akMljMB(eAjbPC<%$h&fO-?JJM/[a89DG;0gA[?1/-?%,+dd61LFYj3T[$)qSio1rY[.C2ah$f.3PW)iAWL3'sEjRu2X#`ht._B5<;Vm@rjBRjcCMgdK%<t=Dfbrg!a['+Di6fdla14[fnPqEQ/F$2bJ#E^UP")ln\mk?utp2Jb0dHmg\TOr)=F>5&8/SCUrk8mE1l.KfBlH,4?gKbVoVR%27%Xs/!WeT<\d>B)NkPrEH-(?_FBFB2>0qPqQ`eT=j"FLLM#$Wkg%<Va.D24]b$C:8DUXL31.SQ50Qj5^qTe'6YO]om+k4,^c*C-":V%lfG23XD7"@>ZP$&kHMF.L"1:om*dLGeql%Z9kS$%eF+lgXI@F,[9B_j/lbVY(_WmGdq)$N<)%"*91Q$C<`r.076b:ZG88YM<jd$m%VuA8S9t0U!mp+Cb0'Xrg:ebS&9=I%'At5DJ+3%Pedog0se^\bBb:$?]YHjVB$@p13l=r@1g"*I(X/`&'Whje3&qq?^):`h0!/qh.%("ID,[<1Oe+.'1.Z`9iXaSnf3l)`$GCq`5GMiRT75gpMZN>#L.Ra*`8,ljI=,1RM1VFFM'4+Y&@MdbC\kH^2pm[-W$)C%oDics$W%PpZ.XT6A4LX0_FNQ9)4pl@:Y!k9eD:YKj+Z9t)`u4R:Khf6I-IS*q5%e?PY"luQi_6ZUgtl/JX&[mQn%4.HhTFc.Vo@CH*VR00$m%Sj$pMUhL8?K9@$IRDuFgL`=I.W"omm[;VpuBR9]@Rl$N"0m@^+L0FA>4,`s%l%AEdg5fp7)E[)!RG<MnA+"$\^l3p6Q:T$BA+#Z>%TBtj14--EL_e"n>_c)t8*d$T9A%)*OgmL1UeLneNO1Cb?]5V-oee_j$SUEM(=e3Oie5TR]="ER1TKRG.Jm+aE=*lZ6'g;E7e)g:,%,L,'2B_KY&Ug&-QrnqnP<\B,ofi;bS%`1Kt`#"YERY*It'Et?9ANZH"EC4C.PZkIRbG3AF/aSYE\`&6d6P5r?<P+qqp&D>pe?SRa%C#QshpWc4oW]0>IcFc$B<n0tGBBca..?nQB>ND<mq%&p93%&]'Ks`J;^g'67Wj)3/2.J5[IG*4rMfVs,3SVG=?otg>bk@h=gRW]C%4]eT3LQOm_H*??ne@3n"\p//]63c30Vt@:P<PX3feX^)mZcWpiD\i79J4]HQqb&#19o`Mc.V+q@N$3j1Ij)`%)%Zqr.dB$Hk-&DN%$HM+=/]1mpcYP<=!HEq1(KfW"heQC(iSLm57-l1"gGA9[/F9Z^kB2,Bgkt%l-f!CH>KtI'>LIW!'CM0iHusGHSZ@tFQEDT5:<HdE%$lr-RS+EGg"])Y73+^*K`nan8FB_#\l3VLJh=Pur/(nT%2Q:A#=Bpo<F#Tj>?#t(!I<QBV\Z1@+FE<[/56-n5%UB(h/^)k+\LScb%/Z_rnI:bI^(Y7H26>QI>&nf+%s,edXD0b=>?+B]fR./:_k05d,e[Jb!XiZ]R(H9VDbbZ/j%3=abk9shL'k-\L0bKAt<eT#jds#ke%m0$p+0")/!fSkOEqJdgH/e6jOT>-3(2QhEH](uo-EtM>#&0Z5JcL0"[isJ.o/7R%UDqno`COKs:Q/$G&$pF#o>dO1LM&hr,302AU%gpcD=fbl0:gM=K=N@P!Mr%s\TLRD0&=s)"=gnR$P(/7S";t;MLWZ#!4`q@0qjI*$>>n+q&7p$]8,m1?mmm6<ABA"B%6$Y:,$KDRr%Uj%uL^tQLPr^m!=NQ;Elp#S_]?UQFm2fpeFVJ1;Ab#"Nb*:a$%?9XA3YcS52Us1W<CRZB[D&M2LnfA,'H,FmNh4F+MJ)[!_Cd"GL%Th=\!WV5eM\*]D1I[jd"G3\U9ngA>b]@t#sdlD6tCL*jXd^7Eu=%cU*LJhhOnA4Q_=.QCk*cB`H#S5:oDh$ad:qrCYltZR]oo6#T%n7l$XpYo-_2j+SuZDmQ$'RIO%m<#BDLk"(miC.QEp%Y68ns8ZJLSL=@T5CL?oLl]/TP5pUFAK%V)*Iocggd\VU?2+7Ut_Bl:1!sK%/_j^#g9K026d+*uj#^j"Z#8_b@raVqN(fm+ANGa5Th-9hf3^@5B:C8,HE.g^5u2d,D3KmK@TM/3g8()e1F,&j56"Q1^9(E/6NVJ`%p`7=BX0%9)?fQ-U1/$KCegfErXsr@Wb0RQ)aqdcB-[2PiZlRoZC>Ptt)<W#6o90n;P3YJCF6q@rS=ep=0(um^SP%]"g8+s?ZE<-A%S[fcsm>u@NVq&l3Y5Q@@[DHg-GH=YID,745f>:cQB)=A_$7klkm6esBp=&$O8;652k?-I,E>nlo<jKm>&70HONM5"L3j1DBILN7W%(L"+&m^g4a^h#=F=9E79@-?%r;0Rhao951-H'j3N4tW,sZ%9aW4*p(ff66Grn#S@K)\#^rXtE2HMegU*o!i$!`gkt]+1niR(,R/W%iFDX8;Keq-b"lJs)TI$'N&e_an5f"@k-nKBj_VY@fk1(tj?tnMV1:A9F"g[T<ILJ-*8$kt[q6Q,SDLba8B,bL;^!9ia:>%s7X`$R%.4=YMR\cFMhRG3"**SWlQm.GKJBb+^dXr_Zf`BaL;fl9($gE8YB(N[i8\1k^E=Zm:b2lkFRsCUN4;`,f8=M(F[e1-tCB+eo<XV>a%DJB1%muT)""mEB!E/$;8UC'gbN,oHd4Se'W:Xi<'H(c]Q_\aA.!2iUIZbsm?-gI\=U'js%l3r5R%H(3NN@d2W3DkiNre7BQ/LG"2%2ImmS];Yk=n4[`$Aqg5OWUSgf30[3#OmSc'Pg:cd\%4s&CpS(24d=:Q>%u3Z-$46)VH4E1M*q)tk9^(*L[r"NQJ)ZUjdWL[IRT%_%On1*pj!>2s1CgBq.D8\.Vs/G<Pm0=?lfT8L](e1JX)n5O=)tG&>X)E6[CU9D=eG"=kAK#Xch2?CeSh."6WorFk<'pR*:3UdqH8tq%-/XI*TBk[Qc",t^@@-0R3U`6]C!3?uolG6-:KMPM(nU%P/#VGd^iquocZqa=@BXfsnT4Yf;_oNV[Qr]tnm"Clrj4_W@?GX0XK(\h%YX?r_Y+N&Y3n7<7jR<\f-?3VY8%,>lbs&njh78![;WkbDD40Db9P4ecI'0*l\28!16o@L%c.0X80$`Ku>mp"HWo&]Zj-rpDl2!NV%)<^iV6X_hs9:tN_*0RincWXPuJ$,Cn3L6T>RD2%pkdc/fjXE#N[f![b3nn4s8qen@T'PQeWh30D[-Y>P>,daOlb5Vag5J$rq%;2l%jo"<<3M5TG!nesaqRKb2?N+1oB.2JZI*:,)fUqFfs*9!M*6rE(k*S?aDt1CDmE<`)hrpZHm_S]u5Pt4e^2s7=Y=`kWY+N$^Y>u&`%H*3cZ>io^>!H6ca>eg*JnO:arZ[m/O?TNM`TBkYK`Pm+MMhn&5$K86-))/P=,ke/4/bDIPMf\iKNi2_JYDbFV>M,P52g89UWfAa`%Sa'ih=[2AcIa1.+bc`q84P.p0H$h70E8@%ZB:$l3pH61/172#'nLa]6.uR@)"CoBZppkhhX%G"YSNcMQIa33j,m1pK\UIR::DQuI%a`IDSP;J!\(>lZ+kZg@8YhcX[F8_V11NaO=l<HOU-)XN2F,DJb'URplIZ*V8SF9]IB?-*'8^!alkN!K28%>I@($GE631fD*,)[2+%lfYoi6bMq(SEo@J@#!4>.ll5M_!tAgj''mjkPEkC3pjZ:ZIl^:p-Z]6q6m4"c@>%nCMKE&gb\=r1(K^UL)D'fjZ[Q[;0-Igm[8d^%\4;[3[G,qE.U+b!e%h3c!od1">!-JobBpIk7fk+Q:eRHrCV:_*VZMgjp=@@qLBgoJFEG0>P2R'uf>?+T>+RReC+?=HWE*b$TDpp]%l,-J^DsR)[b88k3c3/>%IZqU]h5c<=[JeS;$AIps=839'\DlaaSh'NhAZg-C%!1Ojo/Ei-rV5G+3it('qFjS'e`6?TG;K*li,6([%9',I+re.lkhZgU2d*4KC;I@&o?=3.c\@3u.be8r/>MT*Yi,Uds(8A^oF+8BniHr&Oa]frCg59gC6Z=p&b0I,.]6SL<FIrD$hnD4%%qK=dqpQ^`VD?mg<J*"7`ZMF1R?X$/mcNEL(LAt@JDI1i-n+1lf8h$EO&fO=(mt;snln)/;<rLfCWsSMMI7k$dkY_V%$)8>sYb8Ai%$YLP,h%>b8*5PV*#$EA]cnY@XhY1?cLVr_&cuu;=MmRmSg_70F>VUSojbb.>'<ZFshAr`5b&sdkos+K+ILF!j`;(&_/\_%b-Lm6L%grA6m0n3I#U(oFTP9rIch5d-p!aRD8WgfGhI8il_2)]m;HfpPF*8S3FMVGd^,G0eg6JL`]hE1620A"K4IOr,pa%(p!E(4[?6>-$_%^7F/(Qtu(J_0DCiT.'n?Df5&+3IWp=Y!mW+eQ[@/ll-Ss'FVc\!j8[2I-C1n!3U3h=e;7DriAQ0gYt].46F%<,YEN[;@Ke1n(%u]%F0n[=qq1`Sim/bER0nW;B:/WK9+1f6JT7CRo:*[)@`M`NgFnUCVg!><TEW>,2UI*O[e;sNK7j,qmQk\7\$%p8Ks_.Pp@7:,4MY85%Nhb;Qn@_"Aau^EPqVW(ok3m9:df,8M:Z$4B(XbInoisP<&6g%+!E8\3"?>`%_TV.i!fsL/nl%Z`n\NOD>(ccC>XZ)'$t5>?n?H2#%U.nGr-:!o`';1@<J?Y;s-t\c4`)ckT^l997G)$\X>'UaUB@f?l]Nk^5YOAURdi``Dl#P1,ZA+`jV3cBK]_iVl7r*I@WR'GP9l[?Z%IHrjq.E=!q?g7_pWs(;QS5f-X"'?45O5C+C7DfbBgF%j$A>3$sDmcV@j!Hjb''=Da/"BiZK)(LX;@FNc*t-ho[rmb(YSo?u8Lb?f%H:FrBKFq?15]F@@5B!8a"Q8R:j6PgeD7FoOWV7@6^Bt4f@f`N/YDM=4bpkCdR+!!;i$Z2>:uua."gEb`-huj9A=r(:d-oo0=ok#:%c])i%e,h1m!#<bUEREJ`Z3\JDHAB]cX*Hf%rGm4eBT+/Y`5B2RXn]@'FGaNL6#dC]K/Qr/+5Gk'[)8]/?],9en5BlDH9\3%"(`S0%"h9nWTR1]T@qk_EXnp/E@amG!!h)D`5%G%T2aCuO!'9W^Xr.M@'KJpNBa"4JCMHYUQOXTK>=Y=Fl5+=P,<?"u191@b4);MR*ua4M%r5i9;S(7fUH;i7C;W,A55TP+k,ZHS&n.IAX4]m]N#Q"U?]-h%MQoR[73[c?LKt%f4rTce6C\iDRiGcQ:C%Phi1U;3s"";T&aAqPh%k(&S@GeEL5!oeV8^nb<4"lkr:d)2>3+,(BGmLF9h\,XfT*/;k#i<'A,[F.E2%jKRXRK85b:E"b!j\0+F/cne0JXGpAhmS4*DDmLp%)W48lT,dFo2S3&fh-p&,eq-H-=KlakItY1D)Xrd"%s%re5C!Kpdr=eq%2<3S8A>af2NU&R%NIZTFNuBsXHn;e,!WY>5Djuh0IPJZ%'97("CXft@0Ral`T[6,6hhYWVT3E@Db`73A`6_:Q0J<RaS@sg:6`g`EZnFtiaa74@9ut*4lYGOXT6m"J\*;!!ONKCe4&85KY5!#d%hW-&J"%pZ(#RJC@g=u"$.K7`g4[)uW3;$Fi%9b!W;1&5J>=Jl^@S7!sYWCq%'#I$@(@T]e=nTr[.Ynm(LrRE%'aWW!P2-u-H/c9-%THN`>Gfu%se0D#i>mLSXHT7`4k2J?0H8*;pL_g`nlVTjjL:Sp@^^dhcLt_4;)=$Jl6_7!=Zk5VX;\3S]$jE?1*-[X^Y,bk$N:"($%Y\Z&ZF2_nfdeYI@J2U=Was&$p/hc87M%7R]2s%>')Y1$PA&bt[/DHrZ.Jpn&l[BK!`$k^o4j$IOre"_r-(s(d2bo`)8t]P=S1dX)%5>!%^s.")Gr)&'d5C]1WJ!<2BM`KgNq4e)2fXu4@r)!O;oZe=%bTA-Ur:@r8o1',R%#B2gKWIX(U-9:+r1qMB"':s]m'X57U1&Z=%\ep;En4j,"B>i*e#bOUe&*Om[`dn;&4Oq49B7BnGj2<ZA'6Gf\\Om$S'tHqlale[\.a-6bGjDh+3ic:-^.1$cLuFQZcGYdqoX!i0%DlUuk3BjhCKmTdp[l#/sU#_Tb-$C3Vh^o(1p.q[So:ac\9@5eu!$Zl=P^EGP1f:B!W379!3;ugES8YHgGa:"Jf-2IA5u'&/KBU4C%.4N3_ruQFEM59?0aLi'U,SG*8oP2fg%53J'cZ[VRo'C[sR:Di'kr&@W@B3CFrF_Yh2^[?]DsU2DURCH'nSob=D`.C9Q8`>6]i(2J%2.R-7CdLh:O)ju70Do/Ca6uF!3LrsIoh(e0ms=^+lnXb2p%Xm06iK!+?Z/[H*e-@to__$Xc6=K,@Ye<s=5!LAZLi4FI^NP+IrGo'%\d3q5i*1j!0BUoI0R)UPL#/7o^5u1(p'$IG0GhCl5lEb_ZP`;:W;!\FX_CXqKGb$#5<$\K(0gNDgprd"e\-@%CT`e!Bf\:imX"fM%jSDZKE0h>IG9>#A".8c[F66$eeHp/0!AdkgkCZ!=r']/SX$Z0ZSu*-#VLOA/ZkHjK/3T3]+SNTQ3'%PBBDFGt_A.uF.9CnI\G/ab%FY[u"+9=%h#tji(87GZ^[:5Ba&(8W5Vs!*B0@a<rftO=I0QDP/I1Xso:h5)K92tq)OS`#7iH5Z'fj?S@k<&Ne2hAOi-mAPA:T:<W%LgVkIq*Stfk,@Q*$5_)VSF]],Nt/A_kG95CrA07s]aW:8NK&1?Gn^hW;fQW,pG)0KN088`kl&N[0e2$Q#.AMs6bnR?4*:*Qo[C1c%G$%)E:^u`uoO3&IjnPlm-h=g3WAHf]q9rj225`M\P=BK#Zt*Es1@<0)$JS(i4_KROn2sGW0?a6]<5uqCNE5<*1%C[BSntbAO3J#e%Zf3kA'j`5jBkCfq?:EC,8MCrtlM8?-at.a9<sncH*%KXR.+>o84+LUd_9KW:]OE\b8?/YM=!G=5B!:G;O1+tmBb5Vk.d%B?eB:9F%:q4]?SRf2k_[7dlq8hUB(:ZnX>3o8&_Sgn]V5lD//`I6he#;o,"Q'/T?^31p;WkC"<nSbt%Eo"2c]M\i+uJ:f^/I_ZVH0tkSAq2#%TT[P[$>Ch$hRGu]*C\%Q2:bJjLqgcm?6`RYF;2,GIi\04_BPJ\NCP+j!A&g$j[3;A?'X7eB(0hi<CfoR1kfiB#aP@E?M6VXUIpQH%b]0oal(NeHOFd3k0;p?[Gj#gc\4sa'V^&j;WAK(5`K7,Glo_ZlF%RY%F[fu<n/>6S4I;p)SE)V!@=>#OOZ8n(22q\_'guUoe[/84%84T)NP0iL_)#$DES65P[QP0`P+%/Ik9O@JhZQ"0AXYuGDb=6USpu6^Yf2`-509.LSrJ(BX8^[7J9n@7sZlMaZ&=uqjh>Snu*er)9%75$',m-VKMCoV`)H[]_fI=7DMaXOaEZ_.B/bRQXF=nFf7[#!Nm^>=%"eKUW!U(_i!he?((8#B(crZh\cZ<B/SMe@+6-`kL,!JksU%k=XFuAF(gChmdt:6SF]Q:8Wndfsp^M-Ck2UZqR)t_Map.3%lHIoh_EUD(X5G;!J[flQ$dOnG""hn8#l%`fLO\QH[-nj<A$AW!"0J%"@72R=FboV%!9,m5+4@KN,4=-d*2<<XruTjFRUClc"PK#j1!ZYOQ0%(fN\i0Eo7dnLNqBMkpWTTKm<IE[0,HnXUOH`p\;.^Id&up%cIT;;0r?BFI(H[XY3^]=B3fP6/<o7nJ']M9piV/P5N\+B\su:i@@*LSoXrlULL"s!G?Y#,Qe^qes"c8fThAD^k?N&70/;QnaX%^@%>qFf@hJ10O>8KrA[.\45`EO-O\#>LW>eL$m"4+-jO1Cml6EdB7qfr$f\9$IE:BoGop6KQD[X7,iT@VB,Hg/9br/6'b8M;_B]L".R%5@SlH>k\@l>;*bY/b_C,[qKA5cF4bQG/%)trpclTf)8bIjuDg(H"l"lBY3R>^hC5:BFU$21"l1',CK*%h@0=+s#5%k)8OdV3f5!i%a2S2,s1j[/\G1e_IsWL1RJ5s"o/?-h.o._97q1ukn!3Z9,b@[V]Nsor&5P\,*1u^m@NrZ8E)(F),4^-*.jX(KP"TJ4)BM(spEW&:%-V4o<PB:d-Dmcd'LY[g+n;]&F<>]a]L^4<Tf6U?`^g"s+e9gJJ<CkRpCNr$*'0mQ:a!&UpIok\a-/0kRo7/>4E5b7ThS8$Y^rm<M%_$OFFLdto@;?R-=?%IdCaX#XV,&oUL#SH-RPf.`m4;-h@EN^MUDum_-#\"$F&n/"a(^T%HOq^G#0p:T0%*qB'\8k(b@(;"<,mEuh%gl:8u/f@7!3P^LP(GWE23B7-P"EI#n&NU_da>)dN!>$fG2t81H_W+mSU`A?(Qj_+JIdm-,8DD&/3"DSe#mNiV";iAt"B;1Xi!tf%%"Z[/,@Ka%,-HAR73'/;'7>)q.##%:.PnGbRR%ti*;A5j[(kLX$XMb7m/ga*JGZU!GLkp,i$U>O;'?D0V8<:lK/-%6lAeN,"+lJ"R%r0<LTP&]&?1.at__Yb^33F7Rg'$ph6`1%%B+tS:INlCK^;2W:;ME:jd.RHW[%dsBa,\Tg,"(pJ:`mKH#LceufUQ7nj,c)X$oO5fR%$r.gW9V?JCJ8o'%LVW[o'&S>%j!)b\/dRH!9un>I^DPmt]ZDmS^dRCfi=89r-Sk$2K-BR>Rs\,.W']VI=TRIbOoithSN)E9]ZJ&J%i\<2.i(09MLE_FO"+D#:)CWfD%T#kfhBR6c#`qlQnfG?"_hmt!2_]-b16m;#3oT,7`Q22V7RJ.]9ZFOS$-Lp`4HACY5h7+lk32V/%4H`AN[S6b-P7j?l>iG$;6q#0)*1I_$+Q8)iiC,5VXE?2ZN?7i6TPU+rHHTOWeDQ0BpXS[g^"#?"(0/#!jNsq#WRK/./KgJge8@Mt%&8K!lQgbRW4(1iD''%q'%[Whc"Kb"fN`m_Ek<psY*-m`e+3[MG>m'ph@<7"A*2&*#.5!@A_1ffV>!SB>*/M7b0u+lg)Nuj5(dX%Q%Z4^V?`i7MiOeIpeZMn5kPfZ52j"Z/UA/m$39-Vh]4TPC)&QtC_fEK%md2tXQ3;Lg@(W^bf:+BaA]FaL!"s>\<a$BR]\'4%DMB#S4%5Y<;a!@9'9,3gpO#5#qJ9aGQ%PV^@U)b#9NJ8!+cP7X6+cS6GtP8@`MYCrO2LaDhei5p%`LVAJP9@A!H,1N-ak[K\HQQW:MZjG]!%nt&7o!Rd!a5Hu</W"Pm^.8ED:RQ2F%N/F_CgPa4)OqEPD3sinm-KZL<AJ3NNd1^VXER6iW_*eT<k<oadnJHm)0jt[R^cI?L&S7JC%Dj#)_7o7`ig-`a!U"&\0:H]S+7C*"4W,2Q];agk!9+25P70FKj5R\c\'-s3K09I'MWb!iVLkso%.9]o07JAQr@RR_/"=6]oO-kFD%Cm5Ts$"iOTfnjPndn_0V5U=]S,a(3?`["/e7@mtg5u'+kJK,;6N@6"+V:^9pfj[pu_]RG>1g?,F,*55"F9k^3aEUIB.Din,QH2(I%A4P.$HUO).\h_bN`aZM<Ok#8#!ZX[T)@RT/V[-Ts1-ruq`m)qr&a%HC?jA.H/"2K5f-I\9EIrWOm3`c8=riiTA>9tb&Fc551<PCq%lU$bJ;McPt!d-qB/1slTL`d]$fHchb6->!<,V`)k&MY,thMB5ab+XD7)D&l2"l<YT&G/bO!9)?\JiX]>hnU$Jl@7ll\Dero+L9Mm%"4Kd<-R<JdkR_3BEQAbgSNWu.a_Tgiddch.+/E;7&.\%8;9>c[kT/S<??%#`Ih@5G60APG!`gWJ^lst<.YmO+o1f-/<JuBR+p+6E%9V"GUa-amM#aQ+!,D$-:D2;*D;4M</5e0-Z!cg(O6/\#Y!Dee+'2(jP6R#HH(?ht7e\jB]d1%=ZO<fhpN#ldU-STBgEY>4XLtXE*%>]?2O#sdt]6quZ[)F,uV[A(/CIiiZ),S:2J8oS_S]J!_uOF#-0F/\1<ojm1rU(:%5.K\YQ8^n>C5h'Toi.fm4S-ECBng6$t2.Hs4%]$N@POZRQCW`GcNF3\2X.Nq4,fn:MF),]g_.rK*\\]Q$^beFC\+JH^SL_^=NVC3_"TEmtTO<j24'K=_O_O(cZ8H]L@\"IVu`:t*a%"<qq[EgP>rr#?UqPV6HnSn`/;cdBY+EL<IJ6)KLBN,4V!4qmE2l;oT-0i%L>k,JB7C'Vk3njnil.WC3-cL`^I/*aGd#qWSV4X0At%.$&tX7BM=VB>+[k*s"XaPL7WA;G_6IR--+(mAR=B44N<0GXV6)n?1"'ZM6.L/WU09+<lJ_Lf]X]@[[hK';#Q$HfS`0IV9,tCdZH0%kQ5Lg^toa.Rp*B_3f#aJlDO]^'1noH&kr7mkcclS34547!Js63+;[H9&DMd(,15"MbR*m9mstfeq3FF*(q??BUH0Tj.ublE-B3O%%W_P:I,LuuDK?/QG68.>f0c"1q>JN@IF:;iD1@5Z`/]'Dc(;F>eU3NVA/"RC3Qe3uHab5Y"i[F%_Og(W$Vh65_,o(iY^,WA\&AQXT%_!oi5J@;.$(Gc&KY:R\]Z\qAK5mSTiMDm"[12Bk+!Xi@u$L`i0`.Ht]WSo.^K!n]*)DeA*&8/"A@bh&WC&AIPPSpYMe\W^GK[j'[%Jgt!t6W(JDL`Y%V"TbWp)@7OI,SPeq713]==47snZ`#Z);]dS'@m2:X&t5mn0N94G2").n.X_g66sMOdXiRS'0kMC[G[S4A=Ad$\%0mehH!THelP0?qD";^)*n.K:f!\trL<m76RA`j"9,Uuo01TBQT1D:%SL_e4R=bJ1MilZX:)R,,B%9/n6"`\>J:,8N38s/e7A.4#'%Vrel,LH(p)2sG^?HSka'j&n\VY\TK;K&TFSjVB/*Gi>#UKucY&/O:D"8nDVmAAqasp6M)Y3&BM)(D8#]=e)K_Nb(*o&7K%f8P1Dq%Q$ATe6hcMC,JGI4`^"!N,*=D_`m2UaWqSfC8HP)H6OHEepQB'Pck;F[iZ3Rs98FEWkUi"tBRm#Q7`AHgC%NeCbQ/oM,E*7S*YZp5%&7mFR8*39-CN,ldlk%tZJ[?)X%iV?;(NfN5MUNa_f1&IXTb#*U`rkrJFm)4>4qs2and,sC1moJkj;D,cjt-"<i_uk!=[gU`h(*M;%:f8K.9qoTQeBu3QMmE\EGY8Zj@(_pT"&u=S7)+O#'(6IZ$i*YqG@K'i`]I-'i>iZDMM<I%d8Ri@j,.VCHsF=Zp6el_<E?\o"K';f%J<4r1E/nWeqFF6B@L1mM_QJ,B6/TV62752-=u_h-N\N>ln,[Z3i@[QY/.r[cR0e7)@\_9X;=bP_CDq]O[%B`<"F1rKL6quB@p)jt%q%G*qi.9sn0G0-_WJ$9b=orM8Q3!@$,.Eb=j9Y^O>_93-G[D(cp(U4>-r^l-Qfbcq*;lZf(TJ4ED7`IoBsK^\AD.C>RdaCo6r_C2%d0h0eNJ>r$MD6o?RQjBcUBG=Ffm(BGbd::08-9nKq8=+)i'O0sUni.1kl<Q9e;mC'<t5ZP<>i(T"\L?=MI$S9$TU+Ab"E$e*2GV"%a[UMJ9IbDi8lJQLm%C;UV^(^e<LjaL0Sr[31_S>%NR+H#)0\kN?BlQ?W-L^&Sp4T&Sj:1M*^+5C,a2WbjCOoCfjHCV`=:l?Ysd<^%;':*,McnOe:/JL^d9e+62D/d]-m)qj>BHPFhYA!m@R2rBQq+eV/L&Pr:ohE%X*Q?c8Wb'MK8uB&'aCl,!k>#r"#%hKBaI[5N&7Et%C"cN]Ygbm`\K'(*WlN#0><ucu"QMdQC7m^87:f%WU)HorkDNmT30sM12P;KLnDN;6,'cKM*CEP`,YN=G63\d-M#eq2-(+NABX!/9%J1Lp24@_mo.FAo*IS&$"P;)Yp'%+5gKc4<]PZ9>eZ*XW\&UZ&D]Eg(a-"1W-0saQX,q56m]L.&hF:<9M;M$qIZ4\dp[23T9M$YLU%"SnVH:'p6BV^HJsZC7_jrM5<$A0I[@eKl#SYte!6CfHdY92bG85o*Q=`m&M#D(#R![[\bPC_&L<lji4fP-3m+4:>_s"BAoqCZ:RF%,$DE%gr8hDQkQ4B&Q?>g0s3)=,*13,9kDQ_84O?m\/NEULa6XJP$5Gf#I$&''q"=1A'UPpI3LGgkX?esWMG?lS%p)p."Mmt_@^)s%c5"`bW24cYRcnPr1'Pq%Vi4_Gqi'PZg-&3E27).A>%bru=<L?FSn+Fu&oi4W-!dQr&/$T/&fUljKNt0H0gA.%0br*aK#!nF3(r[2%aGi$.MD9*JeeO$sTVNeYbge!s4bLU<@ogAl0gLoCJmL9eETT!n4W6t'"<]I^U-+;6-P6iQ^EdkJ<(Djkc,dbX!odpgKd#+^FL!@%%ifXFj[Z\_[n2V9X;CNEGb+"nFi@O8U3!F<c)[WMRPNccNY!?85-Fe;UVeur"?0"b>V(tkQ&YD<$0kZ$!!,teeDLZ&f[Y,usE+hSd%!bNmI<+M9u9+i^l@aSb!2=M*\n@I\B,dYi$AWpd>$$2aro]Bkp-)&!p'G1tXUP==+]uLm)&5@6]>[UDU;5#a:EN7,LUA0m&)b_(Q%H&ar"0j[^uAo:mX<ap-GGpEg$]onNk-)j'SBdjYSb]Y4-VMGOX%:dtDXNjBMd2^@?aWc^md!EK4BO6MID+VutP'eh;&S/I&8Rl[i%AfQV4+R=#fK%Mo?BbZ4P;>m\q?uZl;hiMA_-!Zuc2Lo;\gQI`;-$`hQlCU>JbL@kHbai.qSd)`Q9Z]-t=uaAHl(TInS9,pGne_SJ%'%->DljbpZe!>l8JamlAH9EuoED3+]2g?/eh8GE9[B1mV[0=,M6G3h98YV3L(#:PdY[oJni/ptiM.6L)4e-h3\F)sG[_Q-^]TXIr%[(*9@^<+?^LD+0U&NiPsZ'^OPbCYh4hMDV^9XI#1MG(0uN<bD?5D<Tf`@DNDML[t&*(1d+"0,sag,;\KMFO>T),<T<S"cn/g6%2V%\I&36bMJ`V<O")j^K9>V!.ogN<8TAj)?g9VBgku4!>2,)^u%1gIsA0qj?Fio?r#L(3Jupie%Ia,m.lsdW623cN//jQLl<TIX[k8+%AYD&JYqs<50+^V4<M0dhkClbWD]rjDrN5E2*,eu>IpkI)q]&<A8KqYD]EniW91k?(`0Dou0I?:((%OG2:9io#X;VFN@$./\$L*Z?%Tp@LBoHs;A(08XQX+M)1rg(-EI!U>-b1O!4KLJ`F6jWW;e78]%'296I#N\_>l$3(7^5LE"0pkn@8o[T!,lGdQgjCT&SQO/@##gU-%^QEZ!L6nmA@delHb`"4!Kpn,6UGmj(K^P2F!j#0=pd?N^!9+JMX^aYIbRc<T3j:.k5uHEW'(8aA1*-<=.F\DfI[sl1jED_B8\.Gj%>I3&<<38t?*A%`K3X[2[ld#q1f#kU_ll!fGaGRnlfE-.-iBe4&TAYcu=dmD;WPgACALWO8(PWbW,&<kUh=Pn[l(b[VIjTk%.-A]+%KZ%S*;1]SB:>G,5&/?O(2;BYrWXa/N\TCE7)No=(/N,>7Yna:A1bY>,<lULgekb(CadM4]qp*8IPcI8_=o!_72>:jD]j:uo;fZ7s%O[ru6=Y@rj";?+OB>&*=1QmEs7&7bGq,kn)+C5La#VoI8'e.(QCf4/t$r%Uje1`8uAYIK!X$aN^>a*+1"V[cK??j!G^/YoB=2=%q%3[`*C,EU-BJ]10F#dD;Mg?FlL`:tf6K-q5P*-cAJ25O*SZr7?5=-PXb<<WtFCk,EXC_?iPn1X@WjgEkdnJAaZO:-[F8<U\BDm9Ab%>]$XZ%8W?H3f;Tg9*PLd6F(.AcJ=_?>>&HBGq`d`V4JJ>m4;cSCI*I`(6Jn6$VMTUfGho&fX)!'=D:n^A;_p6,*lAh>@/f'P2rl7%D7K%2b\S/%d7V=rebpjbSdPs!&=(+FK-o_/-H*JY:>r?j=*I_gAEm@E;i@-Bk"8^,Wt<K34*S).8Kf:C>6\jH_3-q/ZnNRZ(%fPu%'p1a6$b"tNWLJ9F6uP5\?"D977;-0M>J*ep1XE^B9%8)g2JBtka_YR:Pkc,I=E8=o8-[@n%C14U;Y\UZjYN#=j`M??:$UlY$'=;4%KW4MCWRDn`G#LtQ&l"doC,K<F1'$6Edpc_#)R87tV0Yc]XOq,=BZ2798=[;)lAb:goh304Gu'\<aIVsL,,ErbdS`2p@!,J?'p3'V%AREQtVulp"M9)!<nouGT8^F&]=X,l'imnL2Mf]6?L;_+8F^1?fd&?ci!`S+GVm`Cd]CkGmFJDo.8@^dDGT3WEB^1dC`Kc>goXW@@%DW@nB1VU0QK'O(YdqGG:3+FR7KPF@Y*OR7$#QuL/qIF+s=@jPP:iP\gR:^c-GRbt&j;h+0O[*jbSV\rP.aEj:-Obidi"KT3@NRc_%!`SHJj`CQ3Kq1d-h`d.)<fG!LLr:_p[8*F#!(+%#63-ZS";u1[;PVVs?&0&W0FEB!'$),J-Y7al<["9#Zk/VYP'dl;m_HI2D?(qe%6bb+RQb,:WGQcG](4%UPjojkh7O#H:c\=iR<-b?J``o/\HH1]5$8$g57<`F01\C"PMd9^CKOCoeL=AcG7)P'W[17:14$B6Gk;o#g%U51sl+eP=Bp6:"<8-Y"L[<nZ$!YC*rqIsV\!iT76M`ZXEo82NP\9f"JAej!?QC(rd]G/el$6)@-Ji_>qo>?tDOc%@V%f$JF/^)Tn%)RX;\nIc9_4d2Ri%$G#h%?\B46Ko]'-I`T7ie%>B<sjjR+eXF)_STNugn:CoT%ja2aFfqJa;d*^+V,-]cmd'gk:+pY#Sopq1P\>t%MO^aWHl33'Z.tb%&YLRpNF_-.'#Y*2h2UfGR;@jji%q2q;Qgu`SQ^/PF(J&Y+&rfA*CtO[&d8-0)*rQQ0*9H+KGGYgTJe+AJ6_C5%S(,*)TY-Qr(>*5Wb%lt<M\n^iWTQRUAn!#j'a"Y`#^[$bWZ*S[1di<V9,j5#7hPj''!B,7Yo$,Ab_,E_$NBs",o&`O<VrI5ah_KL%&ml?->u@ulP=(rOb4LMW=,%p)^A8:&ThfGp8m=OX7\`TB#P$LchBYuR(BL0t&QIfT.UF>/%7KLB#<Jm?Q)P3=KIV2)VVnKgh@un?%e&`,#3ML1ZH651R/Q`4q?nnrOMT'F$ZATt7M'7adW1*pS#_boPrDHV-^"4N)j!_7')@r(B='T=%9%"UGe*POM*'[`)=lGuHls9UN%53WfY0W1bE7@Ifo/M<->?J1fEaHPtN8n7pCe_DFJa;lTfj/_[*V71.QW/_YRVjfcra?nTk6&XWm`^7+KrfF)@e5KB<*7d<;,uRp0%VbbU>m)dM7^$W1MOc*TRrsAU3@#>^OTR$X7SXQ%AMUi)VUlIrUkb>9iGEM><19RT5e&lhc*Io:&W\7>1Mg:L0s+@=?\qHoC(j[TS%Ch,oX?7G!]2(:CG^_!PF,T@bc,XT'dWG\"inC$V_mI6dCA]=Y(_A-;S*!S5K7Ag:FTe*B90]U5)pf.2%GYlB:WU]!aLBOMSRt]2l%MVFoY%#S8]ME1joa;%_nBk;O#Gf.Dn5@@bl<';&+eeof+h%UNh?"F.P/j\^]^P0NV^<bTR^pL&Y`@Yt)<$OcEZA_/:?ZG$K3#;K$%")&_V4))[W#"B1Z'=,!_d.X31O`?7eje&eRW\Ss`971g'jo`hNLuM-F;*p4's,he4JO>[*2O9U$.;@l3UoIHu<9!#;E71=%`V)bl%Y'2a#9@2]JN"r.)#c*]=(6qsHY6;Kg=VcoG@Z_Mi;k!DUicJBrmNN/FOD+GGKgo+]#>8nE!03A^GD8]F,)[l'?A6PY:)bSrqCefL%>FC>.Y[+8Y;dH]]>;q7=7=49V;GOn>Ca<+F%8;;U!SZUL'nD<DonHIk1tJc;.5\_?!gpaTIM5^&(qb/G^IrsUZ-itC>pD7A5h-75%U1dob21!(o/OSQ3b=jp7_JSE]K\,.2TR\XJ<0$M;bZ)QI)$M?%7PZEri_Hb>IjJ*^"K*u_pn)f+eWq::=G[Zhfo+'^L1Wn$3B7eg%9f"O\o*Qeaf#L?n'8BW2dP;hV0i],io58\D&rrj9RIX=bKa^\Sl0,Q7O3!,(UrAp!$nN/GrPV0_kN0$_$3"X:!#f$$=-)1?D`3nH%Z+BY&).Ts/,ikKj:J8>,:Qqh1%8.-1(TEON02G"fAZ#"^'WK&@i[QCI.!_>g75?br5rtBr3Y`!22nq2_*p!NMLltPjQ:9q+csdW5%%kKPKUjJg%\\behVNJj5`LrNo6B(C`b_NpXF7H';Co#<ikWrfT\tYcimLoYZX4WC&GU1L3q1gHbZ)'qG<#W6r=C#I2+>X@m]N#_<%=kHc(,Z%FkaZ>b'<Vge].%ek:gssDjcTV?2A;k%dR;.XXm5Zm<SUp,#LDYQ?Zo#4n-LA=,lt4Ip1(TLuM=_>C\(h]G4>p5k(.?#<%Ttd['EMchYWLm&@"K&6G[M'l]Z?T9>'b^C=VESuq^GE;U"'6*PKFHBf'rF?9N9tI0[[WKfNAIK:2r7K[]fU=lR'(=g.<V,!asL1]%R=M?#cgWA46IhsA5;,`jMO0=_DGW*h/eE;6R^,$$HgeiAj7T=<\ToIO.J-;,+4)Rh<DK`q\ah"Z5IDB\D9`2Yr+8WC;Znn<`o1>L%<?%ag.JQ_kYF-Q-1eN.98)XnUH7^]OGc+q.]\8<o79`ES&goC^I8q#VN&A9](<H2;V-]ud7T#BH&^-BceRfOS#P44J5#IcE4%(8V%R;tQua\Wa`:hX3Iq0A\A6Y^rqEhu4R+Abmc5\\@SF?o%gW-h&]mXYO,/`/P83,>pS&q-*9<DPDnTQ)m>gq&4S]&t,[Q(A+/Jh)X!%q5Oth@uV$7Z$n=A>U<Bj:I1(1Eg<T`Bo'(aV(5I4Ib;@I@Rdp9U@:dZV#in-GAY**Ua^qp*1[VTSHHB+dE&+-kfSDVaXl;4CKVPb%q7DBh#CfjX,X`jdJZWr:++egFe@%(>7F[O\CK.FXeo80(g;[PP&2$X[fS1#1Xd,/N`)k)ZP"8l*7:Pe8BN4`PlJlnj_.d?3alc!h%BG]et'*LZY(R@'44$rTV_%g:61>D&Z6I\H41J5:DH2g+0S(h\hDQ7dQ"J"!1-l*KY&>.V91b!f)S#!cpWS^I:>(?^G<il?V@%q;d%4"/+%n?-GUbcL\AMq9nZZ,Kk!5HXY&<\/B^=Wd_m30ZHqdBu+fTp6V7J6DgiP:^lWWnZBOe(m4LIbJn0/5%gfY&h?2)"'f@X<Ci2%K_5+^WI6)V:?%_VDuhIpZO]DJFAnfmk`%0C@9+5`N\#T>c$c05'V4m3(T#gX?oG7.VI5_bPF1FJWkh7"Y)HFZ>U:h!4.Xj;oF.-S%\f_B=LK*N4BqA[3,Q_hPI$k!>8aEC,1lH1J[Qo/,[0l+6Th<"\*8kjk26"Q_`QK'Ak79A:8$_'kd3Z1nIAs$r!,*T+Luui%YnR>&%Z"+HcWF[ZXd%>W^cn.2U,a)/ceWdW"9kBG+Kcqio[UBq7Q!Veo@SuGs@OA\1L"?GL.@G?HXDTQ;h,N^5RYoT.du>6R]=YGCDRHdG%oKt'C:FjU"JeKZXY%A2:fgr+-0Ximc8.q]YmG\1HAR&-TW36iE8f`hsoI(uHCtmHpL82P_7s\-s0N(20*"P.E%2PFI7:G<s7L3f>%BB?Os1D6Ap`DBF2!V]i9NG8JP$7(4\Y,l/ITa"aMgH-I$J8Mq-gERu&Nr?SqP&B]m>*5Xqb1:*cA]eq:Hmn:pZuC`aEng5D[FT3@%H"i+NL#54V/Q0_U:rglA*=Xb",^$*)Q!"lYDG>5]9\mlI<GOY_*Ri[)cY@5Z8H=IjEFLSW;B`SS7:gsY+(u/NGCDW)KI'"MK7A*6%?TF#5bF6`;6g+)J&JZ-^jp0L8q4"EbP8>#!nd_a7@#aN<C2%4bYI'[.=,HHEQ!3I8(Y_H%4U8N)2\pj7s00&.oHlW-pQ<4c+V:V!%!]S/CT1JU$jro;ol9l_Whj)8`Tti&petiqDjA7-($*)7\@:jN4[']ctOJ/CSZG<]:E-:fpammoM$VSZ^cDp/'JRPt1;oOn2WrK5"%"/LYdkWFLDPd*esX(t0I$fS+5Q],KV<qBb&G?W]Y(1p9h"=Mfhbg6fIF'E5-9`^cs$9"e`R2b-mMcUi9;((*lQ-&^2Gl:+91_-\Q%p<:-Xlk:-E-OZ/t,#f`n619UrLp$8;g_F0ZNkE>g9U/VDkfSW+fA)#&EaH!uC<XKr!d+cTqqZuFG.G<iAb2<lXD5?li'`(Xl)qmH%32.6W^EbN%C(p+NjN5iKbV]'^L&=F.YkkO1Z.M6?QET`3c)`6W>"2TJV.*^Cq6aMmZ"FIP95]sCC$C+b]4Grd'ZT2<_7]'^0GgH1%^oXnp)iTk>:q9#Is1h`ngFeM#C^DHHDn?[OS)Of+1?V`8*%SoCfnsELK;a1dh@MIZ#<g55AJ8^bUJ("^4NoqX:.hG8VigrRl1LTN%dFEP"n17!BeaRgKQ=cTG-"&\(4dFi`\p?320<q*MHSjfDr4?-TE\A3PU/XH/Grgn^qD4Nu`'0j]`tQh8@b7nt(B)02$TrCRmN;BZ%Ht6)hJcle^-K]65W=b_NlMqjmMO\/KK,h55aRWF`Wan<_N1e@7(X6">m(sGsk8N%AGB)1hiZ+BhA0h?WTO28OQte]%?F#r?l:M`h%,Vnuu>-8VhG@dC/RU9!q+A>0,A[-*7$C0+8c0d(kmqI5`Bk1'Q2,b-Ir-44)r`R4r<kig?)7T>"B&'N[*P;5L4h0@gm,H'\jo%u>%"J._=4!!U[:Fhe34PoO@BQsLKY(`FM4Yu7_#BEeob2rHPQi3NKrS>Z'F*m`4U%\6dVc`Wc4rS_A?iS[2f7#p8gXggteD&_>YkS1O%s/MJg46J[Qqj73C(I-Tm[2/VmDo1AF`pp(@RN?\IqBk#u^@1K<$/APHb[#W9kMB]mFYrQi;P*[]OfQQ/*T#soN-i+I.XGANI?"2H%SpB_+5.00G]Ap'&g[8hEfNg)Vo$]dH[5%'O?8gWi9D;P8Fk^1bjkeEEGP1ld]@pA2<ummgGic(tkem:&>"PXIodb5rr:7^14kOfL%*cAQib^F#sGGDXNFlkl_0tcMKhMf%HL?hBGQ[U<bbH72\>s377C-CMP%[PmMcL5(hF]S[=[.=$l]C($lpKtM4IenKV>&!ZXZf;:.%fIgGO)Q2%h*HL72Z$C?)Q$]t8Q/3Ja>ci&>em0<FasX&pmut,am685*?oE10\N@nr2g3H,C[UKd(0@lP28YXEB]Inq:GBfSmL,JU%q>/_?oPiJhbnfa43MS`"aB-VW.g:E0FW]6!J*sJ"BAM2\n%#J0meb&N:YaUq]0;1'Ej'.P\H*]M^rV:K]#T"mGI>:$g[7;n'DJ?`%TD@<`b[#YpgtUHF+/5%j;qK&b^mrI5[@M9R?1lIPX"i4*UZlBc1Ve7\\Y_EKki3=8&a^fDgY5do>4ScijiQVUQ$lg-(H5mTjSrQo%jmqBHkKBHb_rKcA$Kcgkoh]^89)abI:HrO1BqMB2Zf@Ms2LTsrZ+oH)q=:k+61*.)!jR6gMJGr"@:?l;`I7V0.^!N[YE^9lpRQnL%2-=Ue>@jp6`35")8.gdXJJ[K[aGJ@ANk62\&?68R`Vlt81e23jf`%b(;WO-eo.f5`i-sOqcb1SoLRu)Xec]'QMW,T$+HfM4lnMK$%$L`G^eUeI7B&[.OG_7u":`k%sD`gq*i2",uK]9U3a=gE=PC'6YQgR)S2JVN>]:*m=U(sA3QM?cd>V3U-=&4,/VX$TblT5RF]/A24%o6IOOgAabqc)4<<[4[u@BWd.pE*q.CZ/DdFGk]rgmV7qOpjrS&jhl:>)G@a?@YZ[].^f)#Sb=hM`.&iu^2ImCR]"K-Q(;>Qq1N1!%)Q:3X:G5P+rMZkPFK`6n=$:R'4;V#-li&+9&<kL$r.oqif=j\-4o<)m3rRPFA&q_o?<Z,d*lTNYU=3aK9f:cRmcrjn(<puNI#fo-%n*qFm7!%j^.qc;Zo>@Lik3p6jU%'B([H5ogpc^0Md.M__gZY2k\qQ=D)-ZR6=&SDdE66+V;c<Pr^BTJh(Aca;moZ7q=3o[P)H^b@%!ZUs(.hKX^;bcYpXiAA&kb"CI!Bkl>63?1P+<XH_V?]mc(ga`fgc@aSc+E_Wee;#?dqPr&rOb/W1h1;>/Fi*j9(>*D:kTO.qMNo9%U=":X2JIlDd2f-a>0AKK[R3-YM)B!Y)-*rPJag2[Zqb\GB(pUKXpt`Emj$i0:8ll@eEd:8UtVRl]*D)egWsPO!2T-'l&FM[gZqU_%1kt/.I>Yq^=$V+?KVsdX$6q:a^9>4h%T_YoJ0+OKp)NOMYmlS9a`nj52K`(C^4L,>k`@,^&ZkjaG$!(f[.9(1dK)e>&Yo8\;''5;%5(6uO\@:cnX?G@bGWrf>#.ID558-!Rl]jd%0ug"P$"Aa@%:\iZoX4*K:s^Tq0Vm`bqk;];`lef"mO+;^`q9>.0o+"W_-M?o<d9ZR%9frF^!4HNZ.pd)7dXL-tH?0Z,oF/XNN)Ee]`4A\%=CB_;?msq%SjRM^SA&YGiIsBRU1K#>*!J&(P^2VkUbs1q@(8g<Z1;<:Uu_`\%R6"Jg[JM\bmM2i>fHh3?bMf1-_)K-iG@OCQ[1Lu&`&FkZf[>_(p>%?_!9Ehln5Hj#C2Jdmf:9dA>MLt:d9=3d`IN0p!#uASS&RL]%^0rLo\HGZ!hD#/+_FGIA=kEK#fI05("'EBlCP3hG;&QY-#uHC@%Y"KliAc:3"$4?1HODfZ_XI2C=b_N1k;,RTr+JSKRUs:^,@&u+%3]Fk)3#M*M,-=NoKEGW$n2[,T@SU-KQrtH+%g=HU&NY7G+>a4MCse$3"[4[DYHg([h-`&@!Gt*"@=EET/"&N4;c:)$;EpAbp"(^n%p*uf*Ire5^p[m&[(>hGcHNJkJ+92?eKLT_d%`p<@k-Ii;9WZt4k?,n8A7HSaKS?r!I$rQpB6ZohP4pW6V6DD<9-OcdE+q4-6Qa$`%L%YGla4$unG9Dks>_Dd,mOk*J#0t4CpAU>(D<itcIt`=\oBb>\h86qG_Z-%BeA$IkGG)<H`A#kgpQmH/WeJ144(k*g,>KD+?A[.u%<.&<oV]-T.RE*i!G1NJ\'%Qp1a[,*l>P$)s\&^YsfUk<upjh=oH-;\d`M.pj4!,#m0aH&ebF"t.:8`;TF.3]q+$'f$(^anf3YU/e%62D>62+Gk&G"U!"LpKjI&I^o*#q+U'PS9k<_g,t861Vb`5'D)E(kKY2@HH4DgtRJHD6/<cT)m<$e^c5V5^\H>h`^+:i>n^Hi*[K8%SKjc1EDMGm>&!Bmo1MdP3Fm#`e:%FChhQ\D!^Rh"A'CWQ^[f^3%-g@>\;91L_s\5"`&i@2.IQSu%u,W6IIH6$:2tR))"1crq_Vfl%!"Cpmp%ZoDE-iBBACPb*PCoYh5;Fl'#d5*4M9i\3>\uh9/FpDOPRp6%kOV2@8FMqr9/i5t$hjf<]bol<Vd:_H?slH<mh-VG`1.pD%p5[p84(fkTb'd9F5.#W3maTT8eBlP.kkXPp;"G9$I!cXJi;G<+6WFM3283`!Z/u;L&19`8-_U)J1]/!C5==pM(M*TbCs2pq+)PIB%;(fs8Hj5,o6O8?b@18V!ET8FNj8GB9OF=e)_6@)A#.gKg67AVd3=a:DD]A`n/3i&6i;P_^`^:$GO+`EhnG!+B2u5pG3J4o4-8<gO%m=%P$pY]6,!"-p=SKHf/+l=3ATac<6[dV$$?]jCb?3+_Ir.r(9_mSsrfh&*T`cj4QAbuX)*bo]ErFu0m[,u03cNhhcgP$O#0MF79%a.T"8hDi@MH4)+DBK&uJ\;t"diIIOi$8u#fDTn?F+J:"6FEE/.L.&@knDuPo,00IZWsnJFE;oqIo)8&Q);IOrr6.Xd^Kqeb-h2TI%mfUT(Igm7h/NB[Z^@a,0)khT^3>DP@h`ZSP&snmqgDGD14$okj.$C\9XF.dt)So5+Eb;F:UiCr[m//)mb1h%piQYN<k9i7*]pNa_%V9S3<cPt=!$q]:m26*acKWRBW!MG&uqAOPcrtZ"BB*o1IoaAP)"oIe0_l`h5LVIBY="QD`&CtS':?rROG812S/W5"7ebB0ZjioJ;%"IQiYAR+/MAb_K)/E?#m[t9O2`i11cq!VV<-6]p#;>a3$OZgq*,#<]@#FZlXojo$D!)+GGI1s\:bsScY&Q*=k`&^8p^An]QEj^_.%*Y^rDob,@bKJHm;L\F#fab"L#a1AD"gIiNE2mddN#XZP-4X3\[4]/Hn./G6mb/>9]`[hO&)]KZCODjqe(h&6-J[N@!oK@$\6hmG\%35%WQX!Za(O=u#+eGB8O'P)UrS+m!_E<P%qOHFCBp+X91c-Am2_p#qRSUZ=bYCTHS45]onir2lQJ,Xb>mlY0@p@j2c(OhA8m9=Pt%2'DZ&Vn0eB,l$.dM9p^kAK/\G4WVEX`_G2,_T?:V^Mu`Ddq4m*l#ikbr+.84SRbl(mh5&2",H<@'<08*4RC3C)(hrMD.ahM6Ti&=%dgSc`I_j[>^;MVCC&[Ui*qkc-KXH^Yi+pZ2TEB@n:^r;pkN"Tca,NMag.Q[uoBS)D\@^(3joo;H'"lm#oGDnQ4[[T`29pDUMBLbS%A(=a]oH?1\POQ2g?Wn=k%CAcupbC!:$3Qk27;SO4HNO@^iSHlMD:0\5"/![<K::HK-R/klhgn)jnqjV[S44A$=T)""0-_5e-Lj`]%*M!tuR]&JaSrnf$mQ:O9%_32;/Fpfs'-THa'lsp+B\,`a-[3#G,q7.6lONt18<J,]NQh(k?g]N'l&sfbP2@MYd7F_SFO998^A_Jl%*IJ7?7s:J-P;K_f>9n?AS<>1!oI3c23ii"ediaWekdrEGMs(/^T>hao6Aqcb8?uh0XBf!0N-J2$+AZG1gA%:l^n1pU";$tfer\AC%1Q]f`_'&9nM<?h\!"2`dgW]1;UqA^?7[h/1SXn/m*L'BZ/Ut*M-Q0CUN8GjkY!M>SCL[%i`HJ6sS8sCj*!'E=/n7c:8Vsj^7Ys)H%@Qb?U5(/OFV_$F9fS?A"[$j"Jp'k(k>as(01Z(fB72%#E\LppKf^(\/Y,eYa/TFT!O"CWAa\UYXDUo,/9'Y(V!r&#<^#:OUf03?M%>PYa2q7fE@<bKe<UumFJq"!Fri(Mro?fsU&G(0jX#dtZp!:pAcj3oETKS[PL#a2j?Fs#[r9+mW]g*ZYe2eqio$PMa6kM=[n@']Jd%aQP.9l4Cm[i6YWi6"G5=1Vt(qE,W['Z4:'Q1BP9?H*%$'./&a?Ju(dHgb/uuOSIKm!pr1;7"Y+Mq=5o//T!Mkdp<stl4JR"+b=>F%>e!@D-QT4%+-?,Z53B&DoUC7.Do?<9jpb7uf>#Z\TQYnQmDc$1ZMC(g'[ZD6q"b<`/9.`9l3;a7bAW3WbTDB!!66U;bD-95'mr%A%(1c_lhcY:/1IT<aKhol-K_Fr0kR)>b3fcP?@o!q,6=4)KaJ7S5qnM_.Lqd9QS#^c7HYnAF^W+]%/bCo-J[u*g1uEnhNZ`o`i)9"'%2XXt4^4Fp3-3ueuG^V#I*MDj@cRZg$lN:)2^kj*?J(32fQ<iFV^4II*`%tW\B$4@bGU%3beip4K7)J@Z/0uQb2L5&8-#>/YkhesE%Hj*h^,hDg_4JCS>Oi/8l%aT*2+-9Z'ZCPH`:r<tk4A:E?">Pe+PI$3P2+563oWlaZp\)W=HK$&OBWNT=M3=N"ps8`dGA3n$bqF'$%d>$[CoOjDhj*B')#^8CS)Pm&]am&SE,.\_(`K/t\/rj/N>#<>#K\rmD9aY=Op;,G\')lc5L5-_"+o=aYjq:tQJ4U]RO..FM(_UC]%8cBPO<V1-?gf4/&Xi)UuBPPY_CMu7=d<L5fJT5JL*(VT\N8>?1fHE:/rC/_)cJ[/A!%\/ph$HBD-N2d5(RGkV5_s1g^\]V$fo&@l%\!nZ[I[u2bC/JUC3=0&rYSAULiDi4s*Q^raZ-`=/'/3BMf]O-drt$W'ds10PnHpUG=mVMi:4D./X>NSaHC)Pd&.NoFF8f.I)Y%^e%?p"2CDMgLbq<pH)m'#$&m6aF>kS/dMoreZRq%at"+Ch2VkVsk%A>BMW!I=;Xn5las8UVH:Y7K:?PotQdYWX3VEfXfdF!-D1"dWK-%j>K<i:5ca%Y^&sK36u#c68[ae="-,fMpm'E51%+QOG!K#<^`_[`0[>tSaV]1a8GT9OgtVNls>Jn%M[]P5CuFE+-Db4$1Ks,YI^Ok%a6\$o*PSjN&j0B'3`AQsJV"@4Km#-,]Kna'pc#A&3?o\K)tGR:+Lq[H?f$=[ej*GT+LIPc]#S.c2#AaNWAVb0OKe>4%<_8d>=i]Y%Z+ie\>,-X#H2dq>oAnMJn%Jt[gA73GN!YZT5*CXS7um6KGi:)QT?2;G-.VQ:&_^s;>;@b$@X0T1R$6HYI]b`Cb(j]-N=C>-`+]:b%4SID=838fi4WdA?)iGU.@*dEW$7r_0b=MLTaisl+S7+,oOr:u'Dn\hA=6h++lnPTZ/+VO.bgmGH=%niq%dTL60j<M3;8+lNST%!6%`aL'#E^TusFjLNp=QkpO)Bpa-A5?CFn2H3c[G"a4QS@G3'ZM>_IKo\p`jsY-eFXa[hZ@'?j:(7,:g*mGqgdGR"9lJ+SW&]PG!m\"%\$n,%%m^d<B^^O4i;j9A+AZX0TYM7$BU`ih-)7f".lKc'a=J6=Of]q*o!IT4e2)f>[S.s->ak?jRrK?-0<[Z:+Za=Ie`3KK7MLs8%Ia&gYBmC:Yo^J?B8NbgP8Ruh.f`&kfSK>A%*r8#TeCrfaG0AANkl(-hOFqJfH1Ibb^-LnkiDMi?,ViNkUmT@l3"3#2Z1I@&p68&M%Zm=Te`^mT6?%h0Sn^qMFr=N_&;=m\A.l,&l#tqrJ$Tq,LC]Jl!n1r[865ZaTl/\$b3_ot'3r/'5cmc<7G:W\O/-#?7a6H2No>(p!%V28Qs,5N(FRuNuk=Z:&.5JW\Z6`VjOF!V@%>scIm#:[D-61IT5(o'*Dc<gVk5%T!m!C/#d'5K7_l8;!7oE#Q3%XA6PEpcZM8qT@P%N-\'bjIZ``?AAk*@QPnZk7W7!6$+L]d;C(^q)<#aac0HnL\^h=lkARNC\[7_o^%\.q`r<V"h&YM]E@^^2Zp\pD#2oLG>`Q&WVSbu%]in-$hR."Sg@)dg>GQ22YP"DRK.Y<j1j&@?+;k!,4&8`@F-+W;Z[gtTgbIJ^%Agg2Rdh2mqK8b,&9j'I0dg>0pWctGZO%ZNNiG!q%00OmbDSf\m5`.LojbZU;[h/0Z\:SM_d`?BHhse8?"-`9#!;>_56G7f%TM'`5qZIbkbDgYc^lJcS1beY@!ImCU(K%D[#L[RF84#pp%a;Y8,gi^1#&r@$JC2H@X'^']V9eld[c.g[h(f\s<:!p:J.&PM-[Pc-5a!&h:Bt("9Opsse6^[6T5-5-'hMLSNblcgc&nX3*eITN7%IQnG:Hq'@s'_1XG5T=7kV,YPK`f-.peef0P#?PDi^MYu,'DV!fH/^,Teh1S0*M#9H(-=dDp$mGlYG@G))Akf!("d8AD;+jqCR\1+%i"+SPqHoR_%s;@F^+[1hTu8AI'36R(k8A:_V":+t`'^J\8c8Qr8TF.!9QCqNJ!V5`)*uhJL[?+Q,A>DUFb2QFQSVf*+U;\MBA!eG%BYl>$-5N'.460k^82uF5GTaY/kEqOb#:4=a]&.:ZOAA*r,&jG'J%!eMmu\XB)JAU.1r13SYL/HGKtc+<a^#;<b(P,IXb)-7m7YmD%7Za9AioinJo3J0e.57P,n,4/d9]C<g$0bhLR-U^VU/bU7Ra^Jh-K.f.+-q0#D!l3(nD\<7?]M>Gk-#XD41SqiL`@9%?=S!WB&WDQ%n?80T`oQbL?V&D:4U??-#qrfU\W`!,8B1+\lQoT71OTRQpu-spgIm9>_&4OMo/tZ6'+<Y4LD4826i)6S8lkN$1%lc'iNdm:e&:nO%^;=K4T1:pT#06Y!NTsoHK`p_#919Nf>Xj<-BGmD<rKmRJgB?7Aq!/J:d<EZO\@)$YhY;X"Oe7clA*C'!kj9+dqHJsFDdsl]@7":_%QigFHIK<=="<M9KPgTDk7hH;+m1neZ[)gO/0Aumq#/7jj&GM;(n._Yp!)@3&$8lNJ/cOTrb!Q_4"NZE;]3,PKJ-@;<^>0pJQ-p'-%N.16$S)bI,RmI^(1=TN8_&-s^#T03j3kQa"R5u5ZnYsGXl/"H-SkTL/FX[8k2#j/#J7mNhAMPF[Yj.DT&N1JOC;k:$1Di,3mgWU;%f^ErfW6rr>ap+V^m%@'cq1mK]mW?RslB:$L40I*EqX9Wm<_L1sQhV?mRepX.HmCT-Jt/BeKO><]dQqc>-`"6\':\q+&fkEP"<4'r%pN`(1"e@rb".g_^T.,fikZm1e%O>@)]l.;h"-h.G/8kV^/P0*<P[1n\7=>?FIsK(>h.gg,*r0`V3=O(,F7S4;;<]7]6=5X5ZhChD%/!:k[JfsOP5sGs!I>s"328J?oRtq'RqTlg6*QQo0UuEj"GTN[V>1Rl[[;7n@+'V3Pjs?FUKU^$7<iU3u;fYoP\_3%e-6''VnCh*>%diio!bD(V!HR8.(OhQWPOqG+AAFHnp_B/<gkElu^nX@qZnc@g0/F3!ifMurZ^*79-cE\sJ?M7#L`P,VAZ.MnMJde=ffi?hl,GXE2%]bnU6VH@AAJ>_!OOEVm7AEn8Wd`Z"F`t3N'+G6lBke*#b%OAG7'2G.YS,)PK9/;<fQ&tGq?qdf1c#^CU@I3k6DJC9Mp3f9S&%S$9%9#(:Co?EgapfVJ'Rq0R9O:Ib$BS.DXPdl-bS8Z5H-ICa9;9fBO"Ggs@;NgL9eN8VBpk2XoL49Gddj35o->C+AI.o'/)!:>PcIa'1%6o.BU^h>o#&hj#kLNVCuQ3d9M:-^<U>34/E79)DeerSXPSTuZM"dRQqhL/9u5EP`KKNu1-!d>pE]^q7$.<a@sf^72rcGBT>O1AF\%n!.;+EEF]I_]D]TC`[kN5U+oG\G$[Q#8U\;E*MZkD-qmtf64!U%M_2VB$r[bLg8k0]LIO$J>56'\+AYL6?p92r:M%8db-F2W!Nn#%HmerPkgr3E\b9C03HDrrb:T]AfK#+8d3P]]S_2e`c5o&"?SWs$`/7pmV=1?;n<370-2tZ1VBK9s=95&$M'NHj)A,P)jNS6gNEu(i%3tMOS9>LD54(PVph`(*'o]u7pT#gQDO48o+jR=#^5/0'F3QUrKGoikT?3WXD83Grsn/l<+?[AT9VrPjR!e(tpj4Ad*q[`@dHl;MR%LS'V)3;*<jcGaA@e%NZBSlteiV=]?]%@OksT072JAbWKCZ22Hgc>r[ZBE)hPBB;5LGPh`,Kjbsf6!WLNm9&r#MuD+WbKn^+s%8FH%Q2BJ1FS#.`rdXJ<<EH[95@!#&[>1*(43-dco)/"W]5;'Bo7NU?s1,s12AH*DS`slqgmn$#0CtosHO>e%.#K5;)-btT3IZ*oGj9D.%p(*TprdMM0hQqHUG]7=0AOe>:4bH*b)mA]64d07KO8H\OJ)'qhrYP2X])U7ZI;r>^?#TYirF=,Y*4];RkXg(9HJZ@HHM2T(q;0@@%Hr'1\4i"P`n\$din#^fjGMU`^l^mcTpS@8hkBtlCjh'@ehfV`iY'7U(S^Y:<T']hXAFI+mHIk1-]C)*DohP/YFH=BaiXtJW[YZDh%6m[OsW:[tf4]5$m9G<sC4h+[M\Hnc*6Ubt*URXTI9=(SBaL*79clKFg@u^\PoVjt';uSaF9V`%&PbWL`&Qd6fXX$a2,U._h*]YQk%FGTRO>Rt^?XQ8.X2jKX<Mb6-:;\j(X)M9ht'3tSn3c[9#l+R`)Z/^?oY:'gHpTi.'cH1<W+<F%2b/3*c>VoR,0up@N:/TP_Z/&?!%7\u'8b\:J*K5t(*KH)82Y&]b]#bP=hZ49uOH7+aOfmSFCQ-*hjF<tmfQCdg9NsatOA!%QaPFUYI8#[Pa`;#UD5+8#)-X,*c90&/l%0@T)\'(QtO67d5e36j.a_p`-aP"\Wb6s<T,;EKr'O1$;,&rt)p*eU!PVSk&!l(t=C=^c2>aAV.(W?+7FR)muHh+H!,Vd,@_b`76L%+tr%\mZ0h0SD[d.oMit4m#E-MaAIqN.E"HRH'*b2P4e.%mWNX/:MW>-[3M3_`MmRA7B6cGZcluL6uojb?^ppSWG1\N-<1b:C4/*;%([2N+al9\VY@BLn1;o#.2fTbi#B4"W]K*;[mV@I'<e)uEZFY<Vc][BdF]E=58RcQb-bAK887)u+_^)KA2RfZp7&C#_d^^D-S&@&a%b^[jX0t4._1HWF4YK`o1Wr@7?eB("3RrXM]K&c,OSX`T=n\l!jToR@*SFOUSWs/ms\?@.b9Gm]d[4"fG',$\t][<rHB8:fUiKI^P%"$^$cQ,kCkN+HTk<2P5<:FCA9]\CPUgei3_g1b>]AYP?>kr+J5X+![Xd%d=7chJ0c(8u[RD)aKc=%t;[^r\<UJ0d&5T3%kje13p"%l:eH`F$&nGLp-<6.K7OB!qr#3Mpf"SmLUrRG$1p0kTt,W.8$8X;WcW"=`a`^Q'?u;];brsAS()HfO;me`Y'S+cc('H2!laO8ckKu%b`:pUSa-@L-Y+H%nWiUd=qhfVRUI_CkAIueEM[7>S5XBI`%q*eT5uO?&8PqtJhmW6hZH5\6"-3.[8["_dXPV5MZV^Q+.B2<3LaBC%D5K+H0a^"iN[:hd,F=VfP/pB<#:ULK5XVR9/aTu6`*(ZLSEqZPi7)3K-k\#r^d?PKSlk?V<_csh<:o,!gs-V!%gZacMR(TMn7"K%%3ORnB;(/HG36XHCX^*D;iL\='b!OsVKjN>H(?2D6JP9VZ9NgS)Q;"`G0Zq6"fL_J&>\/XGTQA)H%a<Y\8G"HV5#`g@0TjO4`ZFq&%IQX$@?*U5s[7^1D?BH_(UcMd$4^`4hZ#`/2BJS[_$TiVe[eW3KjM8pbQLCt9*s2$I[HWrIV4dq)RfY*LI,bW%-cS#>+KTed@,99:%lQ*1OZE&&V.aQX*>'9[Jh1J_n*iiK=:t<-IWn'=0[I/%7FUqEQF-Pt^]fHCtnl2/i<8DV$+/6n6h&i?Eo`;(8O&)m%G\Xpe;a1S;%eX8i,)(*28agp/f0qmNSTRe&[f^fr2U50*%S9iE"9-ZC>U<TAFUmWV`"T1?F-!k,8n"@CmdgbTU7<.[rY4XPZWJ^!KF62,!$aifY%M-?Ts-mN.AS@T692Op,9#HYsh9Qh\S<nhXX'Xs<Jmo@mAAgTK;><c4a;(4$4]U@DHNL^HL-jFf-NB8)Q3s?[\To*T\\48)tjNiM"%A1Q8oW;;RF.PfW)&9jAm8`jceolU#Z\!C`DWD+),:kVD@EE4M4*IX`7n&:c]A\aY21Z2MUl&U*p]7RL\=eQ9-.:>X;:1<paq%-KB%g%OEQ.I'df`=7fK(@7]Pc:tm!/Yn0u:6ETA\7=ZT"ZdC"J+LiVs7>#.lpN:m=Hu_lF!.+D9U@e*@_VYLQmhJ?V]>`>^a6MQnELD:%W`ShZM%AeAP!^QYjnbR<^2oI;A3qWW.,QR2/h9]hAmke[4;kZgXEAq@25;>T)+u&+)PT)&9S)_YBY23QH`/&lCZ[&Um44E(JXTQ5%.D8#c):][=k)f/*U,5q>c[!i(4V(kX@:6Ys=4tUgfltAL,qsF-%'fFngN(>JK,D0eSh"[KR9tO,X;%N,S=7n[E@XK7`2nYNqLr?.%kW,2@>Y22=D@O["Jfh+e10ht,RYh(OkfShlV'%8WNe-irZkR9gH[66N,VTjO$F8E;5#k[eO0\7S@>U\;]^3Ei#kEk;J\.m"7:H%:%-%Qq`7=Vn?dCHMB/';"[(^-N@<Dr%3E$V$aEV!c<3Yb*g08rcu1+#,HEis9u75o6_i<EV@hFTk1OICE=e&$0k>-rW5Wq_XaHTIj8%:W,k6Qo:-r-=NLI5a59(Ac>IsU!*SaKna$!6AGjB8PS*aX9M-4\-W[$G=SoIFjK26(@b55!0n^r_F[1*bL:eZF@uaD[$>`kTi*3[%0`SfpN9>1a?gK9N>sg&,WUPrjMt?u3.@t\rNuM\.O&/-3Rs6?%+TTC'*/u("cd#7h3gkGo.gf`h(9DOu7;3j5ZS'2..L\i4&>lF)%VrFr&)G<e3Td[kGLp!$=70/.KLeR]WVU@g1WOa`?.Zk*)"`]6\;^:J'71@_%8BiSLF/^mKee%eO(s.\]aunGiD$l3n$Da0UQYF/o%L,-'+$c4V2YP(@,\H;$N!^\"LYlH6*;1)`K?,V$hjaAt\?tB`$f-QKI+Ru!Z207`P>?FU%GS=jOmLJOthBVPVU81]&Q&fB,gogE?%qAKD+@e*.WEol&Kb/LQ'G@Y#k51CXs]i:jO1[OR\Ocf`o/pOl"_,?>TEHcJl0j1WO=M_jJP)+RUUm9)A,,^(U^<ThP0n3p&m:'hK%:7>3/MGOT<;.k`(/(3\%6diAC[<?+G@j&4)>F>_iQ+uaU;%gi61\Kh3%DS)J=ZD$!jZ+]FnjiW+1_qs>.l9o4?o`St9UoS]d-MF3%cJkY^21`lf5=r&M9'tr##)Rihe@(/@^8*C:d"q\N:H__fa2m'c9IQW%D./l[ju1La4f3LE2(%HNiYlLW$Or.K8?nO#E&/,^4,*MM%EV1VHWLb-Q9pA@U(^kFaE-=[?&e/PEKuISn3+6t5NYWC`&9B(?Ej'E;gB)NC@S^neaU/;N"_,T%^EVZcKb7;hUGEuk&rD`pq5(09%:%%'\W51NNa!lNu=8;+4Mi<!^XWWE+r[;_I\O(X&A=cO(/K>`Rm>3Ol@;NAXHgP;r+92G`e'aO5M5[YO/kSi[7-'21$Y%8W)/'54%K*!hB-=EQ&P>ujmOcM@bJV"UE9?TA3?<p'tZ!&?n11SZ@3fgPahtbRGk*D:.nMZ6qcrl'sJS@Z00D$[GRtN3Z;'`?U5tQ)e#m(-D%JQLLN]VW8=eYc>(Z=rKjo6itllF&Yr25q=6G9SL<0AU,7_7Zo_$Q7,1C*U9`ilnX&;]G"33*B6VnOeGUPcF,.%&k#1+l(;/$F"n%%GT3J!)0S^_-b?.QUDsK5AgG?B#.Y(5Pji"VR`OGE7AYjO\dCP%ND*RCc[.<_Cdf#92,L(WQA@'r/$^T;(7Vl2UKjh+)E"#\BfltK%9B.Vl_pea=i.Y!M\D*f3;Hp=:?*b,4rPFmN<=i6R%)cjJCW3/Pge<!nJts%,G$#kif^@5,V&"t:,Qr>`2cg!AHbq/M7dBPfeYEgj%YkDTqYuBMUN]d?,A2^<iRA87:Cgu9blpP16pVi_Zb`l.o=ICj9%YAJR_i=1#L`n#^1jP35.s)sA',jn#W`YW!Tf?S^=u%s-.*4&$%JmMuR0Td:X_ueAC\'n4J>iJ[?m*>7:C7/B)Q#R^q1mCVJ!#6:1-k[2.T;$l1-?JBu(Zb[MeG.\34>,ulnCnKjR6[Ie!#dmaR8:1X%BJ,O0eMWj_9LMCX1m6"@\oOa@KtfX:1<+4S27WkT\WFHM`8<mCJ_>N$IKA&R#"%R@@2&ul@k?lF!c&mTK)=%?+/(r."3H)A]HUKm%ppl*aObllE&F1E_.R,X'7pF.l+0^]oY\U&:n4Y&-lBkES/@aeH@p<YEkl^!TBtOo@;;N$sUB>#gKj+tZMkfShFdRLu$T1;D65GaR%aB>LJ*"oK21Ch'Y)eKitJSWiFEgno,6Q+t3F^OudNT(>"j:R9s!rJ*a1c_-kKVBAha?0@0L#6:dKHCte;7Tc'e1rs,P$l7"b)!S-%;r+0AK;-lDr#fTCKF8\TP;sdSU5X>u%(t'[ck%sM*]](N/d5J$[p`fi7e4@\].8?a%B4<N_W2L'As(Y8ZO&lo=g^jG,EIPGQ1#4d%>(EtjTt;JT?f71ab+Ss0'8@MmTnR'WU':^9CF$.W^cY*[>U8c=bN-AFW@Z"/;-Y&pnoqRgP<d1Ffd/A\U_5*rM#sle99$AJ^ffd=%;a8`.@beV)!9".b>JnHgQE!Q@1A2Ih(a\'..\/>UH)X?(9H]%F:<\V1Be0<[DUMX?L'rDR![qCJ)kL5Aej))/?o'Upn"nj"[cPJa%Mb@ic+`?KUd4Q^DUmC4CR%93&HSFhZ3"\PNK\=m`B^?CEHp5rbGT5XnTIpqZ327B)<re^>\-6%q9C3tXDOaU7F<[?``nH=/h@LI]%27QJSM'0+PcHMN38jufOTuBF1UU\A?a,5PRP1N%QM+E),M#h%I)EAgBIRR?F9-P7+kS?bGM\>V,_p!Xqd)W)P:q;`e:qib@krf&T%ToM[2.I!Fn58(hH(5f"7dpe$6;?U!MC02<!5]W2f1nba;^8if48D/E^cg\7,Q7/u`_5rKo'Y,+($3@7hg'=u+7A3=/?q'n=aLk!6%;r0AIk9&_-F=Et6((:O>BMXdi6c4N@0QJP,QNTKJn`h/5J&2f'BFt5\W]2Ze;;9Dp9D,hDWKPk$B#?sL4]CphI?gljMg^E>b;q->%%B'VVUtjVfT=iRfq=-a2'N$LR*JeW#HC2(,(mg"%&BU)[NOfcS?i?6W0*4s]r_mg<@YQ>G$3=HX4Rl9jYniIGc->\jE`KG#s"'Tg%Yhid")&HfL"?,m$`+>3EBLGftQo6gh?CBeY!A^st:_B-.lfisG2s6PcVbjB!]JgQ#j[Z2)(`Lu/X9_]M2<*Y&&/M*S:O<88q4t[/%nC!N#bp1tEK/cGsdu1g1$90r]$:N7k,p@b8d\>G>+#a9C(tjN2[:$]ZWeRd!=J7@Pa>L!"HY8dIOGgEj!`c>#&938!-d/M'+Pi8H%ZRk60<4:R4bl]894;%0u;*1#+-7N1g1*\_n"Ak"EeT"">L9M6_;7Tig_GE6[;&WUf%"5EBN<N0'!jJT;#^cu#P^,BF4nir2m@[6(%_M][[9P0/+:Pirs1ZT<lA`lH;K<THB4B>%%6C()>PQsP@Mj$g3+W#`-ZtJGUWPs1Q]bHNp2aPO-]Al5C6Ri3],D&!&(Aum>-%Sgk%`uKs!fFgsuO=r"TMTE4%Q.R6K:Lm:d(3.r"PK72`;-s#soMe]7XtX?(h[^/?+UlNOTl-\i&mhCtLDIRg.q>ssUn_XNAa9"-6oNrj%:8umuaSBO9"+2,Gm\4\5=ikG&<CO!8?lTU^qU/"fZ$c\&N!4?E$]u)6(K%r@7RXfVI\Hah#/Q/k%-ki$7]>l9,EY=]Z:F24!s1%F%!/7;TR3;'h/\2iW<<0RTGSTP_ggh$CbUi77Ai59W*JoqYLlSj@,&uOU<Pt,4LTN?r/Kj>3@#GPjJQidl%?b@iU(2qM@9ZmDJXNE,%'Bl69N/"!Z_XaeDPu4^>Pc-d1E?nDdd`5&oD-bYfV6?T06pXEb>U6dNBF`75T9eroBW=+aU'aQ$nZlcRJ.g]1GBbH5[Donu6`V@$%Alc8CoKt#r<Y0t3.T%/2>[>0mnL:7W9h<(`k.*X:aC&Fr8eXr3@-B+\Y%U3P`?OtC&/\&3Xk[Bg1or\@"PnH0JM)hmil&(-V*-1h%@.k<pU+caF@!P+RmqUc:O"*^I'"EJWdnGrl0a#[V4d.uN$U,@rU;C#J$@r*q0o10oapHM6=9uLD.,]rN8d.\`Gn4X%e/h8g21/](%=VK4(U=c>JE8a7+VcSsdh\(9N"_'i_hgnOZ;B<>ph$R*Sc4^Xh'O=F7l*I$G@_>I2.LR(2AsNkHbfl6E7eCt6OR1[a2>FggmUSep%E(>"V7K9SM6VWnBQ/Q5TWaa.'@MpJXH,X)0!Cg0*8^sG(]!-2sSW=/^:&d3D1)iP)akhSBL!S!KJ\]&&MlM?66A!WOD@<#Jha4cn%)!B12;aS"$PS4gB*_Y]qEHU7iqnbl)?0IF!Q)]n$eEcnJ[TlC7$B5J',UKq66jeYB&F?Ubc@jOVK[=X,JqfQ)i+6#D(L^#U__<r$%<g!t)QI&-e!6U^mdigkRr`jji[pHAYI\Ya+>-%-t\RLC,[S'Y$?jXap8jt_na<F[?;9Xlk[c`7toNc3*G,RJs,Yu@(@D#Zp0TWS*%[,n(HKgj3Q82pCdr(+Ohk[X',#0YR0Vr2ZdQ/j?H'aH&'p!lU;qoBUBkG-0J_cuW.0K'I\.jtb*SMD<i>npcnhDLHAZ5#iloa3FO%4n[;H^6[H40J4o+--FI+XS.nSh$.:s^97B'AMeKQ/HAoN2Ye)]*RQ'NXNZ%t8CKhU26=Nfjp@jGKS?6O59s(3a9&!OP*`a\eAbX3%IV`UReEouA/J)_:W\p&($sE%]E*[!hR"hnR&>W@-%0N'?p4]6(Xk7*pbaut#@UOad%u'Dp-XTZpZ=eY@,Ei'Hqts-2?4"*5G^*$,%Y/ii.0[OXWa>.-LBjGjjVK3sY<!)Z@"c%(fE9FTA8`aiQ_X\lKRXdseF;c!cPD4P,Vu()^l6,kn&!>Xo@FORQ9A=rp,^AC&GAJ3-%]X+RV$;sOj73RM1js)uBc!oG::o.f:Q9:@1Z+h4bEECY#@VJkom8Q00<)Z^<(>]6?M4tbI.Kc#09FtFo&OEGM?)<<aC#u@!*&ssA%.XICr=',Ku.;XK1'Nu7fb?^:)=JVl&VH.bH"GVd(9Y<q*]tgJ1q84Da[&:9W/hX?uE>/bV[ZlTZBZete&J9)I)QutSd6#a&Okl56%$g*N;F1F".Q"aXp7\&0KRtno(OI_GWVEu!%Bgg/oFAD,-V^u?pMITNKD?KE]TuFE886[3\@U!?\bY)76JY..F]Jt9!Gf^TE/Q"RW%bmEgoA`,@8`$L>$Ggt5O2CHQM:.8!9h]eV\VoM0$8Q_S]bi)C<8&<-';3\>F/`^8U?9$>ZV&F*&$D**9"BZ6pgBNshKnl%QLgV9_%bjp$YV-cl?h3t0N1gS';OU@j6Q\d@QGt=0HRJNIGQ7_0^X"`FCcilIalsl/>BrWp#k2B=K]"+D@QE(<:f1SpiWa!`<)fVAHe>I0'%\`]kWfgooKA^NVX^=3mS]e0Y7dq*nYP_+65E%\H,_?bu["a&:D=/O,m=j3@hP9fl(cke1p+uqJ.mnbt/Q'u8m:aF?!0e(UP'_?+p%6Kq?LV60hJ8>HSk^\83+:]LYY;nfX.dZB.e2`7rSa`F9`#GFK)0J,D//<hIk#q:bjbVL?V%Xh.cJ121)Ql6nlnM^b?pt4g'DhI]R%8ZWgG8j.Fl]Dj?/<pfTg^,'iE18AM*JJAN'*dYZ>B\YK;*f's/jLN.5bb2+U:LNMqDMqWuDBoTcgg&h#JnhtlRQe?Zm,+d.-r1a*%!LB.A=E9H-H/r$6n:W;j50nQskhsBQ-cl\S5Y$:PIc<rOaR;8c;DmXdlDWq7_n^`_*Rnh^geEbN[L2/"TE)dY>V$_^7$paRn?F8b%-`*`L]G&P\aq;1-:[M^5g=Ao0d5:&e)0?t9g6HU-%9.W6_c<+V1UO22T<JSqQc>=95-;Xm"XAj*((2QfBgDI@0[hV.VA)IeKGN+(%<@6?m$W;3[X4iSZ<LJGq8gC$3Q$Wm;gGK%rRED)k)Im>?2^/?M_F@*$1pC!,>%tNm2[<\h\#7YcGHr()^a&9o@dQQQALYf73i1n9%""-B;/Z5Xr^;[mP2n>cbc:O[+r1C"9CZIhs)JQ&e0`chr^.W0V6V($)&f"p5HC-(gTEE+(U3+qu`[V1$;XG[;dMaO`cu>idY+3l9%Oqii2(**23*,5s/WN!nYHKbb9d-nUipI+KN^JWr9R%s1:I$$tojU#3_CQ`mNTW[i%V"@-Zc_Q+\bE6RP.MTa!m[+*lf93?$2o"9&%(urm[OI0nkk:`dCXAk9nnp6S^`j&'_Y(`!i@H$0>DTR@5piBZ_&s\iMLmn/FU_:c#B=8Kk2$")Y-Kl,%0U<OjY@:/)=<V%;.,`6a%cB(BKh-3odFdi,QIV(Af"d0e?7&8,:mm`n?-P&IDT2-2g<Rc)tNTX)1?SmukeHG'`E"';$WbE*868uM;5\+%Hg5Bc#CD$Fh+E@?K%]9];p#o77_8W`^bLIRDif9*&OpHuk3&Vih,XHM/#QP(X!O1Q*-$a$GA@c]bifP6PE5,!NR)_-hQji67!CWqT/5,$=-[cKiUl]`S)%J]F6kKnJC+:J.Xe$=olW1Gt'.n-h?6b\\g](5.e7![&%!Q6J#/3iobFPbI!/)&D?U6IFkn,^Dp\Pu,pFAN=@(3+6!\DF9G<-'(HC%q`LI%Lq_M9o?@U]%sU85qCKCU6UYT=0H15W9$4SG97h[$d97fh73TOpQut<Y$B,HF7=LM0(5BP*&SWs*<f!nLD"5?$&CX3CTDaSS%d"W1VGQ@$]SQ%HI$V3WkO;!1r<oLR1;,^[eg6TZ:5inC+OA,h_UnZ:UKT`tcTCX<T6'f7M(a!/`PJCR)f!OGjje%DV<].CYLLJNi%l/gmbn_qd4iT\1qroN=L]kbT^U_qV<^!%rs;))h]T!JLh^\N5>Du>ZC2oFT%GN&&K.ia#)WUc[FWH)tpS\0kUhF/f-7OKkWLu+aJ%H8"^Bg^/%B[hInA-d6M?'B]>g%^h5,S;Y-ZcGdc9RtX%$mL"Bt(&GEjoPmsr6_26/)G&Iq+C3e";ZW)G])j=o=TO^)2/4c3h5jn&%E`]m6>4%Kaoj9?>rAhXNj=\4*0#-<lo*atANrCgiN\9bUX;l\0=#p1CY&a=+:s\"/e:5UQ55AR3&\d!VEOTZADUV"![qXjj\nU0`%hT^[K:21htEd-0^h-iO_mpSEspMOjg3VbnOETDUnqi)QL)i<Aus&TlGIug[WVtb2#`H-'D(/K4"(=1f>4D"JtGlG/_cbaGqEF6Q(%h7eL,q[2c"eGL\2WO]MhX'5MfZDn^b4*A]XSN:sVF`+TckMk@C,KimNN\%q,ZMa.3o)H*Bb=-L<aW)(4&mJA)j;P3uR(IH/-h*X8%Fn.8OkEK,4DCAc8IDi8We>rc&_XLT$JVnI6bE(LV#D-RU9(A7_\eP1`]g!>&4Lm!#q&`\Ro<&Sm>ohjQHQD%&HT+a93k7<QlTae?%XLk7fr[gX\Yt=*(#BcQl*Ro(Q:riT\:rhCC5BdA3r60^V(S]b<`0:%RW-D5"`Iu6aa;,7sXo+3EX+TDa9#G3]kHc7"gu^.a^E6KW%,Z4#d,heOdh6We==WD^8*LZW"2"?h8:](7aP-D+ac21%65V_PWMu<PTj`dn/Ju#W/^94ms@#FVYSl[=V^B0iPeCh[6WAO[=b&aC6%6tu(18be;#@0-4![C6*f25E<B1>CEHQI/\6G-&$6=8T(.mhHV(4sA$^ddu8"I_kMgZ?$*dWb[hbB;H"2-uI-Sj.ZfB[h9b6a8tf2%`S65$A..>%4/&?V?]Kh#p;LAg]+Wek,;3#<X2iRT_8P)dCuhJ^WHTd&al:__bHSAd=J:@@G+,7/KaFKSF_?e49!>12pKAie1hT*^%>\IGY-9Xs&T.Q4.T<%<Z\Kh-_od+fkZ-V]rV@r9.$l(U3hT#@FQ&[#2QmJkg)(^_ueJ"G<r28k"*g]O,LmV8_F,;nqASO>j:V]B[%)#k8U_SJZD?u0>SHZ1b_:dU+P;2[1alr]XpbX.AL9CW-?G[$0&gU=S,b"NH$<P@%8Oo_4S<LR;COWc5/TIiS"ahBMEX<o@RD2W/N%@S?%tPp8rHSF0!1\@H"P/g'k;,t#a4e0*#.eJ?;Dm9XKaS?B"!-hknMme=@ThDsCPn!Q='qu1`:-gZta:To4P3GNA?iPjOB-U$KQ%KC8%#PO1'V*pRH1.B-_0rSIMC>5>+dD2(1ms)A"+r-C$[=d8JTr9oQUooFHM<ell*ajlIR41VpMolG^]1['ICSDB,4k"q9@JheaW%md/)nUS(;TX*Xh:X&Pn`d=557_.:_0`nO'\dSmh(,8$or_Q0!&41:E)r`&Wl5$)[6q.5f#HSKY]@.JTSrUb4#`Qg^BcUUIshc'CW%LSo15%?Qn0ncQjD7oBu8r?LFLMi[T:59>=3+6n,kqCh#*J,%nr=3rb&',9Y[(>Z_F8?sZOWd\d^e,<e%>o^CZs6*%#(4+iO%smqo%DYY@9jQ8:R2l<ji0oa-_VQopf1a[^@`oP,r-@_W,il3ej5FBIM`\`E/VX_u>`\d[6ct,>S]DqAM!UH<VB3G5Ws/;MIYT:;P%,E>;%GOlmjB)=k;20ZOa;JNg+<3)CT5&$KBV4="(M>2pJC@Yn:"kED'H6q+sPI6:J\`[^n<HCse/?Cb6?*CW(H`gCh2>tNUjjfa5H3MmT%6EX<tbro./aI7IY7[Z,;X&iton#KN)D.*8#a8-tK,oEhTi9ARCa*TtMs89I38i]NCLL9Eg>gqJG[JZ\n)f)BY;)d?5YH45ZFcF7U%BV"Qa]:fJp'R)q9e1'j@K[_I?k.e+3&o[VGpI3s"\SfU'nOT3;Dfi6jWAdbq22])P`9NV7F&-sdnElMs*<3Y[s/<.A+'YYM*5c!Y%\=D:Qm`WeA9[tOF7uR%4bh[;OU+Wh=%nbMp[n\Y>pKXh@G4)mn$ei]9[7]/`-gMJSj4!:Y[DUqP.;T5Cl`.<4.\KOV4/B2hGrn3l%:4YKgA%`M!m`CndmbF!`bM;Vu]g?r8[U,ppQ)*i+h;(tIKO&9`)b'F%Is&p!@0c'3ejId6.BUX3h&"]7(eLuQl;bo$Ph/jW;l@DP%QEL)tHad5^s3n/hXFZk;r6PamMYWqZlBUtY(=XesLKrF[l0"Y==k(b\=gP1O<ibQ'IQF9I9)C?"Fc-'qc0E$U+"!r`!e2VY3[Ob:%X*R56[%DK`r%Xr=$N2];oh,0+)"idbZ,F7-pG]<^YMc%"Y"$MtD6<]0J+d_bQi4ghf.$V&R''NemrjRN/:Uugh^C5#i-&=8;"\%`%15#G!B38[8T73ZaTMA.N;M4gVf>Rsm3`)bI3?rtN^F2%^pXL]PkiSR>a[,'ml_9$@>]3%Ilg4qr%95$m/8qJ.fR8<<<K:@N3:n,s%:6@p2B_Q'J=TJ+%*Stfpo:MZ"RfsP_]p^5^H*UaR7@pS^<`+3JVm%@eID+'da@i)`M?*90jV9WSf6r3=SuYq%dG2&H72Bm0\hCCg%DI*!j(9[o-\gk,/%+Zr;aJu4@DGf#1pB;@qd<[)Th357(0"U4\P[1qucH<`&5X-[caPD.G*^NWq8j'[4CD;'TWHr+s%5l`coVcYG%SPkN-CV=2<N,-+IO7(+n"WuQA[7WWok@t`[j9t:=ICuDXUg;>02p+d6Y?lcOI.hk4-Lnd]0/ABf?`2,D7fU%Q1l:,?IAoe[=1r(,%kh/#Y-J``#$Vn8\CQt?b]fJS0q7^ai:9(]P].?($V<bkf,lOcFHkI<u=+4&r4mE`Se50bd,q)&[Fc'#ln7U*j)+oh#G?p#&qc]m3%V8nX>MG_gV0$@,K;L*JK4nGGSQPcbaKeM8'[7Xfs>b0l@m^ZN_0/<G`$=GVk?'`8/g=.R'$(._k"r$c4V[t2*Z!JkQ"]BK#@03:j%Pf%$SeglQUUXOW_bZd\L(O7]!._Ws[HGqg#>I70$9`SGM"ZSs"F^'Gr+]t9ZS/O8e;hjn0o@ZS+b`Bnp@\11_prOcR8q(6slP0<I%@!;9U5BU/@0Dqfqq'q2sV0MoCktgE6l4j92j[//T*TBRX7_)a,bUDbf?D16MXB0/dU-LSnNN*Sl;f7g2I%>ka)G%&1Eg.@*'ci"E%Y?,mH',9^G*nB1LS^O85N-`H5FWGR0IakHBN<5muN&i7U_&)d%OO@UO18MBY-sbobgamZ,[Ad6s<-KR/?h+mI[8,+JSuYf`P^[d]%p_49=Vt?rPBq$\(YP%(9T.5rg^AKE%=K_]S:1([IVuY=n78S98q_G*DI[rg(N(oj@W4*G^/s7K/<,iWV?)Qhb)ML4P=7o.g-o7p;%nT/hSaXXDoGu](IFC0Apo2t<X?bP:&G*.]%ZcK1b^8Y&n<MR-J$GBbE[9])EeOWo8@^!:&ouatJ:?fLN.plG_jK";WG=>l(@BEK%%($sh+iE$G8^!a*kf4FJR$pqYuYI_cYqZ<u?nF"!nm-Q(/M`d4G<LW#eSQ`?,9']HG<SFKK]ig&cFXkZ<^?a=>"msp@3fD<cVs^W)%bW;#%0me%Xce9_)0!!<]E*][H/GZmM.a[I8l8ge9!@Q])TnR'V=,3)!?DeDfJUi'SB_BL8X3hPHkdhi&m5.i[=XZKaHct5kKl<5h%W)NPYPujmYXZfmcr2i.cY5g34=g%trm3]92P_g?EG'+=3SQ`Y:?(q.1]>jBmW4/g'G$f6UjGnODG8[Z3<HiR5>5*/`AHCA^]W6Bk%ldXeQaZ@srXTh+OqRa0`Y=8\%k-A;&?3uD=W58qe?`+C;\o?J+i`.A0:+]fKfl]/Yc%YAq*\Yu=V]tTs1gN&j3IXg"Qb.B4s-`th%;>carl]qM#C,C&?!3=E1^'$.9eLL^&`jYb"^]nCd'EZi+4`s?t'7d#_$lAtDV];pki,/o(l\=uu9*4EgX]#qdHSXED"hpO$G>kX(%#M"TP[r;$6LVZ,r.M1q>JaR:b>6V,I<J]0LFB=57>>VL9Z!sg&CCr(WXAb*\nP5X$`9*G1?',ut[pDd<Xmabf<FSFq?<q%&UL%M@%JjFNo'3h&!f@>`:n*8FNet.%lU"F*^eYl?H)lDq#.DB@.K5SOe2iAh0T@/-JA8b8T08Q]*egZIBZNTP-796Rb:0D*bmr\s^CY=D&%V3+V&onjuplDmi)g"c9>"d6&.^7R'@XGFXg,0B[dSMJ=XAClNuor7@P-!Mh&DMf`M$gO!M#5?[tR*62F;_hL"?.UNo$k6RACpIr\%W`(nQQC09gY@#n1gl/jf^13MEWX%/1QsKW7[(QEq>/?E#B;]VN%JA)MQ-4Xun+SZGa+&Ek_Tpc)RIcu%PC;'2b2rHPQi3NKrS>Z'%F*mr:Tm#/'Bk@/:o-/Ug^O*DucQ@L\+,rD\YQ*nTCHnHWm;"mJlL!sZf_^0cJ(;cDSb&D9rQG02Mk=hG=pocG2dpW3j*9*[9olo5%I?X(Khfnh/"R`:4k,uFXF76BG3gt7o.8P?jaAq<(%e"Hr`kC/5'tpc8^;g.4cb+F&T3CZ_h/QNND0Ij]m&lXfq.ZJ5g6d%b0:VCp%V0f;W]'ZYlEc:33]6aIm?#?[TWt*Hn]Q.'uo\k3NXe\n`qN\ZIIX0nT*c/B6%l`<Ek!$)u]@#Bb3cgq@(g_2`DarP__f_c_9>;.l%jjm,iY+E0V[3"gc#>=J7kBF,E\uUBY>5A*G?2)%qq_-c*5Q*cfXgEE=g$o/'CmV:8NRMUE%_6VTfXs3%b!"MW8oK^kY#`)Zl`Q7^%jV-+IpISQAG+[W%0H7X)gn!Mt)nY7Q20\_BM_!N9)WAh][./$t-Q(ldpBAgfI/WAZHFW=EAd`hUSC&B!jJumgQ%HcS\rUY!5Bg2L%ZYo,ipY=:(p\j.8-Z8;I>p%'N\Q?/9g]3@a@,s[6h;^Sr]3=0MD>0[rM>P`kci!3@k,pmsmd9?4&(/PpWU"%A@*W9Vg.jWdY52bc%eX1-Pd<)_B).5Si>Z71`o^Rd-M"VF]mHpqr/U:Cpo&Oi;b.]G'M]:Yj.c=Y@jmqBHkKBHb_rKcA$Kh@6pi2XPs'l#W&"7J6BBnjM%puZcp+.lj*ml<DBr+p[U]C`.3m,(.O[AMfb1uG"f^ASZj=1-E,aq41A:.;N./@Np-ZdpN+fL-%A#Y+g/$Zn/bKP>kT>n%R*eHasj%Ib/t9,;t?oIoD"LEf7R*(]bUq5B#EA?BV'P:Yf#dJh*'SnVq/mb,:'h(s6lQG<b)%_22/JENa5l6(g:fO?MGZ*iWUfo&!\=oj&d(%Q`0/j4d<`TpRbh47J4`-brUj3MU4+OI*6$&(1+MOVn@3%oqAedSHelFRVSbq][pHVJ#/Fm;l?a$(J[mc=%"dQYA1dRE*#QBqs>bT%[E0P=5m?]IiOc%J-/O'T_\bJ3gAJZ[HPp,K5EC'H2`DSudq@+Oc7l#@_QZ'Ae6Lh-(T>E(Ph-__f3I=9T"'9AM_a(1rt-!%d:aMK%6q*bchkJ&\I:4OpL2)Z%jJt<p/T*,#@MTa,l8,<9)Xe;_Fn-NAjuP`@8!iH6pl9]q3I&]31L/3#@2'gTGN.3#p_!JYEXHT0+/M$^%H9M7EoM/-2=&V=N/cI?O<-nU]Z>nmR<<'b;_.(-4^@pJHenE"P1O$52Sf55V:;5it'X?_`;`esaYq[9qB;\!\O5GPP^c<3eaAWl>%_,Cr$=)JJV:/H0+mQI]F"Jt+b=t=SWD[nkbfU<"?I!^oX]FQb30h%hN,5?fSZsKY+=s8cFa6BVTEXSr8&5R(N9j1[h=_qsuI]`dT%e(cJ-]jB3h!s@rf#l1\<X*,.FqnT21p*f4oJJ7);1YNcJD7i>eA,#$W\l0`2TfK?L@^5G<&0Emj.H@eP85-P^CG231(\oSs8%uMs%a1G\pK4J:DSk"B.h:7:a@+tlhU^:3-ms^5O<HK[lI%n)l5gaAc.">]j`u(_8hj=N6mCEmF&,.lO:[ce!I<G$8dDN_Q3bU[rTX6(4%/b-#1/\ZqQepRc3)W^t=F<#ir1jd_s\Ui0,`.H%F*hYFRYZiV;9i&S5mh)FR-\)4?pC,?dX"@K00-!f,/qS_I@D%q(.k?N[\1-2@%9`#cfjW!&t.#skI(p+s/OU"C`N4>CQ,"@,>O.DfJ`a_7B=%Os/5&>hZS;9%$-dAc:5Gm#FU=B=[AE%tsCt($2k*Q!`bc/#d,28(O%jqS,,RPE.&gBA@ChHg;7$MRQ&%<2B;PIP[l>D=>*X-XqH0[C`3@f^u+=Qe-l9Z]/Y^adGfL&bcZ#fAmm3o:hp`UJ'O/GO4E&/7)R%,PF8$ma0#50>Jdea"M?rBXi;*!D$#]h&\5m:_E#@`or'tm0H^u$p],lK0)`h#.PQVk<2A3Pt?^L!5'.4kL3MVF__ICX/#<\5cHq6%CJOtcL;8m&qCo:l7qQ.0f#GECN(+r*%JVd(n'5l#PD=?sWkOquR<5UHKplb[,-:T!Vl"c9Igp/_/bHFu^rc?0!FA*/[+=/ugeqrP%qZPBd\t+;1`OnGs`c4@JML3XDBmk>_Ns$qXrrRNSX0T8]ipZuhAeRW*iB(+Cn.0q0NC%ssg=X8.G`V@^i\,-+EZAT\?b+ds5-sl_%kgqN7mL@u(rVB1eB2V_/(/)CE\^`0aZ-^+tAEd/IoQB"N$f)_@9"FOcS8Y=f40pp(fZDE$0))TV.%Q^'kH@Vn3cEiSDm$W^hH@l'%mIA+"N:4tphRkF@%D:NmJ7sm%R,1uc'KpD]]n<rOI,P"N=d[633)e:o^ePBfY8GhFElP=^@S0+[L$FV)":F?Pn[bWg.!6TV9.LL>%pU0b#Xinb@/1(`tf3[Rq*i*^a%J9Z/R#\P^?9nbS=TnZj0inbOTQ^DBgHb!C$%7es;@LoECO_s`@`H`fF[P6`$h4$W9]Qd6iijMW%%LN#tIstp)5Ouf_gkQo!Q[gF>iMfLjD]armKEKTq:;5g(a6/EOmKL0t1Nj-;P%0T8+5Hq+GMtnY?2$B?BPR,`o)b'DMUA$jN,utg%2Y=d/^H4jn5m_a!Ih\1?N`j&;KA!bR?SKlcELq+VAtfe_AsE!A_'2Orq&tXaaSiMf<W]GZ=*<^oX7t[M&_0rN5I7ubDkVuUO$Mdd%UG)rAIu,AL>&`ft4U[?O56.04!<t[fX1t%\YFtn5![51S"+Xun%N,1Y'=3OA8KQhN!3[J2,`E+Pd(GE$5CkETcTI6Sj#mp-c2'BG%%a>U&)Z@s0BQeX\!8(]T!V_->cQP(c6M5aPFHhC"+7R"l-dp-T,i1@DMDgjr1\/9clad:&=GHYL#jVa*f6@aQcjRR9#Eo+E/@Y*X%5Qp+;o^s.UIQu.R3rLqMRn5-b0AuJ!N2,f:j6n-NB2]X3i-sQ9*8uY2P4:[>on6/^#u9,WfNC\UZ0K>Wr.5Fa!&[[DaU4,>VGn92%2:8:r)[&,GZF,<T[g<s5`kttkJ3SVa&)`W>LNi$V^,l%WD7b9*FjQ_u".m7<,iAVZOPI>'!3c1M]3'$jmM.QY!).n:#eEZ6>68\P%pri+3W/dNC[MH+>rVgO7IsK5*[e>g&#WAs\O&.?Ff?K75BCV^gi!f?h`eg0CUJj9okd*'UH"5>pZdoc_p2C/%%`[^Jgb&L$9E/W3%&c=5HIcCeoioPo!q=bDLajR@rE%W@4eJ.B$-^O3NAFNfhq%i;d"3erX@I+8-Gn]MR^_=mF.k=`BeP0rg(Vu,18$_dE_5C!oGHIV;%T-,D+R"e&$rWXT(7i^j<1e%JL4Nn-[XOWbpE'GP\f(b&TL3e=M-62)]&VE4pe6M;cZ8Do9^'GYGIgi4Yq;.0d>G8Nm\/0'sn)t=Q%N,*c0g;82GA/ing93da=\KQr8\@+;=1AW-Nns,<R&8;8_Kt$>of].`@9+.tNK.pG&^Af?`qF##l"'@".q[?g$!DMP[pAH-ZgEI)9%J5Mc+P?*F+K5!CH#l.g0Tk&@2palXJVhtNR/L8(%PZ?Gp&,'<(2,:Z"_7A5aiA7"i%P*cOF=/ADq\e"&*4PZa%&XqdD/T\mO#?mU%)6Q`(FcOMoR6pV6SUbpIAQcc@\Ch<2]9c9k3hpZ"/%alPY`cJdJa<g8oHqj>:pKg"K=gsmpDE)h_e4;J9.gkn06XS'4b&&!fHFQY%-k`/9p%05J(/\d!iSDe__kl>c53&%Icrs'rBG1qgBVP2/+h6,`iJf9QH;BN-CJE33i!<W*n%sNfA_]/i/og$o0]=HsGX>*/FUeWd%'UXT0#?SB+RqN7Y-8u?j@X"Fa*UnL_0($h0`eJIOAK5+Q42npm=N$TF0+E5L=s.W*"J'g-*jWBK"N3C_7]`r;)[B/loKZX)6$/c,%+$$^`fg;1(38q&*!*144hPj:+fB7Xo[sY)JDP9dRRs[aS0A+`>VbR$aIgpkr/N@+jH#-2QgDY!meH)sLQ<;V6d*CsYhsX<q1q"Ru%[SSTN"e^DbB4MK(U4f2_RLKgPC#Lb?7gZC^Ks,:PLC+N@-6s43A.!$<;Obut1D>Fr`(MJlhjad&9Tal^a/b<njpX:b#5<7`7[&'n%6S\<4c.\_)gd3oJRl%\\l!UWMh-Uu_WEO6J*r9m[P^U-%<IlqPo$SF&!e#k.8I,@i6"lmr?sd:dSiYhFk!7Z[>S2O(50)Q./(k\4%30iX;=B]1Amtef_ZBD]8;+3aY+E&Q=D%"Hg-cdb$BUah5>CQ=$[n*%dAFXR)hdZ!Q2Rut]6&1bp+'P>]MdM)lI1(Ioql&3H.?G_Z%Dh)fN(Dr3/UL4bp',0:pZ5q\J";`[^C;P=ekT^81_='!I[,7I!=3#p:g?7ChY5kUjE9i(mBUoBjTq]g<Du@Da&VnRkB`?9_.')F6%rmtQ26b3Su$;#W[,euc.B_r(ZqcH`(g1TKoT9.4&jfD7)D&C&Y3+drAVIe-5-G>slfW'?b,#nE+^Q-`\p&TOc@P]`WaL](aKgpX%%$Y4B=2Pl\`pB7>nR.!>o:LIpo@Wb^1pa]X!6Zcr>!*fas?K#*P1]XPKbk\a+>M&\rg*8R$!a%%%>IGlcNt4Z`OIadE"TBEg_>k2S%qsm*Dm7u[@NJBn!/L8'@MDqck-FiqgXBj@C?h5#bMi^3q/NE&%9'?7UjZ`+m%Mn:J\F!gY?mH'3Qf?g%rQarK!Z]!>OQ?oKkclg5%XUXXM"lAPq\C+/8ZZU0ZXS%9+&uB:/e&k<olol+^6FpfnG>DJ\gle</SKu6WT[lP@YM[GBg)Ur3g`Zgj$lAX=aVH0A/]J&Y9Hh?l%`+qgRV"cs\bd^_AKJ,kVl\oh%IgiS0.^FcRHLdVo$#5.nN,O-2<m'%l&iUMQ35.b07_(RO-NSkXa()#7>0ib8NdiFn]0Wn'(`qi!%\Flm+XkZJBh&<Pp&C,)6[,!ConFg?/\KSJgDo?TId?Y5$[1W8F=V?i?I<LltO>.A=he'l+[GTD)N;A(1QFsg&VSa1/(MFi!\&QXC%['Ij<D)%%kU@lrQZub79DLDZ7'#<Is&7TD&mi?Cj=V1lA]I*0`ha4$MGiTaT=`WTT=\,_3AbMa["SN1<OV0*L-)B@Z>W!9)SSp[m%8+hLaT"tF9ObPfSa*o,f@$6eo?CL$;(TtPXPOto"8N[(%Oln^g:Lt1Pn!:&`P994u\C6T?`m`95(-8aL#^mDX_R@5Y21[+3JqG$'%OL,$0VrWSk1k?sGO1k_qb1.WV&;0oR!W0SD,]F1KB7pEVd0u$FF:l7&g5EGq-A^JlEH`7+Y=WWp3P81ENnieI"Y4t?]!'Qf6<F83%O>l$RBQTk[dhKsr4d,E(^E+OTQQVgS$^&DZK"E^.OQu3X1,U]c5=[D/QaH[X]eH8(G8<c1BCec/$Mbr\clopGmcBosa=nM3`YDZi%,ii]-^1@L*[m3F,)c56,LhdHa2UbIrphPFu?Nhmd#5J[*GTO-CDZ4O;a_bS^[n0b=1pA@r?[up`r#.6F[pU.^5Eh9c5m#Y.&ejEK%]flHQ4QYia3Dd%-@"'D24,nb`cG`_`cNR?j&hMDU<Cb[:0Wh^e_[hSg9jjI2*ZGH##:I1IK?8CK1#j<;g,^1,,o^A4H%.+8>2Y#h%XQDl*`n0G!=%W%!I0?<.L4+;8/f^V=H33etM7Ll>+]E>L$d:HMQY*NrNk!_$N'p@j8AMnKR\:fR?1Lu_"::^e8LkYX-BYuB)lrfJ%Q99cA=N&q>@,op>f33a&T#1q@JG#D%!T=Sl.mS%qE#tJkTm%oL0p::OaA)L(<^uF!8E'[;>nAkU5\1.1m]7!CQi[Y4Z_=4+FI$me%B#l'^77So7l%J,hp)Mh8VXW*$M<g:0e)"K%:.+4+2<ZJW.rDA6bd>ZO!n>r-H"/KZ07o'&Ie,@P^Y:At1Cb)a^R2db7(:N2^J39_%q\p;hRG%bVT7.5qn1?V\Sn-4bM#B6%asXtm-7b[`P<"GS!>Zrh^-0c5o8)n%UnPdFl5%-m0]"B&)ssS*!kg=G-7X"+L3PafZ1h^]%LP_f9T[<gI-9G'1C:,A4I$-t^a_=m*O8T_qA[_>NmGDC?s#)<0*D(98fHJNsnS@nfhh#pYYn]@d-4fJK3;%?+p'"p0A1+fY.(SO!%jd.2?IgHZr3+pV89)uo./FXrnkbPFmm01qQVT=^&i5*tfYM`a4]h)CAn;!E/05HdL1P+*B:d[V:`rn5)_N-ba%n._s%4!\.-ET,8%0e7]-J)?H<jSXE8hu/_0*V+V#80ba^*j:E]5SiNpJ<,4dJ,B.=Y&5Ca^J4]/WsRasp'c'?rRYkSoI]^CSs+K)Ko)4PRXPDOA&!!G%.I)<k_KgSG."%%Z-G-FSpGYZ.rW6rO%S\#(QB=)f,`EJqH&H>oTr-^Eq.B/n-aV])\>pFenKnr50rjp_UAb:^E/jf8)34,(Ib/sT%;Vi;,L-8#-\'GV.adHn9!/>j2YmrA\&M]aZllID201bj^-J%TM+0H/T84aYDK*[OM0"5.2P9GIYN=_-0,gW2X7Y&!o>?VnsF;h#*%HI`GBS@[=\#5RREKK::Ep68Og!AAU%\t-^>2*oMLOhIT:^fs]gD?jSH6$U]D-\A&<Lg$FF!.(?e#2,7jQ#q[@,>G@!L=P1tiL&T-%gC4i#55]&bGR:FYM^a*FkDg_,%T$a:IsYhG?:T!HlX-=bTU7teM.aE"]D;V?BcOr#@m5hh^r]9iEJuR]QL0gYjj*ht\)+N9ob!KG%6OlJTEB%s^,F;/tm]P7cCTkFPp(cHQhC[RFN#TE\*LlTN<8S[e0Wg,SiWoD@/g:8DO2DSNoalU[rsWM(I)RV3=;EB6hP`^#kQY1I%?U.b!-iX.R$=AiX\]uTHs*['V;M$s",;sujr>>\/_.P$65VQ!Db:-FWGIa$qZ9f7*!*E@eJo@;"b=A@_OMqH6+HIQe=]_7#c6r_k%*(&`0(N(8GfuWW-)U:uS0mE"Z`:r*hfOO\rCh1/qQ#!R$nFZh5EaVQ[/i`F\n/3N]=4*_^jOO8=8AC3,^B501KEM5oW(]MQ_:t31%?%^,qc"jU8n6ZF@=ITDUV+N'e7+H,Q5+LQP%l&SJ1%uj+*JrRN2`o5_`@-W2W=a@kNrLSKp;`P1lMM.K=8q:MF_JE@M2(2ChW`#j%d#FBhr_&jNkkH%jiJ!b4I^j:&4&j7RGJ4B4pcVs]:k:(ZU5&aJ,<<)a.j!Xo-:F3FNCO5`^Rs?!Dh+Rc*[r\$$^RDG_G?("4*ji'%T!0Fq$[lu,(mi-IOg&I3iSeSMp'p5[D]m22fa_BJ)dd+LjB$$`,D`N6TXmA(Zi@)tr-.[n^Vu2fU/VBSr:#+_X1)N%DGj"drN[RQ%W2@I.C/Ao0Ra&a2$&!d3M#S$!I"an<GAt3u_%+/Vj.(L`C]+/C4\q`8%++7,]6A7@*F>6[q89ZiHf]4$_ia,rcT[QMikRQHifM=U%CJVbaT?7j%5u2a`O*-9-d>3j27i=uAmk`*M&"jP"KDrX)mJfG&^i/bR\#G>]'[M6!KYeaAT(?KQ5%cVtYhni)p>s1V,EVbWYB6*m%bg)sjDiS_Mn2uc&2>NipjJAiC]Cp;TJ1K?0p$n)Q:"gVj*1Th-o-[-6cDfh!"Y&+0PjP,(#H&9Lr0gmXT>74'fiGq$WM<P)Q@fX,%?Dgub#$UR4a!^fU9H*[IG^Mf,Ig>#i@><XYqn@ce/sJ&/jPAc<?M,*/rkfb3og>PPV5]<`p)ZujZQ%E4rC@/-[6%X(7d\mf?#;T"%eHICa57ia%8c&+$,#t0KG*DEPN:=6I5A>T?9qq&AVk[^bDh9o4QZO<tXpmt@A[g'WRjtY;"Qrk]=&/9H-rdHjkC]B?\nMi/<MK5'%@+7-fa02TL*FfK72kb_h]*qd.Of@NS7Psfh^@;E1L%;m/A,Q/'BGf:OLM%`3<Jrt.f@[SJ58!duQg-h"mb-?W.69ShB'9oq3^1,A%NR.'<MDp?N3EG_7<Nc>n*/u=!7.&:I7+qAfShZr/+&LL3aR&h"B09#UHCOQtDg5o$r90SaMTeiZ]cJjTGhRd+307M-j'O0=]gC6I%$7Y4H0NN.j?b^PacH[JY:ODU%<6Q*@LYok%4a>qr'0j-=Y2,dt-SXQe=jOS(-D:"I],]]%#l2/oNVF.4p06N=pm_HWcA**t+,KfC%bgqOCM!^e<EU[hsPu<fcn.*$Sc6n[7jI`b]!j;Buj":^_jd.nNbBc#)!SMgFFAms060]FEp'QMQJ#"(L@l36'nA7\q69k;[GN;lE%UHA4"k4>1`"s#hcViS*1$cqp6paYB:+*.//9f2](MUP<c^Q7>p@.[HiH]<HQLX3cgTAJ1*N]7c,"&FpuP#S$0-U,S*r"6C.0i*/f%9c,(Ki6V2c):mm4Mr9I&!5h=a:_Q;Nm%:FWKE%0W8^?"Mq<p?jn`\:[>ahs`-`=4bjld*G@t)LhHq`u'6f.Im3/-9XhX=b8!Ua?2%aI^*<#oMccbd)KA9P4)Dh[DsKepU!H7h>iB4Ti"i`suDQj]gMbr:HIkq`-4JM[Y@^jP_?5qs:uLU3O@.9mmnVV0en1ihH:$h`a't%HN3d6ESkXfrP_Q^kM'?W_=V?<pNJfIou61]p[=Y;gOJCELX5\OXd?/%YC"Z]l'qM$gXWghJ%#C)qMr*.Vu$G`Kiu99eb-84HYiue%0r;Tk\pg7Mi`pNGq^7FH4Srm,keFH6=-f%gVXjW)^Gu%=r,;Oj.,fls*D?;!fu&/tlHdf%*rb%=HF%YP_7_5roaSZ_U\qt1Vp2g&%2;.^OVg7P$B3J6Xo3>Agp;t!<\"5^0>YX,3(Yn0H2ig_Zp-1Tbpu#R3<4$7>p0W;Zs3BeSh>[)Fr29P-oBkBnohW's;>ofF?e:oJ%r-[ZllTa7,5Q&&%ICh`1J$AsVJ*?U@i6'f$QWsH\mVU_JGIr%5>;Z65Y!;]ih8-Sf%DH[ln88&SDq>_O]:Rs8Fp-^*+8@bM^pi\7%^257eD>Sj%dfk-R*oPdq!<7'MiK/BXDKn7a8.=&`g/e$gkr,M9O(If1\^@g^Gtuoh@3Xn>WK)*:c$A]U)_H?>*KpDn(;ea+9uUB=%krL0Y63Gc\LCUo\27dOq7L&*ak8%VInJ(e^ac.?=/+r_;9=`c\]XScUKJ\J'TVq9e!RU23S+'>5&H.IZ61d*.*UCG`Q>ntM\Ubg(%80p7&cGbD.ZpdI,kdp%Cg@Zrg[++GV9tP'd8or17*Xp.gNmWsZ<QUIF+DMt^qpt):F)P'SA[Wl2Gg"oo>AI(s*_TkE9^;N)kMkVq%bhqE/C?kgH.pMD;=uc%a^()B]cd4Xkp1i"SY!fTRc,_T=;^U45[40M<PF%;qHin4C).Sg7^1jN4U8O7OPCuquO=9](`Q]m#'?LI@%<_knYj,-<cd5H<l:!:SV[8IpCinuKF`NmSR\>^[S*To,4hj&J$_O)XaXjqXGK@\ifjn=>R_2Bp]oWGS&T_GuB,-)Y0D`b@h'%XXT%7?o%$eQ;WRZq$DpiJ_[-I@Vo`n^-&c?W+N:rN5b;@uSpHm?WialJ<fB>j'tM1h!k5RmRjekd4HqbLp7M\)rnLQrr+k4AhJ2N:c1#%Z9tf1@/YFaNjZ7q*2DO5D`d24D>q%Wn`!ro_moF>JbF8^(M@aB?i3/GJRl1='93m<"mMaEfT<^AL=Y],_l7":J]6rpNT7T`!ifjt%Ee.McY%gSYeW%*ZUSVPdgs8_?G43i#NtIl1'&D6.bJBX!lOJm%gHH&q2,mQ1'2X.[Z[F8W*V@[cbGAjAg?&F%Y`R1(V'L298<R$]%=e29S@b5Pf<Z(fj49GL!l,DjU?T_<2^i&MpGAjG>AsC(o(Th\"Ze,J2=LB^5GHD<?,oN;BBWf!O//a;SY)c'$gs:dlk[F_9B^:L8%[fEjsg1XL$;-qA=@,qr\D:+PKH&_NpbBdGOE,*K'54s%uncQ.oYRpFTm+N*U;X<JL/1%n,oh0YH+bTpO+"pg!6e1AGiL>*0@uNE/%i$%+R)3[,Q%66J6K+nAV?m4o`k@edi3_Nf/#u]JRc/R(f$-glU&G,,ra)u+HW=`-MUXgl?OQm"4,Z_q%IIm;KrEQ)Q1^:q=MWWep%=RF)kKJBY=`^8QHVP\.6$N7K[^hB8>;pOf\a^T%?0b,oNSMPP3lO5qO-Y(O2Aj\H\pMT._Xc\-j8^l<Nj?'aEACW9:9CuiXnUOs!%`ar8aO^eUt/e?>g'S*&,a'(m/^-:*Qj\UTQ']OIH_1uFt@%Y05<(R,g/h=$QpeoGTWlA7d/DRC8iO7PL[qj$AfPT)rQ0Ykm`Ho2+%D'RVKgTYSMKQZ#bXP5X@h7!:I[`qm_Bt\i*[nYm_Y1fc?C;'&=DS!tJIsoMj^UiCh[d@,)CUUf[X48kW?bN`^TYMg43;)NjN(Lnb%5_D*nIH*%CUPK=l/e.FBV7B@-X>tBSDNjs#i4liS7?O"j_6IX\%?B:ch`%_X:RMepKs!+2p"i\FBB)Y/$;ZF3'(\rEIDXac?eZ%C%qe3%$"_rIhqLf2Ko?^0:(N+gWgjW\DU.#\,d7do6-Mkdo`h7IJ$"l'&;t)amX(jQ\Ob_8bLHI3D>fU7DT;sDucnc5W0%'LMT%`#a%9=rsB]9QJH9VI\B;EV+:aKppcn@h;s&d."/_*AI?ofNh+h&"q6Z,.Cb.H!ZX1'dei4lg?5Lju^`:+^do;ko*O4':_3UAJdN4WHQF%L78Li+q!YK'ZbdBj\,LG'G:%H$E(?fl<t1pqUK^K!0[6APA)`@eed&Z)n9u+!a^@BQ$T4?;))=`9,3k6<IOQils8.@P6n!n;;PG:%/r>eJS7@.QVZ9fjB(o:OS;-14f/)DCA2OTs61B,$]-2cQW$"EBeu;I8(1pU?-LEY_1t\q'HM]Du;SHdM+r#$(paNb']UWCH[VN0d%j8@n"H@#r<SVSFW?e1O*TFH52%UHQ^ij6@Nj[b8C^1ug.-<3t99rqNUfq/@N6-jh)#pn]jWXS)K_2n,VRP$C_@3Rr<QHXe9"gNZ'%*+\Z=MnDX=kX"^#?mOeIA9S3*2HTPh-$V=MEjWCA%QoB*=#L/)fegiZ[dP-GE;i=VQ=k#O+2NgpWs+8$b0ZTo'8RlI]M2\8Yh)=&%$rIkJdWA/FOu_.*N3\G%)/^!CGbd0rTS.VJf>;[2=c>(QCAc,]2`bB\T@D";bdSI1BNQK0:hACcZ2JF)bq*g>$4J`7Sg*g)KY>j7%G!R%r"n0Gl@][)"`S1&a&,QO/$sAIf'gmdiM`c58.DDmK*fI!Q'@92G^3%3_<3%\PMP*%rdOg3'Hs"5bo1OI9(S3<3Z6%,\XY)^M%\Hm^B7\J.'&_Y\<G*(BXHDMaE-*ZOqjs=>W67rsXc%.*&Kr(.t<PTq!.q,V8'QQ:@[9?oG@$2(TorY\QZi4[n=+X'*#GH`u7EQpt%q.$Ct@u(a`$'rc[(g9<#I0buPpG=e<T4/,iZ2s4KqR+P6k>3th\0(ht7CB%Fj9F%2,_SEBnc/j[W7\R_(O6OaI*6-G8@IHj7@l2!%q41F#>u^2,WsK.UC0g#9@_K<@,V;SEX9Np/;'L\*YF*C<,;:d;\&9MpYmmR8ECCnq\nXCpO#9tF"Ckj>$B.X_['ei(>7=ON4so'U%Zso2!:oplTM^6h+6Wm,Q<B3iYICil5jo.kdI^'$\;p%_,LdFp+4V$jcfum*CA6E.*[dftQ&6mQ5fKeX=YLhNr7&ePWOkbZTYM(5;%&['`.<>5$uimQ8u9M^CTV(#I<LXj?]K;\37Ge1t[7aqPf;g_J$=-\"lZ9a@DWnE]L&5-2G;\8o(/NmF"^o3:;TbMd\0.^%3DYqiD%YtXb$:*P361iUkN$]cqhGYBL?K#D).G.c5+D_`u+lnE<42J!@6kd'4'QT>RNC$%ErZ;mH74+a5K,U)5d1bpq8>JI:]E7Qso)bi45%`"^:V\*(opqrT$$!_/5&W?dJNG;W7+?dm*W6k/!=&Z5X!AGBBj7J!*P$%eQ&Q\*u0#43"a2**<X3]No%K,FO9LMuoc\(h>s5QLU^%pQA).3Kgrj2;*f@LttU2C=WGCK>g--@ji!E0pp'?]unRn:/G>+j^G^+=07nV]EG8]:"G1f4*Vcmjkk@0-.Wi'EkY7n*Zim/ZjR8`%oVI;*RnLh.b9Age%8,')#m(.9Xr2%hhF1dco3%'4KU+!dZ#:7Q&)kTQW@N.q.Op/(j"[N@hKkAV)/Bk5PKBbJ$nPQ+L1?1BX6(*T%(/.A9hj";Cc=8!P0pi<Pr#iY3;9j_uLVSaH'KsX=qhK-RMOm,:6A\>'NOD4iV\ta0&aC9ZG0WcOm]T&4F`(aslj\o<_%JbKYgQ5t%=<Htr]6\1.%;N>YANU]gja9^L0mb#S]Em&F]0kniID%GJi?NsNKeG;`d'(CsjCr/4qQMJmV&E?";2M@p*_:lg?VM]O4J#(L7f8Y`%5\*Q9@NVBuhel)e4@@n"1Q%f>+a%]#f.b47p>M$(9A&n(naI4@'(=F2*ca*>XB_0\V$b%Eic&Tq"YiE>6'KX6XO*pR-Ce,)f3DEN%Ti>Q:.p7H:)Q"pCi$lYoR$`I,6@bTrXu7c4)d:?QN#_;g@Wp^/_.f"Z0U7.jRNop/&#%LT7"OPrCKP'_o71*Q5.6B*$bn'<)rb<@%'ZpI'YR+o*YnAKP.*pEIS3]og1V*]\<G1,-C1H3Uc_fj70"Hm5TUofH/YW0+g?HKS6h(OhP8Zu<Y.uFsnA/5tX9R6-9a1:U,Tj!N%Z%5k>\ZSJd7[uQ0N>u-DKtMoeW;If@*8bTQ>J`-sATt"gDG28]lCM/B,.U]@j,gX\ZikYXK""#eoj%kGh$#SfDD=EnkDLm6RMq9A%Rc0YIJg;C_>cc,*KKYiFf4*Ml7RdN`g%UqEd3&rWaf.J<T'$0oQULD#@Z86SY!OoVksHlQfg=QkhiWA?8J=<>MUC3p:hjL2&J\D&%PF@X1f=&XlK2LnHE=f/rjam[W[3h\?b_Z"*i2`,uL=!Rjj<R7/#[?QLE3`f4WGD3F_b\l5'aH69GLe]G>I1@:5Z-Pk,rs%V&[Qf`%:=''<,se_5(nVp#S'@XKN>%$e^n@N8Z)YV?LQ$<u&$09$la"7ZSuKF?>.H%$0s45B^TVZAFIrBpQfMm1,r-I^?*i4BZRm%SCMpel%Q-Ma9o76q\%sB,6_-elRV8L_?%g7j>HVmCJk&FR`[&F0`7'(,e(US2M>hnCFK[YXW&-3J`qaRA>LGuI!!c3m*qjY%GfoEW\Kt,p_%(?1JtO`dAeVaR6)*.BZ`qr$1&30?TI`9]N&g:)[%<_mh=BL<@;k/(5s3n6W)!GlLi$ack(\n/874I';rEiW>1[X,GBPXW4h5F?(-%M/:n6Q-ub8FEL?@'4o+lVoHbH_OKPm"?Vb=W@/0GEsZluO8=a@.a+KB6#;HOp[SlXA/YP@M*Aqt,]b8i:k"WDGt\2hGt-4qdX@!t%,f+0>`mZrLfPE!*;$BqJ*0^HB?(u"q*#A"NbUoYrhl]t(7<M8kicT3U$C,X;TlCi]SZk;Noph4')6dS!1e6':FlltV"ogOmdA>'a%4;\ckBMXLa;d_lrN/[E*P-3=aDT8XM'1[l*U&asf"YYhepEOFlfB$Em?B`[3=mnPCr2=N[8W2AZ'OPl;a#@BU*(\Vjorjh5+o#bC%3=O:\rU(Ah:`cJq%`.78#c(VGf/T9cI/U%%?3F*4r^DB<cSY<a']9/3P8M9U3p.9I8),J4e^^&5X/6W?3UF?:ElM*f;_'"tefr!S%U4t\0Bu'Ak(#KghOb@-e>S5`SJROGo(n!1ER_'=EjX,FUR`Nl!^QJjp-(XS*?]aEhe^MbCO0'gKR@Emaq`Lm,S\uBM0/)Ir);m[u%.hKPFV3J`RZqO\AGr+AEO=`HL8ERCWC?j&P-&Ym.2tc!20T?c?1A53j_hnat#ZRfVgEo1sR6QTZjt)^uYpCSjC<$Ria2ltCS6Vko%a^jPFC*ZX=_<*^U\KM_4?>9g#49m?K.[E=mF.c=)1KY2%&V*#oU2)(!H#.^4J)9bGI_\u^6ki5TR*$*f:M%#S$roT"rL>Dp#g:]G%YY&U5=jEn3#K#aVa<gj?M-uS@bcR%3hE1Y3,%A7m6<<""cSc8%"<]Ke3$]#`@DR]DMqTl*coAJ-OTs;C8u0O540HL4)*Lh_YscUf%PpSM3.s[Rf.=*]U\h@[>q>D!=$"YfCLUkt6.!X;@.U$XpDX$O/-qEn-QI>IEjB1k3Z5=Mc3I`S:^tV`M/rPY1Wih%R'm]I)3#W.r%oos^\GQm)o8Erm2+t"Nd<PN'6A6enY;?*bMi)DF`_mg\>.c2!e;JIA%FpnidLrof.RWC8jDO)km-Hua&M?n-3SQM@Y8]!1p+'@)J%W:;!U-mC^p]Op0=eMb<B@u%5q5-6'qKOQHdET/n+ek,Ee9%:\=/T!#KmD;"t(XVF2QjoaC3U3]]Q$G,D-.@W(cH;"r/T6M]>H!l:%?c.Q=5Um9sc!:^G]85=)oj5q@3p;eW>jUJs1KZnR2qnViN&GI1%1QK`@rnu^)UK!d:0*1F?8^BUZW8#iYF%X8E^9b%GFINC6'I#C%=[G-F^sH-iY.0<;`ORfL#`N=mCPnW42g.mr8[ilHc9a7fS/?]uM<jd:XM061##f1:c^T$kc,>YP<DlF7\:EgbV9*Pt^hr/Y<!O,Z%k;c(4(i,H<puA;=^OKB^clV=9kUNlgVfn=07O=c6HNa4U'jJT-%Bc/Hj,h4ij$F#))dbLbhVZa?C'A(a`U?'i_,Q2d[n<%@]1+X8%;(PG2nla<\3SnLJbl[%Cbc615_^u``@aDZ:A/E8PnG-s]N'Xj*,+H'i5KIGW\TBRDLTK469p)^)6W@Bs(Iu7HO.nr]T#cL@[Hr9*%2f&9GRFc207ag.EdE5PBK1')`M+(XAEE5uKRmPK$qjk,h-9-2Pc%PR!,pruYe1:3+>WjpdIL]8kJt>\<g)cBUp\aY,XqWXf+N'sF%WQLR7:qVRf^WW0>Tq_mmD+9,3e[#fu7"uLh/^.WQ&]LdF!+e_RWru6?9hm(-d/:FaROTuN&>*raK%6;/=)KRO@(R[a>ndhtN/BUK%*#U7rN&`WBEEtMW]dpp0-grlhSOeaWpg,E.Pl3`"X(B]AaI">G2kH0);8#>3\T\C5[<88`3,c-$NC$f/-kY(#R:,bd0ShSUeL\UB%n>k%D#ji(Yd^i?]"Dau-=j]*q,i)'q<NcsTIaU^a&Sm*h8GsP$.s[*+F59dGFrR5#@U4E%3h!'@$NM\pe#,b(aGTW'RJ?tVF!;cF%lr_\Y![WH&["Rs:"'n@H[2P?FZ)lTu7<*buDDc]dPIC^I9p<8il7aLP=^2c.)I]?!'-sRE[:)<*D-rZ3h<H5obN`6>LB%^HH5O)s%T"I3DbDlJ:NMuieDtTOb]Fq\<1jDg<Y4Nebls(!fUB4IblaDYFf0oL8\qkii_\a!R4I26hG;IH?&(tIp-8j.a(Mli<D9$:;B5_o(%^?7paHS79/??V2(LF0iY9AZpjZtmLT2\_K)p;J/r47a'oR#ZU]>?K')a!dMsf%f./K6Ua8EelKO/p=7cWmij68>N`282A]cURJ]e%S05PS+bJ_=Y,+FgZA.Y,#L;X1`PurS(Fp%R7I1Q-.B9T`G83IgUmMLTf!R2`@5=EAF,?kF>`$TFKJ^iCb'I@.D!H!KKh@.6=VmE`%?()A9P7kOF\jc);@l_P.GJX-\I;TCH@!)qFh<7MEEC;cWL3>`nR>ND%dtld.FA?Q#;j"@Y$7lt]2GbA%/ad7<gH(>d+_0TW(CPZC%ef?-A@#l3ZM>.d=db1*'l?=meWut81ed(a/dU>$]BEP.EeBkWp:D)i2d1R?U9s&FqBmpI;0$U-Q[Z?[Q\p<8a@uDA8TgE65;ueFk%Meuj31O,jt<!;q,A6,b+>+-uSFh:6pBY'H`U(kV1bJGnb*g1MM9&#aJeO%frMYRa;0'JPPa.e\oX:o;?RqhU%4juCDKi..^P`"_6%S#[4jeM"%@Z_&.#Q*cZ3o#n=$FhJcPoZ\-tDn>9gUf%JZ"m9p-'i%<Y'[YCV]t13JAoVaO:/^H_TJ)^S;%3uS4*e0hi[Tk:,5p/a%am;i$mPhS.njI1D>m!u$8<lg%qaPZU5QT0[S'F_I`Y<C@WK""FQ3Ih^TjoQnK9!9Pi^?C9NcQ+C!^!fc+okOU8h.X].fZ@[7*CQr%HoFU2<lF:1:hejqmJ^=`fXfgioc>@Q)M=c8"?$r4)t\`9ES`R\#XetO>rP9=):Wfq$1&VI*B>XcNN2I^k),Yo<d@c75.dWMh^'CE%,7W%NW6?6U\>Om?l73$#iQBC-[E&Fh4G<$r3'dReDO^?T7`+;rpM_O(kJn'3]_epk:UL1Fh'.'r,03j%4:;JrCa6lM_&:1=)Sl)E%O?>(Rg1io1,ASEB@Ee_V:U0SuH8I"_<eoNE=SML6hEWs[QED,8cEOH,5&!c#9DbY"5B_(q?t:s!M3J&h%>Z*#UUM(p;3We,Ok#b^%$+p!uMABX&gG(W7;m9(EMdeR<Q:gK^J]TG]=Y;C/Z#_,pck@@p$><hJd+T,?H']mcVRo^ig79dmfJUU<,1fS%<2-J=FJe+lJ<OkR%`G%-Zmb!6`VRG":S,sVhs'hgKk!K?41/hgZ5Tm(N=b:K],fR&_9LS2\)FC+/_"9CnG-AU0+:[Whni0eTK:2jS3cS/b^)^?2Zu*XY%($BPu^ehm)k'5$<pntRlK%^ms!Bt#T-(3e@+L+K2^-'ecgeDo=!UA6\5t>ie^8?"7/P!!IW?f>[,7sqF[aZh9bqDHm_71]lb3:64%J"b_12*nD+D'l7-j'5ci7?E+8DX_7q@Qt2!'XFgA`3D(4NXmNad+aU)$I"sS6?7W@abX>]1%A:K9#YDUfjMTQ`gWTThVGfF;0<c2%=BjJ+7tHmIR)mdrp>+NfH0PA\IB?IR;RF3l`q,_ab<d)G%Kr,LA#NtIV&<_KlfreJW3e84bH[CVmTU9b6@W.i,qL1\6C3dU6[S/6%'KL:VUHO'q,"+g"NBF:6l_mHJ_qaf8o1%*XP?6agO4;3Q,c)54+L9*Gp0&D*E9s),Rs^B4K@k4<drcET7+^qjZJqN@[m_`(<?Mt0%bn:^^i#-?CRUR]j(PIrT!(b&L;fk<$VfaN-P1g\r1e2cr75GYnH0A4mjK_42j1)o3`sTB[3R1JaP2#\U+pFs[r+<lZF3Fm%T&+pd%2KXb>-5*YaUK1:IC82%9.`>t^UrYlu'[/TW:BdNBC</=;Agt.*MC=BKYnFKS#iUCT+f@+IXniWFi>W5'nGq'qO^^t6!'0-E3RJ"D%'us%.RXGcZ>KUr9b&Qa(9`l$-]X3YpWgd][:N?aSIG:-T@!k^Xn0t"+^pRh$*LF:-_0%!!rTfN:4hUdXiP"i<Nurago'ED)?X,QQ%8r#]\YrBZ/;OeSHHS=d<L!_nX2tp9kr9`A&K_Xda+oZL.`-8U=5FkuCo3HfcQ_3'p-b%;qT'rW7mmZo@mp4cXF1U*6ZeGlZP4"&"%qqe)k^8nj??W;/f^3BCOO42o^+1n:3G"6uINr!_A\2slYi[IF]Hd<^@Ek4?Lj<Zn)A;aB$cM&r`??3V=^#[&p-/5!kF2%BrKu*#V%_I-GRn3&91Fu;cSNLHX6]ut&DTC0u7s2gfPr\C!W?UO,AWe=1Jk#K:1D%jNu'>&)pbAQ(Qs42$#kBiP"T:BfPqIJ4GB@lS7j_aa5%^3=kgaQ_ULerd`7#+R``QV+kcs'A@1?]M_oCA9H)j#Pq<j&pQ]G]qnfQL2<Sr2n^diO-D3Zf#r7Zf'igK&*;mT@0U*oA.6_bE%(U%lM5>$cEc3*ZeMPPKD+T#mp0g7I_';u^2$odCKg]rCK`@6mG8hFCm(u*6?@c\Qm5kicj<riXA1p5GttK)*lDrBC)OLk;6q!:Mr@ro%!ip=u%NrGq%YSG;L[d#^p0mm^Hd<emH+H)So-\a8kO'VRh+>E^j!Ol"mp5@4Fh6mioon]m[;-iX5LMZS9et&(l8[V-lI`N0pb,io%lrsDT>5ioAQ9XOfmucTY/L.8d8l87h-:D&tbZ_Cp/"9T0h.kogL@a(/UTf%1*;@@n8eX?39oLY/hQu1.XO#-tkHH#.-/MbnTs]t`%_7K/@MimLZEpBHYgAV-E],O=<$+oQs\oe$Tlq]KF@?19n=JFm,_55g(!(h=h&e%X*=tL&Qd0Kg+2V#hH%qNaC@E-sO<gLBI_!\ls%e%3l*Dc,I5jV'+=e!!R)oa?M`bFScKf[cEU8(%Q)QIrLb]GR><EJ2@9E^150U7FJG[K+#Y8V)WNE@e2248`[_.li9C\kq)2L7u_@%.GDs"F2rWf/d7@]0?moC+WF],F>.I-=kOcgO>h1rOAJHNfX<^h;F]7h#f`]s;F`mtd'[VN+eEt]DUjRB*V-%h?N/XJBMl4-3AbCj%Ru_?!.aK8e(m4O.%$=#qlcJ>@purum-fgF*OaAsW)^9N29(5BR!#(P0r(iB,K8[`%fZ)cpE6"8@6B*;@1+%PmkHL=`C<1Ws,V[*i%3fb?:hC]X$'scT,`.V"hi2'UDZ%j=?$4Ic'aI)[d@:3B65dW,l1A4StS]m4]E2WG1%NZcqDt/DI2]4rqTp%=ZRk9TPVgD(,ijAOG%p$5sIq:!IbX[i+,h`KSBp[$!\:Z'f#3niiDXV[TMooF;\GlQ53DstHOs*FY.`nP^dh)G&bdTKK(h>6[<]*mdlD/T0d0Dj%-df,eU%l[Q'%h<Xc!d`GGcq77&a]*Fe,!%Ot(6Sj#!):QD_?#jY-2cIp^;VIXG%G38g]G\8`h+6?WjNSNt16+'Zp\<Y3]qDkm_Eq50)YVeO%(o^?#a0`D+3YHcJGb0%oIHL3l0#&:%hu2ZiHN,pNY?nt@m_8;fMtc]=kK2E-X*_%aHL'F?PCGU)p[HSPg"qAQHiN8>s5)eV:S-Bh%G4N$>B)f^#an`7jB.*T>?Tn4NOa9UrpoCU4o?fekrI6StnO`~>%AI9_PrivateDataEnd