\documentclass[a4paper]{article}

\usepackage{tikz}
\usepackage{pgf}
\usepackage{amsmath}
\newcommand{\gls}[1]{((\textbf{#1}))}
\newcommand{\mw}[1]{\textit{#1}}
\newcommand{\mow}[1]{\textit{#1}}

\begin{document}
<<loadlibraries,fig.width=5,fig.height=4>>=
library("tidyverse")
library("broom")
library("xtable")
library("MASS")
library("ggdendro")
library("corrplot")
library("eulerr")
library("tikzDevice")
library("knitr")
###THEMES
theme_set(theme_bw())
scale_colour_discrete <- scale_colour_grey
scale_fill_discrete <- scale_fill_grey

###CHUNK OPTIONS
opts_chunk$set(dev='tikz',
               external=FALSE,
               fig.width=5,
               fig.height=3.5)

###TIKZDEVICE OPTIONS
tikz("fontsize-normal.tikz")
@ 

<<dewidatabase>>=
#df.dewi <- read.csv(file="./data/lentypedewi2.csv")
df.dewi.c <- read.csv(file="./data/lentypedewi.csv")
glsnames <- c("\\gls{j119}","\\gls{ll27}","\\gls{ctd22}")
colnames(df.dewi.c)[5:7] <- glsnames
#names(df.dewi) <- gsub("_lenited", "", names(df.dewi))
df.dewi.c <- df.dewi.c %>%
    mutate(Lemma = paste(Word, " ", Ll27_p, ".", Ll27_l, sep=""),
           Sum = (df.dewi.c[,5]+df.dewi.c[,6]+df.dewi.c[,7])) 
names(df.dewi.c) <- 
    gsub("Type.of.lenition", "lenition", names(df.dewi.c))


### Get rid of consonant "c"
df.dewi <- df.dewi.c %>% filter(Initial.consonant != "c")

### Make special free/contact lenition df's
dewi.free <- df.dewi  %>%
    filter(lenition == "free")
dewi.cont <- df.dewi  %>%
    filter(lenition == "contact")
@

<<firstresults>>=
### Calculate mean rates of representation
## df.dewi.c[4:7] %>% ## This code is actually more elegant than that below
##     gather(key=MS,value=Rep, 2:4) %>% 
##     group_by(Initial.consonant, MS) %>% 
##     summarise(mean = format(mean(Rep)*100,digits=3)) %>% 
##     spread(key=Initial.consonant,value=mean)
firstresults  <- df.dewi.c  %>% 
    gather(MS,represented,5:7)
firstresults <- aggregate(firstresults$represented, 
          by=list(firstresults$Initial.consonant,firstresults$MS), 
          FUN=mean)%>% 
    data.frame  %>%
    mutate(cons=paste("\\mw{", Group.1, "}", sep=""),
           perc=format(x*100,digits=3),
           colcons=paste("\\tch{", cons, "}", sep=""))
firstresults
### Get these rates in a LaTeX table
df.results <- firstresults[,c(2,5,6)] %>% 
    spread(colcons,perc) %>% 
    rename("\\tch{MS}" = Group.2)
df.results <- df.results[,c(1,3,4,2)]
latex.results <- paste(
    "\\begin{tabular}{lddd}\n\\toprule\n", colnames(df.results[1]), 
    " & ", colnames(df.results[2]), " & ", colnames(df.results[3]), 
    " & ", colnames(df.results[4]), " \\\\ \\midrule\n", 
    df.results[1,1], " & ", df.results[1,2], " & ", df.results[1,3], 
    " & ", df.results[1,4], " \\\\\n", df.results[2,1], " & ", 
    df.results[2,2], " & ", df.results[2,3], " & ", df.results[2,4], 
    " \\\\\n", df.results[3,1], " & ", df.results[3,2], " & ", 
    df.results[3,3], " & ",     df.results[3,4], 
    " \\\\ \\bottomrule\n\\end{tabular}\n", sep="")
cat(latex.results,file="figure/dewifirstresults.tex")

### Visualise them with a bar plot
ggplot(firstresults,aes(x= c(Group.2),y=as.numeric(perc),fill=cons))+
    geom_col(position="dodge",color="black")+
    labs(x="",y="lenition represented (\\%)")+
    guides(fill = guide_legend(title = "consonant"))


### Alternative with stacked bars; NB unweighed for rel. freq of p t c
ggplot(firstresults,aes(x= c(Group.2),y=as.numeric(perc)/3,fill=cons))+
    geom_col(position="stack",color="black")+
    labs(x="",y="lenition represented (\\%)")+
    ylim(0,100)+
    guides(fill = guide_legend(title = "consonant"))
@ 

<<contingencytables>>=
### Here we generate the right numbers for the different contingency tables

### Contingency table for observed values
obs.ll27ctd22 <- df.dewi  %>%
    summarise(
        AA = nrow(filter(.,`\\gls{ll27}` == FALSE & `\\gls{ctd22}` == FALSE)),
        AI = nrow(filter(.,`\\gls{ll27}` == FALSE & `\\gls{ctd22}` == TRUE)),
        IA = nrow(filter(.,`\\gls{ll27}` == TRUE & `\\gls{ctd22}` == FALSE)),
        II = nrow(filter(.,`\\gls{ll27}` == TRUE & `\\gls{ctd22}` == TRUE))
    ) %>% as.numeric  %>% matrix(nrow=2)

obs.j119ll27 <- df.dewi  %>%
    summarise(
        AA = nrow(filter(.,`\\gls{j119}` == FALSE & `\\gls{ll27}` == FALSE)),
        AI = nrow(filter(.,`\\gls{j119}` == FALSE & `\\gls{ll27}` == TRUE)),
        IA = nrow(filter(.,`\\gls{j119}` == TRUE & `\\gls{ll27}` == FALSE)),
        II = nrow(filter(.,`\\gls{j119}` == TRUE & `\\gls{ll27}` == TRUE))
    ) %>% as.numeric  %>% matrix(nrow=2)

obs.ctd22j119 <- df.dewi  %>%
    summarise(
        AA = nrow(filter(.,`\\gls{ctd22}` == FALSE & `\\gls{j119}` == FALSE)),
        AI = nrow(filter(.,`\\gls{ctd22}` == FALSE & `\\gls{j119}` == TRUE)),
        IA = nrow(filter(.,`\\gls{ctd22}` == TRUE & `\\gls{j119}` == FALSE)),
        II = nrow(filter(.,`\\gls{ctd22}` == TRUE & `\\gls{j119}` == TRUE))
    ) %>% as.numeric  %>% matrix(nrow=2)

### Calculating expected values
expval <- function(x,r,c){rowSums(x)[r]*colSums(x)[c]/sum(x)}
expmat <- function(x){
    exp_lst <- list()
    for (i in 1:ncol(x)){exp_lst[[i]] <- expval(x=x,r=1:nrow(x),c=i)}
    matrix(unlist(exp_lst),nrow=nrow(x),byrow=FALSE)}
exp.ll27ctd22 <- obs.ll27ctd22  %>% expmat
exp.j119ll27 <- obs.j119ll27  %>% expmat
exp.ctd22j119 <- obs.ctd22j119  %>% expmat

### Calculating squared residuals
sqres <- function(o,e=expmat(o)){((o-e)^2)/e}
sqres.ll27ctd22 <- obs.ll27ctd22  %>% sqres
sqres.j119ll27 <- obs.j119ll27  %>% sqres
sqres.ctd22j119 <- obs.ctd22j119  %>% sqres

### Calculating chi-squared score
chisq.ll27ctd22 <- sqres.ll27ctd22  %>% sum
chisq.j119ll27 <- sqres.j119ll27  %>% sum
chisq.ctd22j119 <- sqres.ctd22j119  %>% sum

cont.table.tot <- function(d,x,y){
    paste("\\begin{tabular}{ccddd}\n\\toprule\n & & \\tchhh{\\gls{",
          x,
          "}} \\\\\n& & \\tch{A} & \\tch{I} & \\tch{Total}\\\\\n\\multirow{3}{*}{\\gls{",
          y,
          "}} & A  & ",
          round(d[1,1],2),
          " & ",
          round(d[1,2],2),
          " & ",
          round(sum(d[1,1:2]),2),
          "\\\\\n& I & ",
          round(d[2,1],2),
          " & ",
          round(d[2,2],2),
          " & ",
          round(sum(d[2,1:2]),2),
          "\\\\\n& Total & ",
          round(sum(d[1:2,1]),2),
          " & ",
          round(sum(d[1:2,2]),2),
          " & ",
          round(sum(d),2),
          "\\\\\\bottomrule\n\\end{tabular}",
          sep="")
}
cont.table.tot(d=obs.ll27ctd22,x="ll27",y="ctd22") %>%
    cat(file="figure/obsll27ctd22.tex")
cont.table.tot(d=obs.j119ll27,x="j119",y="ll27") %>%
    cat(file="figure/obsj119ll27.tex")
cont.table.tot(d=obs.ctd22j119,x="ctd22",y="j119") %>%
    cat(file="figure/obsctd22j119.tex")

cont.table.tot(d=exp.ll27ctd22,x="ll27",y="ctd22") %>%
    cat(file="figure/expll27ctd22.tex")
cont.table.tot(d=exp.j119ll27,x="j119",y="ll27") %>%
    cat(file="figure/expj119ll27.tex")
cont.table.tot(d=exp.ctd22j119,x="ctd22",y="j119") %>%
    cat(file="figure/expctd22j119.tex")

cont.table.tot(d=sqres.ll27ctd22,x="ll27",y="ctd22") %>%
    cat(file="figure/sqresll27ctd22.tex")
cont.table.tot(d=sqres.j119ll27,x="j119",y="ll27") %>%
    cat(file="figure/sqresj119ll27.tex")
cont.table.tot(d=sqres.ctd22j119,x="ctd22",y="j119") %>%
    cat(file="figure/sqresctd22j119.tex")

@ 

<<chisqsepcontfree>>=
### Here I illustrate over- and undercategorisation.
### I do this by analysing the relationship between ll27 and ctd22,
### separated between contact lenition and free lenition.

obs.ll27ctd22.free <- df.dewi[6:8] %>% # contingency table for free lenition
    filter(lenition=="free") %>% 
    summarise(
        AA = nrow(filter(.,`\\gls{ll27}` == FALSE & `\\gls{ctd22}` == FALSE)),
        AI = nrow(filter(.,`\\gls{ll27}` == FALSE & `\\gls{ctd22}` == TRUE)),
        IA = nrow(filter(.,`\\gls{ll27}` == TRUE & `\\gls{ctd22}` == FALSE)),
        II = nrow(filter(.,`\\gls{ll27}` == TRUE & `\\gls{ctd22}` == TRUE))
    ) %>% as.numeric  %>% matrix(nrow=2)
    
obs.ll27ctd22.contact <- df.dewi[6:8] %>% # contingency table for contact leniton
    filter(lenition=="contact") %>% 
    summarise(
        AA = nrow(filter(.,`\\gls{ll27}` == FALSE & `\\gls{ctd22}` == FALSE)),
        AI = nrow(filter(.,`\\gls{ll27}` == FALSE & `\\gls{ctd22}` == TRUE)),
        IA = nrow(filter(.,`\\gls{ll27}` == TRUE & `\\gls{ctd22}` == FALSE)),
        II = nrow(filter(.,`\\gls{ll27}` == TRUE & `\\gls{ctd22}` == TRUE))
    ) %>% as.numeric  %>% matrix(nrow=2)

### Export observed values to LaTeX contingency table
cont.table.tot(d=obs.ll27ctd22.free,x="ll27",y="ctd22") %>%
    cat(file="figure/obsll27ctd22free.tex")
cont.table.tot(d=obs.ll27ctd22.contact,x="ll27",y="ctd22") %>%
    cat(file="figure/obsll27ctd22contact.tex")

### Squared residuals // chi^2 score
sqres(obs.ll27ctd22.free) %>% sum %>% round(3) %>% cat(file="figure/chisqll27ctd22free.tex")
sqres(obs.ll27ctd22.contact) %>% sum %>% round(3) %>% cat(file="figure/chisqll27ctd22contact.tex")
@ 

<<fishertest>>=
obs.ll27ctd22  %>% fisher.test(alternative="greater")
obs.j119ll27   %>% fisher.test(alternative="greater")
obs.ctd22j119  %>% fisher.test(alternative="greater")
@ 


<<bardewi1>>=
df.dewi.mscountperlentype <- df.dewi  %>%
    dplyr::select(Sum,lenition) %>%
    group_by(Sum) %>%
    summarise(Freelen=sum(lenition=="free"),
              Contlen=sum(lenition=="contact")) %>%
    gather(LenType,Count,-Sum)
cont.df.dewi.mscountperlentype <-
    df.dewi.mscountperlentype %>%
    filter(LenType=="Contlen") %>%
    dplyr::select(-LenType)
free.df.dewi.mscountperlentype <-
    df.dewi.mscountperlentype %>%
    filter(LenType=="Freelen") %>%
    dplyr::select(-LenType)

paste0(
    "(",cont.df.dewi.mscountperlentype[1,1],",",
    cont.df.dewi.mscountperlentype[1,2],")\n",
    "(",cont.df.dewi.mscountperlentype[2,1],",",
    cont.df.dewi.mscountperlentype[2,2],")\n",
    "(",cont.df.dewi.mscountperlentype[3,1],",",
    cont.df.dewi.mscountperlentype[3,2],")\n",
    "(",cont.df.dewi.mscountperlentype[4,1],",",
    cont.df.dewi.mscountperlentype[4,2],")"
) %>% cat(file="figure/countcontlenperms.tex")


paste0(
    "(",free.df.dewi.mscountperlentype[1,1],",",
    free.df.dewi.mscountperlentype[1,2],")\n",
    "(",free.df.dewi.mscountperlentype[2,1],",",
    free.df.dewi.mscountperlentype[2,2],")\n",
    "(",free.df.dewi.mscountperlentype[3,1],",",
    free.df.dewi.mscountperlentype[3,2],")\n",
    "(",free.df.dewi.mscountperlentype[4,1],",",
    free.df.dewi.mscountperlentype[4,2],")"
) %>% cat(file="figure/countfreelenperms.tex")



df.dewi %>% 
    ggplot(aes(x=Sum,fill=lenition))+
    geom_histogram(stat="count",binwidth=1,colour="black")+
    labs(x="amount of manuscripts representing lenition")
@ 

<<bardewi2>>=
unique.df.dewi <- df.dewi %>%
    filter(!((df.dewi[,5] == df.dewi[,6]) & (df.dewi[,6] == df.dewi[,7])))%>%
        cbind(data.frame("unique"=rep("unique", nrow(.))))

notunique.df.dewi <- df.dewi %>%
    cbind(data.frame("unique"=rep("not unique", nrow(.))))


rbind(unique.df.dewi, notunique.df.dewi)%>%
    gather(key=MS,value=represented,5:7) %>%
    ggplot(aes(x=MS,fill=represented))+
    xlab("manuscript")+
    geom_histogram(stat="count",binwidth=1)+
    facet_grid(unique~lenition)
@ 

<<vennfree,fig.width=2.5>>=
euler.dewi.free <- euler(dewi.free[,5:7], shape="ellipse") 
euler.dewi.free 


euler.dewi.free %>% plot(fill=c("#33EEEE","#EE33EE", "#EEEE33"),
                         fills=.25,
                         cex=.8,
                         #labels="plain",
                         quantities=TRUE,
                         #legend=list(space="bottom",columns=3,alpha=1)
                         )
@ 

<<venncont,fig.width=2.5>>=
colnames(dewi.cont)[5:7] <- glsnames
euler.dewi.cont <- euler(dewi.cont[,5:7], shape="ellipse")
euler.dewi.cont
euler.dewi.cont %>% plot(fill=c("#33EEEE","#EE33EE", "#EEEE33"),
                         fills=.25,
                         cex=.8,
                         labels=FALSE,#"plain",
                         quantities=TRUE,
                         #auto.key=FALSE,
                         #auto.key=list(space="bottom")
                         )
@ 
<<dist>>=
dist.free <- dewi.free[5:7] %>% 
    t %>% 
    dist(method="binary") %>% 
    cmdscale %>% 
    data.frame %>% 
    mutate(MS=rownames(.)) %>% 
    cbind(data.frame("lenition"=rep("free", nrow(.))))
dist.cont <- dewi.cont[5:7] %>% 
    t %>% 
    dist(method="binary") %>% 
    cmdscale %>% 
    data.frame %>% 
    mutate(MS=rownames(.)) %>% 
    cbind(data.frame("lenition"=rep("contact", nrow(.))))
    
rbind(dist.cont,dist.free) %>% 
    ggplot(aes(x=X2,y=X1,label=MS))+
    geom_text()+
    xlim(-.20,.20)+
    coord_fixed()+
    labs(x=NULL,y=NULL)+
    facet_grid(~lenition)
           
@ 
Yates' Correction for Continuity:
\[
\chi^2=\frac{(|o_1-e_1|-0.5)^2}{e_1r}+\frac{(|o_2-e_2|-0.5)^2}{e_2r}+...+\frac{(|o_k-e_k|-0.5)^2}{e_kr}
\]
\end{document}
